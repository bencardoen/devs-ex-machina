cmake_minimum_required(VERSION 2.8)

### Generic CMakeLists.txt file ###############################################
#   Assumes you have the following project layout (with this file in ./main)  #
#               {root}      /main/src/ {all source/headers                    #
#                           /main/CMake/ {Cmake find modules}                 #
#                           /build      {project is generated here}           #
#                           Build folder is generated by script or IDE        #
#   @author Ben Cardoen, Tim Tuijn                                            #
###############################################################################


### PROJECT NAME ##############################################################
SET(PROJECT_NAME "dxexmachina")
SET(PROJECT_ROOT "${CMAKE_BINARY_DIR}/../")
get_filename_component(PROJECT_ROOT "${PROJECT_ROOT}" ABSOLUTE)
MESSAGE( STATUS "CMAKE_BINARY_DIR:         " ${CMAKE_BINARY_DIR} )
MESSAGE( STATUS "PROJECT_ROOT:             " ${PROJECT_ROOT} )
project(${PROJECT_NAME})
###############################################################################


### DEPENDENCIES ##############################################################
# Use CMAKE to discover listed dependencies. If found, these set the
# respective include/library paths referenced later.
# In localpreferences.txt write any root path for any dependency listed.
# DO NOT use comments in localpreferences.txt
include ( localpreferences.txt OPTIONAL )
# Used to check if a compile flag is accepted by the compiler
include (TestCXXAcceptsFlag)
find_package(Boost COMPONENTS  system)
find_package(Threads REQUIRED)               
find_package(GTest REQUIRED)
find_package(Doxygen)
###############################################################################


### DOCUMENTATION #############################################################
# add a target to generate API documentation with Doxygen
if(DOXYGEN_FOUND)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile.in ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile @ONLY)
add_custom_target(doc
	${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile
	WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
	COMMENT "Generating API documentation with Doxygen" VERBATIM
)
endif(DOXYGEN_FOUND)
###############################################################################


### COMPILER ##################################################################
# NOTE:  Specify which compiler (explicit) to use in ./generate_build.sh
SET(flagstdc11 "")

# Check for Mac OS X, if so we must link with libc++ library instead of default library
if (${APPLE})
	SET(flagstdc11 "${flagstdc11} -stdlib=libc++")
endif()

### Debug #####################################################################
SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -march=native -O0 ${flagstdc11} -DSAFETY_CHECKS -Wall -Wextra -pedantic -fPIE")
###############################################################################

### Profiling -- Clang and G++ ###############################################
SET(CMAKE_CXX_FLAGS_PROFILING "-march=native -g -O0 ${flagstdc11} -pg -fPIE")
###############################################################################

### Threadsanitizer ###########################################################
# If we use clang compiler and thread-sanitizer is supported we can add -fsanitize=thread
if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    CHECK_CXX_ACCEPTS_FLAG(-fsanitize=thread FSANITIZE_SUPPORTED)
    if (FSANITIZE_SUPPORTED)
		MESSAGE( STATUS"Working with Clang: enabling threadsanitizer if build==Debug")
    	SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fsanitize=thread" )
    else()
    	MESSAGE( STATUS"Working with Clang: threadsanitizer not supported")
    endif()
endif()
###############################################################################

### Print everything CMake does to cout to verify the options are sane.
# set(CMAKE_VERBOSE_MAKEFILE ON)
###############################################################################


### Release build - All compilers#############################################
# Only use this for production code
#
# Note : fPIC flag is needed if you built GTest with fPIE/fPIC\
SET(OPTIMIZATION_FLAG "-O3")
if (${APPLE})
	SET(OPTIMIZATION_FLAG "-O1")
endif()
SET(CMAKE_CXX_FLAGS_RELEASE "${OPTIMIZATION_FLAG} -fPIE -march=native -g ${flagstdc11}")
###############################################################################

add_library( 
	DEVSEXMACHINACORE_DEBUG
	OBJECT
	src/tools/logger.cpp
 	src/tools/globallog.cpp
 	src/tools/coutredirect.cpp
 	src/tools/asynchwriter.cpp
 	src/model/atomicmodel.cpp
 	src/model/cellmodel.cpp
 	src/model/coupledmodel.cpp
 	src/model/rootmodel.cpp
 	src/model/model.cpp
 	src/model/state.cpp
 	src/model/port.cpp
 	src/model/core.cpp
 	src/model/dynamiccore.cpp
 	src/model/optimisticcore.cpp
 	src/model/conservativecore.cpp
 	src/model/zfunc.cpp
 	src/control/allocator.cpp
 	src/control/controller.cpp
 	src/control/controllerconfig.cpp
 	src/control/locationtable.cpp
	src/control/timeevent.cpp
 	src/network/message.cpp
 	src/network/controlmessage.cpp
 	src/network/network.cpp
 	src/tracers/policies.cpp
 	src/tracers/tracemessage.cpp
	)
add_library( 
	DEVSEXMACHINACORE_RELEASE
	OBJECT
	src/tools/logger.cpp
 	src/tools/globallog.cpp
 	src/tools/coutredirect.cpp
 	src/tools/asynchwriter.cpp
 	src/model/atomicmodel.cpp
 	src/model/cellmodel.cpp
 	src/model/coupledmodel.cpp
 	src/model/rootmodel.cpp
 	src/model/model.cpp
 	src/model/state.cpp
 	src/model/port.cpp
 	src/model/core.cpp
 	src/model/dynamiccore.cpp
 	src/model/optimisticcore.cpp
 	src/model/conservativecore.cpp
 	src/model/zfunc.cpp
 	src/control/allocator.cpp
 	src/control/controller.cpp
 	src/control/controllerconfig.cpp
 	src/control/locationtable.cpp
	src/control/timeevent.cpp
 	src/network/message.cpp
 	src/network/controlmessage.cpp
 	src/network/network.cpp
 	src/tracers/policies.cpp
 	src/tracers/tracemessage.cpp
	)

# 2 packages of the devs simulator that compile on log level 15 and 0
SET_TARGET_PROPERTIES(
	DEVSEXMACHINACORE_DEBUG PROPERTIES EXCLUDE_FROM_ALL 1
		COMPILE_FLAGS "-DLOG_LEVEL=15"
		)
SET_TARGET_PROPERTIES(
	DEVSEXMACHINACORE_RELEASE PROPERTIES EXCLUDE_FROM_ALL 1
		COMPILE_FLAGS " -DLOG_LEVEL=0 -O3"
		)


add_executable(${PROJECT_NAME}
	$<TARGET_OBJECTS:DEVSEXMACHINACORE_DEBUG>
	src/examples/abstract_conservative/modela.cpp
	src/examples/abstract_conservative/modelb.cpp
	src/examples/abstract_conservative/modelc.cpp
	src/examples/deadlock/ping.cpp
    src/examples/deadlock/pingset.cpp
	src/examples/trafficlight_classic/trafficlight.cpp
	src/examples/trafficlight_coupled/trafficlightc.cpp
	src/examples/trafficlight_coupled/policemanc.cpp
	src/examples/trafficlight_coupled/trafficsystemc.cpp
	src/examples/trafficlight_ds/trafficlightds.cpp
	src/examples/trafficlight_ds/policemands.cpp
	src/examples/trafficlight_ds/trafficsystemds.cpp
	src/examples/forestfire/constants.cpp
	src/examples/forestfire/firecell.cpp
	src/examples/forestfire/firecellstate.cpp
	src/examples/forestfire/firegenerator.cpp
	src/examples/forestfire/firespread.cpp
	#src/examples/trafficsystem/car.cpp
	#src/examples/trafficsystem/city_small.cpp
	#src/examples/trafficsystem/query.cpp
	#src/examples/trafficsystem/queryack.cpp
	#src/examples/trafficsystem/building.cpp
	#src/examples/trafficsystem/residence.cpp
	#src/examples/trafficsystem/commercial.cpp
	#src/examples/trafficsystem/roadsegment.cpp
	#src/examples/trafficsystem/road.cpp
	#src/examples/trafficsystem/intersection.cpp
	#src/examples/trafficsystem/collector.cpp
	src/performance/devstone/devstone.cpp
	src/performance/phold/phold.cpp
	src/test/basiccerealtestclasses.cpp
	src/test/toolstest.cpp
	src/test/coretest.cpp
	src/test/tracerstest.cpp
	src/test/networktest.cpp
	src/test/modeltest.cpp
	src/test/compare.cpp
	src/test/comparetest.cpp
	src/test/loggertest.cpp
	src/test/controllertest.cpp
	src/test/messagetest.cpp
	src/test/cerealtest.cpp
	src/test/basiccerealtest.cpp
	src/test/performancetest.cpp
	src/test/testmodels.cpp
 	src/main.cpp
 	)
SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES
					COMPILE_FLAGS "-DLOG_LEVEL=15"
					)


 add_executable(${PROJECT_NAME}_benchfire
	$<TARGET_OBJECTS:DEVSEXMACHINACORE_RELEASE>
 	src/examples/forestfire/constants.cpp
 	src/examples/forestfire/firecell.cpp
 	src/examples/forestfire/firecellstate.cpp
 	src/examples/forestfire/firegenerator.cpp
 	src/examples/forestfire/firespread.cpp
 	src/mainbenchfire.cpp
  	)
SET_TARGET_PROPERTIES(${PROJECT_NAME}_benchfire PROPERTIES EXCLUDE_FROM_ALL 1
					COMPILE_FLAGS " -DLOG_LEVEL=0 -O3"
 					)


add_executable(${PROJECT_NAME}_devstone
	# The following target determines if the Debug/Release package is used
	$<TARGET_OBJECTS:DEVSEXMACHINACORE_RELEASE>
 	src/performance/devstone/devstone.cpp
 	src/maindevstone.cpp
  	)
SET_TARGET_PROPERTIES(${PROJECT_NAME}_devstone PROPERTIES EXCLUDE_FROM_ALL 1
					COMPILE_FLAGS " -DLOG_LEVEL=0 -O3"
 					)


add_executable(${PROJECT_NAME}_phold
	$<TARGET_OBJECTS:DEVSEXMACHINACORE_DEBUG>
 	src/performance/phold/phold.cpp
  	src/mainphold.cpp
  	)
SET_TARGET_PROPERTIES(${PROJECT_NAME}_phold PROPERTIES EXCLUDE_FROM_ALL 1
 					COMPILE_FLAGS "-DLOG_LEVEL=15"
 					)

add_executable(${PROJECT_NAME}_virus
 	$<TARGET_OBJECTS:DEVSEXMACHINACORE_DEBUG>
 	src/examples/virus/virus.cpp
 	src/examples/virus/virustracer.cpp
  	src/mainvirus.cpp
  	)
SET_TARGET_PROPERTIES(${PROJECT_NAME}_virus PROPERTIES EXCLUDE_FROM_ALL 1
 					COMPILE_FLAGS "-DLOG_LEVEL=15 -DVIRUSTRACER=1 -w"
 					)

add_executable(${PROJECT_NAME}_traffic
	$<TARGET_OBJECTS:DEVSEXMACHINACORE_RELEASE>
	src/examples/trafficsystem/car.cpp
	src/examples/trafficsystem/city_small.cpp
	src/examples/trafficsystem/query.cpp
	src/examples/trafficsystem/queryack.cpp
	src/examples/trafficsystem/building.cpp
	src/examples/trafficsystem/residence.cpp
	src/examples/trafficsystem/commercial.cpp
	src/examples/trafficsystem/roadsegment.cpp
	src/examples/trafficsystem/road.cpp
	src/examples/trafficsystem/intersection.cpp
	src/examples/trafficsystem/collector.cpp
	src/maintraffic.cpp
	)
SET_TARGET_PROPERTIES(${PROJECT_NAME}_traffic PROPERTIES EXCLUDE_FROM_ALL 1
					COMPILE_FLAGS " -DLOG_LEVEL=0 -O3"
					)

##############################################################################
### adevs targets ############################################################
# adevs has its own makefile. Therefore, use that make system instead of writing our own.
# as a plus: try not to put the adevs library in the same folder as the adevs sources.
set(ADEVS_ROOT ${PROJECT_ROOT}/adevs)
set(ADEVS_LIBRARY ${ADEVS_ROOT}/lib/libadevs.a)
add_custom_target(build_adevs
                   COMMAND make							# build the library
                   COMMAND mkdir -p ../lib				# ceate the folder for the librar
                   COMMAND mv ./libadevs.a -t ../lib/	# move the library to that folder
                   COMMAND make clean					# clean the build files
                   WORKING_DIRECTORY ${ADEVS_ROOT}/src/	# the makefile is here
                   )
add_library(adevs STATIC IMPORTED)
add_dependencies(adevs build_adevs)
set_property(TARGET adevs APPEND PROPERTY IMPORTED_CONFIGURATIONS NOCONFIG)
set_target_properties(adevs PROPERTIES
  IMPORTED_LOCATION_NOCONFIG "${ADEVS_LIBRARY}")
# now, adevs can be linked to like any other library
add_executable(adevs_devstone
	${ADEVS_ROOT}/benchmarks/devstone.cpp
	)
SET_TARGET_PROPERTIES(adevs_devstone PROPERTIES EXCLUDE_FROM_ALL 1
					COMPILE_FLAGS "-o3 -fopenmp"
					LINK_FLAGS "-fopenmp"
					)

add_executable(adevs_phold
	${ADEVS_ROOT}/benchmarks/phold.cpp
	)
SET_TARGET_PROPERTIES(adevs_phold PROPERTIES EXCLUDE_FROM_ALL 1
					COMPILE_FLAGS "-o3 -fopenmp"
					LINK_FLAGS "-fopenmp"
					)

### INCLUDE PATHS ############################################################
# These are found by the section above.
include_directories(${Boost_INCLUDE_DIRS})             
include_directories(${GTEST_INCLUDE_DIRS})
MESSAGE( STATUS"Using Boost Include Directories @ path :${Boost_INCLUDE_DIRS}")
MESSAGE( STATUS"Using GTest Include Directories @ path :${GTEST_INCLUDE_DIRS}")

include_directories(	
				src 
				include
				${ADEVS_ROOT}/include
				)   # Project headers are in same folder as source
###############################################################################


### LINKER ####################################################################
# Register libraries needed.
set(LIBS ${LIBS} ${CMAKE_THREAD_LIBS_INIT} )
set(GTEST_LIBS ${LIBS} ${GTEST_BOTH_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT} )

## Clang dies with a segfault of all things if the following linker flags are set
## G++ does not even link if they are NOT set.
if (CMAKE_CXX_COMPILER_ID MATCHES "GNU")
    MESSAGE( STATUS"Linking with GNU, Debug build, adapting linker flags")
    SET(CMAKE_EXE_LINKER_FLAGS "-pie" )
endif()

# Execute linker
target_link_libraries( ${PROJECT_NAME} ${LIBS} ${GTEST_BOTH_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
target_link_libraries( ${PROJECT_NAME}_benchfire ${LIBS})
target_link_libraries( ${PROJECT_NAME}_devstone ${LIBS})
target_link_libraries( ${PROJECT_NAME}_phold ${LIBS})
target_link_libraries( ${PROJECT_NAME}_virus ${LIBS})
target_link_libraries( ${PROJECT_NAME}_traffic ${LIBS})
target_link_libraries( adevs_devstone ${LIBS} adevs)
target_link_libraries( adevs_phold ${LIBS} adevs)
###############################################################################




