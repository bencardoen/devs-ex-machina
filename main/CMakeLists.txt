cmake_minimum_required(VERSION 2.8)

### Generic CMakeLists.txt file ###############################################
#   Assumes you have the following project layout (with this file in ./main)  #
#               {root}      /main/src/ {all source/headers                    #
#                           /main/CMake/ {Cmake find modules}                 #
#                           /build      {project is generated here}           #
#                           Build folder is generated by script or IDE        #
#   @author Ben Cardoen                                                       #
###############################################################################

### Register Cotire ###########################################################
#This speeds up recompilation if STL or other large (template impl) headers
#are used (Boost, ...)
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/CMake")
include(cotire)
SET (COTIRE_MINIMUM_NUMBER_OF_TARGET_SOURCES 1)
###############################################################################


### PROJECT NAME ##############################################################
SET(PROJECT_NAME "dxexmachina")
project(${PROJECT_NAME})
###############################################################################

### DEPENDENCIES ##############################################################
# Use CMAKE to discover listed dependencies. If found, these set the
# respective include/library paths referenced later.

include ( localpreferences.txt )

find_package(Boost COMPONENTS  system)

#set(CMAKE_THREAD_PREFER_PTHREAD TRUE)      # Sometimes help pthread problems
find_package(Threads REQUIRED)                       # REQUIRED C++11 <thread>

find_package(GTest REQUIRED)
###############################################################################


### COMPILER ##################################################################
# NOTE:  Specify which compiler (explicit) to use in ./generate_build.sh

## Check for Windows Cygwin installation, if so we must use -std=gnu++11 instead of -std=c++11
SET(flagstdc11 -std=c++11)
if (${CYGWIN})
    SET(flagstdc11 -std=gnu++11)
endif()

### Debug build (slows by a factor of x4 for STL), but catches any [size+1]
### and iterator past the end mistakes.
## Thread debugging flags -fsanitize=thread required -fPIE, and requires the same for among others gtest.

SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -march=native -g -O0 ${flagstdc11} -Wall -Wextra -pedantic -D_GLIBCXX_DEBUG -fPIE ")
if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    MESSAGE( STATUS"Working with Clang: enabling threadsanitizer")
    SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fPIE -fsanitize=integer -fsanitize=thread" )
endif()

### Profiling -- Clang and G++ ###############################################
SET(CMAKE_CXX_FLAGS_PROFILING "-march=native -g -O0 ${flagstdc11} -pg")

### Release build - All compilers#############################################
# Only use this for production code
#
# Note : fPIC flag is needed if you built GTest with fPIE/fPIC
SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -fPIC -march=native -g ${flagstdc11} ")

###############################################################################


### Print everything CMake does to cout to verify the options are sane.
# set(CMAKE_VERBOSE_MAKEFILE ON)

### SOURCES ###################################################################
# 2 choices here:
#   1.Standard C++ code, no templates : list only .cpp files, they include headers
#   and compiler will discover them
#   2. 'Magic' headers: Template declaration in .h file, template implementation in
#       .tpp file, last line of .h files : #include .tpp (to separate impl / interf)
#       Then, and only then, include the .h file. (NOT/NEVER the .tpp file)

add_executable(${PROJECT_NAME}
    src/tools/logger.cpp
    src/test/toolstest.cpp
    src/test/networktest.cpp
    src/test/compare.cpp
    src/test/comparetest.cpp
    src/main.cpp
    )
###############################################################################

### INCLUDE PATHS ############################################################
include_directories(${Boost_INCLUDE_DIRS})             # Boost
include_directories(${GTEST_INCLUDE_DIRS})
MESSAGE( STATUS"Boost Include Directories found :${Boost_INCLUDE_DIRS}")
MESSAGE( STATUS"GTest Include Directories found :${GTEST_INCLUDE_DIRS}")
include_directories(	src 
				src/test 
				src/tools
				src/network
				)   # Project headers are in same folder as source

### LINKER ####################################################################
# Register libraries needed.
#set(LIBS ${LIBS} ${GSL_LIBRARIES} ${GSLCBLAS_LIBRARIES})
set(LIBS ${LIBS} ${GTEST_BOTH_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT} )
## Clang dies with a segfault of all things if the following linker flags are set
## G++ does not even link if they are NOT set.
if (CMAKE_CXX_COMPILER_ID MATCHES "GNU")
    MESSAGE( STATUS"Linking with GNU, Debug build, adapting linker flags")
    SET(CMAKE_EXE_LINKER_FLAGS "-pie" )
endif()

# Execute linker
target_link_libraries( ${PROJECT_NAME} ${LIBS})
###############################################################################

### Cotire ###
# Cotire detects when a rebuild of header is required.
# Comment to disable cotire alltogether. (which is only needed if this causes
# issues with your code, cotire detects if/when it can do it's job.
cotire(${PROJECT_NAME})
