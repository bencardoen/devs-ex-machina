cmake_minimum_required(VERSION 2.8)

### Generic CMakeLists.txt file ###############################################
#   Assumes you have the following project layout (with this file in ./main)  #
#               {root}      /main/src/ {all source/headers                    #
#                           /main/CMake/ {Cmake find modules}                 #
#                           /build      {project is generated here}           #
#                           Build folder is generated by script or IDE        #
#   @author Ben Cardoen                                                       #
###############################################################################

### Cotire ####################################################################
#This speeds up recompilation if STL or other large (template impl) headers
#are used (Boost, ...)
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/CMake")
include(cotire)
SET (COTIRE_MINIMUM_NUMBER_OF_TARGET_SOURCES 1)
###############################################################################


### PROJECT NAME ##############################################################
SET(PROJECT_NAME "dxmachina")
project(${PROJECT_NAME})
###############################################################################

### DEPENDENCIES ##############################################################
# Use CMAKE to discover listed dependencies. If found, these set the
# respective include/library paths referenced later.
find_package(Boost COMPONENTS  system)      # Do not set required, we need the headers only

#set(CMAKE_THREAD_PREFER_PTHREAD TRUE)      # Sometimes help pthread problems
find_package(Threads REQUIRED)                       # REQUIRED C++11 <thread>

## If gtest is not system-wide installed, uncomment the follwing line (thanks Stijn)
#SET(GTEST_ROOT "/path/to/custom/gtest/")
find_package(GTest REQUIRED)
###############################################################################


### COMPILER ##################################################################
# NOTE:  Specify which compiler (explicit) to use in ./generate_build.sh

# DEBUG

# Clang (clang++)   #
## DO NOT use -std=c++1y -> this crashes on compile erros about std::gets; !!!
# Allow the compiler to help catch errors (threads , iterators etc)
# SET(CMAKE_CXX_FLAGS "-march=native -g -O0 -std=c++11 -fsanitize=thread -fPIE -Wall -Wextra -pedantic -D_GLIBCXX_DEBUG  ")
# Default debug build
SET(CMAKE_CXX_FLAGS "-ggdb -std=c++11 -Wextra -pedantic")

# G++               #
#SET(CMAKE_CXX_FLAGS "-march=native -ggdb -fsanitize=thread -fPIE -O0 -std=c++1y -Wall -Wextra -pedantic -fstack-protector-strong -D_GLIBCXX_DEBUG")
#SET(CMAKE_CXX_FLAGS "-ggdb -std=c++11 -Wextra -pedantic")

# Mingw             #
# SET(CMAKE_CXX_FLAGS "-g -std=gnu++11 -Wextra -pedantic")

### Profiling -- Clang and G++ ###############################################
#SET(CMAKE_CXX_FLAGS "-march=native -g -O0 -std=c++11 -pg")

### Release build - All compilers#############################################
# Only use this for production code
# Fast code, if it crashes you can still debug without overhead.
#SET(CMAKE_CXX_FLAGS "-march=native -g -std=c++11 ")
#G++
#SET(CMAKE_CXX_FLAGS "-march=native -Og -std=c++11 ")

# Experimental - only if your code cannot crash ever.
#SET(CMAKE_CXX_FLAGS "-march=native -std=c++11 -O3 -std=c++11")

# Throw all standard compliance and math(IEEE754, assoc...)  out of the window for that extra us.
# SET(CMAKE_CXX_FLAGS "-march=native -Ofast -std=c++11")

### Tell compiler to use OpenMP (G++, icc)
# SET(CMAKE_CXX_FLAGS "-fopenmp")

###############################################################################


### Print everything CMake does to cout to verify the options are sane.
set(CMAKE_VERBOSE_MAKEFILE ON)

### SOURCES ###################################################################
# 2 choices here:
#   1.Standard C++ code, no templates : list only .cpp files, they include headers
#   and compiler will discover them
#   2. 'Magic' headers: Template declaration in .h file, template implementation in
#       .tpp file, last line of .h files : #include .tpp (to separate impl / interf)
#       Then, and only then, include the .h file. (NOT/NEVER the .tpp file)

add_executable(${PROJECT_NAME}
    src/main.cpp
    )
###############################################################################

### INCLUDE PATHS ############################################################
include_directories(${Boost_INCLUDE_DIRS})             # Boost
include_directories(${GTEST_INCLUDE_DIRS})
MESSAGE( STATUS"Boost Include Directories found :${Boost_INCLUDE_DIRS}")
MESSAGE( STATUS"GTest Include Directories found :${GTEST_INCLUDE_DIRS}")
include_directories(src)   # Project headers are in same folder as source
#include_directories(${GSL_INCLUDE_DIRS} ${GSLCBLAS_INCLUDE_DIRS})   # GSL

### LINKER ####################################################################
# Register libraries needed.
set(LIBS ${LIBS}  ${CMAKE_THREAD_LIBS_INIT} ${GTEST_BOTH_LIBRARIES})

# Execute linker (if necessary add link flags here)
target_link_libraries( ${PROJECT_NAME} ${LIBS})
###############################################################################

### Cotire ###
# Cotire detects when a rebuild of header is required.
# Comment to disable cotire alltogether. (which is only needed if this causes
# issues with your code, cotire detects if/when it can do it's job.
cotire(${PROJECT_NAME})
