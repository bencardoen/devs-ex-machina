cmake_minimum_required(VERSION 2.8)

### Generic CMakeLists.txt file ###############################################
#   Assumes you have the following project layout (with this file in ./main)  #
#               {root}      /main/src/ {all source/headers                    #
#                           /main/CMake/ {Cmake find modules}                 #
#                           /build      {project is generated here}           #
#                           Build folder is generated by script or IDE        #
#   @author Ben Cardoen, Tim Tuijn, Stijn Manhaeve                            #
###############################################################################


### PROJECT NAME ##############################################################
SET(PROJECT_NAME "dxexmachina")
SET(PROJECT_ROOT "${CMAKE_BINARY_DIR}/${TOTOP}")
get_filename_component(PROJECT_ROOT "${PROJECT_ROOT}" ABSOLUTE)
MESSAGE( STATUS "CMAKE_BINARY_DIR:         " ${CMAKE_BINARY_DIR} )
MESSAGE( STATUS "PROJECT_ROOT:             " ${PROJECT_ROOT} )
MESSAGE( STATUS "CMAKE_BUILD_TYPE:         " ${CMAKE_BUILD_TYPE})
project(${PROJECT_NAME})
###############################################################################


### DEPENDENCIES ##############################################################
# Use CMAKE to discover listed dependencies. If found, these set the
# respective include/library paths referenced later.
# In localpreferences.txt write any root path for any dependency listed.
# DO NOT use comments in localpreferences.txt
include ( localpreferences.txt OPTIONAL )
# Used to check if a compile flag is accepted by the compiler
# include (TestCXXAcceptsFlag)  # depricated according to the docs
include(CheckCXXCompilerFlag)   # use this instead
find_package(Boost COMPONENTS  system)
find_package(Threads REQUIRED)
find_package(GTest REQUIRED)
find_package(Doxygen)


SET(TCMALLOC_NAMES ${TCMALLOC_NAMES} tcmalloc)
FIND_LIBRARY(TCMALLOC_LIBRARY
      NAMES ${TCMALLOC_NAMES}
      PATHS /usr/lib /usr/local/lib
)
if(TCMALLOC_LIBRARY)
    MESSAGE(STATUS "TCMALLOC LIB FOUND")
endif(TCMALLOC_LIBRARY)
###############################################################################


### DOCUMENTATION #############################################################
# add a target to generate API documentation with Doxygen
if(DOXYGEN_FOUND)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile.in ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile @ONLY)
add_custom_target(doc
    ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
    COMMENT "Generating API documentation with Doxygen" VERBATIM
)
endif(DOXYGEN_FOUND)
###############################################################################


### COMPILER ##################################################################
# NOTE:  Specify which compiler (explicit) to use in ./generate_build.sh

# Check for Mac OS X, if so we must link with libc++ library instead of default library
SET(flagstdc11 "")
if (${APPLE})
    MESSAGE(STATUS "Mac OS X detected: setting -stdlib flag.")
    SET(flagstdc11 "${flagstdc11} -stdlib=libc++")
endif()

SET(OPTIMIZATION_FLAG "-O3")
if (${APPLE})
    MESSAGE(STATUS "Mac OS X detected: Changing maximum optimization flag to -O1.")
    SET(OPTIMIZATION_FLAG "-O1")
endif()

CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
if(COMPILER_SUPPORTS_CXX11)
    MESSAGE(STATUS "c++11 support detected, compiling with -std=c++11")
	if(CYGWIN)
		MESSAGE(STATUS "Found cygwin, changing to gnu++11.")
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=gnu++11")
	else ()
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
	endif()
elseif(COMPILER_SUPPORTS_CXX0X)
    MESSAGE(STATUS "c++11 support detected, compiling with -std=c++0x")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
else()
    message(FATAL_ERROR "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler.")
endif()

message("Setting options for build types.")
SET(CMAKE_CXX_FLAGS_DEBUG
    "${CMAKE_CXX_FLAGS_DEBUG} -march=native -O0 ${flagstdc11} -g -Wall -Wextra -pedantic -fPIE -DSAFETY_CHECKS -DLOG_LEVEL=15 -DUSE_VIZ "
    CACHE STRING "Flags used by the C++ compiler during debug builds."
    FORCE )
SET(CMAKE_CXX_FLAGS_RELEASE
    "${CMAKE_CXX_FLAGS_RELEASE} -march=native -O2 ${flagstdc11} -g -Wall  -fPIE -DLOG_LEVEL=0"
    CACHE STRING "Flags used by the C++ compiler during release builds."
    FORCE )
SET(CMAKE_CXX_FLAGS_BENCHMARK
    "${OPTIMIZATION_FLAG} ${flagstdc11} -march=native -Wall -fPIE -DLOG_LEVEL=0 -DBENCHMARK -DNDEBUG "
    CACHE STRING "Flags used by the C++ compiler during benchmark builds."
    FORCE )
SET(CMAKE_CONFIGURATION_TYPES "Debug;Release;Benchmark")

### Threadsanitizer ###########################################################
# If we use clang compiler and thread-sanitizer is supported we can add -fsanitize=thread
if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    CHECK_CXX_COMPILER_FLAG(-fsanitize=thread FSANITIZE_SUPPORTED)
    if (FSANITIZE_SUPPORTED)
        MESSAGE( STATUS"Working with Clang: enabling threadsanitizer")
        SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fsanitize=thread" )
    else()
        MESSAGE( STATUS"Working with Clang: threadsanitizer not supported, enabling UBSAN")
        SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fsanitize=undefined -fsanitize=address" )       
    endif()
else()
        MESSAGE( STATUS"Using G++ : using flto")
        SET(CMAKE_CXX_FLAGS_BENCHMARK "${CMAKE_CXX_FLAGS_BENCHMARK} -flto")
endif()
###############################################################################

### Print everything CMake does to cout to verify the options are sane.
# set(CMAKE_VERBOSE_MAKEFILE ON)
###############################################################################


add_library( 
    DEVSEXMACHINACORE
    OBJECT
    src/tools/logger.cpp
    src/tools/globallog.cpp
    src/tools/coutredirect.cpp
    src/tools/asynchwriter.cpp
    src/model/atomicmodel.cpp
    src/model/cellmodel.cpp
    src/model/coupledmodel.cpp
    src/model/rootmodel.cpp
    src/model/model.cpp
    src/model/state.cpp
    src/model/port.cpp
    src/model/core.cpp
    src/model/dynamiccore.cpp
    src/model/optimisticcore.cpp
    src/model/conservativecore.cpp
    src/model/zfunc.cpp
    src/control/allocator.cpp
    src/control/controller.cpp
    src/control/controllerconfig.cpp
    src/network/message.cpp
    src/network/controlmessage.cpp
    src/network/network.cpp
    src/tracers/policies.cpp
    src/tracers/tracemessage.cpp
    src/tools/gviz.cpp
    )

# 2 packages of the devs simulator that compile on log level 15 and 0
SET_TARGET_PROPERTIES(
    DEVSEXMACHINACORE PROPERTIES EXCLUDE_FROM_ALL 1
        )


add_executable(${PROJECT_NAME}
    $<TARGET_OBJECTS:DEVSEXMACHINACORE>
    src/examples/abstract_conservative/modela.cpp
    src/examples/abstract_conservative/modelb.cpp
    src/examples/abstract_conservative/modelc.cpp
	src/examples/deadlock/ping.cpp
    src/examples/deadlock/pingset.cpp
    src/examples/trafficlight_classic/trafficlight.cpp
    src/examples/trafficlight_coupled/trafficlightc.cpp
    src/examples/trafficlight_coupled/policemanc.cpp
    src/examples/trafficlight_coupled/trafficsystemc.cpp
    src/examples/trafficlight_ds/trafficlightds.cpp
    src/examples/trafficlight_ds/policemands.cpp
    src/examples/trafficlight_ds/trafficsystemds.cpp
    #src/examples/forestfire/constants.cpp
    #src/examples/forestfire/firecell.cpp
    #src/examples/forestfire/firecellstate.cpp
    #src/examples/forestfire/firegenerator.cpp
    #src/examples/forestfire/firespread.cpp
    src/performance/devstone/devstone.cpp
    src/performance/phold/phold.cpp
    src/performance/highInterconnect/hinterconnect.cpp
    src/test/toolstest.cpp
    src/test/coretest.cpp
    src/test/benchmarktest.cpp
    src/test/tracerstest.cpp
    src/test/networktest.cpp
    src/test/modeltest.cpp
    src/test/compare.cpp
    src/test/comparetest.cpp
    src/test/loggertest.cpp
    src/test/controllertest.cpp
    src/test/messagetest.cpp
    src/test/performancetest.cpp
    src/test/testmodels.cpp
    src/main.cpp
    )


#  add_executable(${PROJECT_NAME}_benchfire
#     $<TARGET_OBJECTS:DEVSEXMACHINACORE>
#     src/examples/forestfire/constants.cpp
#     src/examples/forestfire/firecell.cpp
#     src/examples/forestfire/firecellstate.cpp
#     src/examples/forestfire/firegenerator.cpp
#     src/examples/forestfire/firespread.cpp
#     src/mainbenchfire.cpp
#     )
# SET_TARGET_PROPERTIES(${PROJECT_NAME}_benchfire PROPERTIES EXCLUDE_FROM_ALL 1
#                     )


add_executable(${PROJECT_NAME}_devstone
    $<TARGET_OBJECTS:DEVSEXMACHINACORE>
    src/performance/devstone/devstone.cpp
    src/maindevstone.cpp
    )
SET_TARGET_PROPERTIES(${PROJECT_NAME}_devstone PROPERTIES EXCLUDE_FROM_ALL 1
                    )


add_executable(${PROJECT_NAME}_interconnect
    $<TARGET_OBJECTS:DEVSEXMACHINACORE>
    src/performance/highInterconnect/hinterconnect.cpp
    src/maininterconnect.cpp
    )
SET_TARGET_PROPERTIES(${PROJECT_NAME}_interconnect PROPERTIES EXCLUDE_FROM_ALL 1
                    )


add_executable(${PROJECT_NAME}_phold
    $<TARGET_OBJECTS:DEVSEXMACHINACORE>
    src/performance/phold/phold.cpp
    src/mainphold.cpp
    )
SET_TARGET_PROPERTIES(${PROJECT_NAME}_phold PROPERTIES EXCLUDE_FROM_ALL 1
                    )


add_executable(${PROJECT_NAME}_network
    $<TARGET_OBJECTS:DEVSEXMACHINACORE>
    src/performance/queuenetwork/queuenetwork.cpp
    src/mainqueueserver.cpp
    )
SET_TARGET_PROPERTIES(${PROJECT_NAME}_network PROPERTIES EXCLUDE_FROM_ALL 1
                    )

add_executable(${PROJECT_NAME}_priority
    $<TARGET_OBJECTS:DEVSEXMACHINACORE>
    src/performance/prioritymessage/prioritymessage.cpp
    src/mainprioritymessage.cpp
    )
SET_TARGET_PROPERTIES(${PROJECT_NAME}_priority PROPERTIES EXCLUDE_FROM_ALL 1
                    )

add_executable(${PROJECT_NAME}_virus
    $<TARGET_OBJECTS:DEVSEXMACHINACORE>
    src/examples/virus/virus.cpp
    src/examples/virus/virustracer.cpp
    src/mainvirus.cpp
    )
SET_TARGET_PROPERTIES(${PROJECT_NAME}_virus PROPERTIES EXCLUDE_FROM_ALL 1
                    COMPILE_FLAGS "-DVIRUSTRACER=1 -w"
                    )
#add_executable(${PROJECT_NAME}_benchpools
#    src/benchpools.cpp
#)

# add_executable(${PROJECT_NAME}_traffic
#     $<TARGET_OBJECTS:DEVSEXMACHINACORE>
#     src/examples/trafficsystem/car.cpp
#     src/examples/trafficsystem/city_small.cpp
#     src/examples/trafficsystem/query.cpp
#     src/examples/trafficsystem/queryack.cpp
#     src/examples/trafficsystem/building.cpp
#     src/examples/trafficsystem/residence.cpp
#     src/examples/trafficsystem/commercial.cpp
#     src/examples/trafficsystem/roadsegment.cpp
#     src/examples/trafficsystem/road.cpp
#     src/examples/trafficsystem/intersection.cpp
#     src/examples/trafficsystem/collector.cpp
#     src/maintraffic.cpp
#     )
# SET_TARGET_PROPERTIES(${PROJECT_NAME}_traffic PROPERTIES EXCLUDE_FROM_ALL 1
#                     )

##############################################################################
### adevs targets ############################################################
# adevs has its own makefile. Therefore, use that make system instead of writing our own.
# as a plus: try not to put the adevs library in the same folder as the adevs sources.
set(ADEVS_ROOT ${PROJECT_ROOT}/adevs)
set(ADEVS_LIBRARY ${ADEVS_ROOT}/lib/libadevs.a)
MESSAGE( STATUS "ADEVS_ROOT:             " ${ADEVS_ROOT} )
MESSAGE( STATUS "ADEVS_LIBRARY:             " ${ADEVS_LIBRARY} )
add_custom_target(build_adevs
                   COMMAND make                         # build the library
                   COMMAND mkdir -p ../lib              # ceate the folder for the librar
                   COMMAND mv ./libadevs.a -t ../lib/   # move the library to that folder
                   COMMAND make clean                   # clean the build files
                   WORKING_DIRECTORY ${ADEVS_ROOT}/src/ # the makefile is here
                   )
add_library(adevs STATIC IMPORTED)
add_dependencies(adevs build_adevs)
set_property(TARGET adevs APPEND PROPERTY IMPORTED_CONFIGURATIONS NOCONFIG)
set_target_properties(adevs PROPERTIES
  IMPORTED_LOCATION_NOCONFIG "${ADEVS_LIBRARY}")
# now, adevs can be linked to like any other library
add_executable(adevs_devstone
    ${ADEVS_ROOT}/benchmarks/devstone.cpp
    )
SET_TARGET_PROPERTIES(adevs_devstone PROPERTIES EXCLUDE_FROM_ALL 1
                    COMPILE_FLAGS "-o3 -fopenmp"
                    LINK_FLAGS "-fopenmp"
                    )

add_executable(adevs_phold
    ${ADEVS_ROOT}/benchmarks/phold.cpp
    )
SET_TARGET_PROPERTIES(adevs_phold PROPERTIES EXCLUDE_FROM_ALL 1
                    COMPILE_FLAGS "-o3 -fopenmp"
                    LINK_FLAGS "-fopenmp"
                    )

add_executable(adevs_interconnect
    ${ADEVS_ROOT}/benchmarks/highinterconnect.cpp
    )
SET_TARGET_PROPERTIES(adevs_interconnect PROPERTIES EXCLUDE_FROM_ALL 1
                    COMPILE_FLAGS "-o3 -fopenmp"
                    LINK_FLAGS "-fopenmp"
                    )

add_executable(adevs_network
    ${ADEVS_ROOT}/benchmarks/network.cpp
    )
SET_TARGET_PROPERTIES(adevs_network PROPERTIES EXCLUDE_FROM_ALL 1
                    COMPILE_FLAGS "-o3 -fopenmp"
                    LINK_FLAGS "-fopenmp"
                    )

### INCLUDE PATHS ############################################################
# These are found by the section above.
include_directories(${Boost_INCLUDE_DIRS})             
include_directories(${GTEST_INCLUDE_DIRS})
MESSAGE( STATUS"Using Boost Include Directories @ path :${Boost_INCLUDE_DIRS}")
MESSAGE( STATUS"Using GTest Include Directories @ path :${GTEST_INCLUDE_DIRS}")

include_directories(    
                src 
                include
                ${ADEVS_ROOT}/include
                )   # Project headers are in same folder as source
###############################################################################


### LINKER ####################################################################
# Register libraries needed.
set(LIBS ${LIBS} ${Boost_LIBRARIES}  ${CMAKE_THREAD_LIBS_INIT} )
if(TCMALLOC_LIBRARY)
    MESSAGE( STATUS "Have tcmalloc, linking...")
    set(LIBS ${LIBS} -ltcmalloc) 
endif()
set(GTEST_LIBS ${LIBS} ${GTEST_BOTH_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT} )

## Clang dies with a segfault of all things if the following linker flags are set
## G++ does not even link if they are NOT set.
if (CMAKE_CXX_COMPILER_ID MATCHES "GNU")
    MESSAGE( STATUS "Linking with GNU, adapting linker flags")
    SET(CMAKE_EXE_LINKER_FLAGS "-pie" )
endif()

# Execute linker
target_link_libraries( ${PROJECT_NAME} ${LIBS} ${GTEST_BOTH_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
# target_link_libraries( ${PROJECT_NAME}_benchfire ${LIBS})
target_link_libraries( ${PROJECT_NAME}_devstone ${LIBS})
target_link_libraries( ${PROJECT_NAME}_interconnect ${LIBS})
target_link_libraries( ${PROJECT_NAME}_phold ${LIBS})
target_link_libraries( ${PROJECT_NAME}_network ${LIBS})
target_link_libraries( ${PROJECT_NAME}_virus ${LIBS})
target_link_libraries( ${PROJECT_NAME}_priority ${LIBS})
#target_link_libraries( ${PROJECT_NAME}_benchpools ${Boost_LIBRARIES})
# target_link_libraries( ${PROJECT_NAME}_traffic ${LIBS})
target_link_libraries( adevs_devstone ${LIBS} adevs)
target_link_libraries( adevs_phold ${LIBS} adevs)
target_link_libraries( adevs_interconnect ${LIBS} adevs)
target_link_libraries( adevs_network ${LIBS} adevs)
###############################################################################
