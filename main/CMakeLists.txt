cmake_minimum_required(VERSION 2.8)

### Generic CMakeLists.txt file ###############################################
#   Assumes you have the following project layout (with this file in ./main)  #
#               {root}      /main/src/ {all source/headers                    #
#                           /main/CMake/ {Cmake find modules}                 #
#                           /build      {project is generated here}           #
#                           Build folder is generated by script or IDE        #
#   @author Ben Cardoen                                                       #
###############################################################################

### PROJECT NAME ##############################################################
SET(PROJECT_NAME "dxexmachina")
project(${PROJECT_NAME})
###############################################################################

### DEPENDENCIES ##############################################################
# Use CMAKE to discover listed dependencies. If found, these set the
# respective include/library paths referenced later.
# In localpreferences.txt write any root path for any dependency listed.
# DO NOT use comments in localpreferences.txt
include ( localpreferences.txt OPTIONAL )

find_package(Boost COMPONENTS  system)

find_package(Threads REQUIRED)               

find_package(GTest REQUIRED)

find_package(Doxygen)
###############################################################################

### DOCUMENTATION #############################################################
# add a target to generate API documentation with Doxygen
if(DOXYGEN_FOUND)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile.in ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile @ONLY)
add_custom_target(doc
	${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile
	WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
	COMMENT "Generating API documentation with Doxygen" VERBATIM
)
endif(DOXYGEN_FOUND)
###############################################################################

### COMPILER ##################################################################
# NOTE:  Specify which compiler (explicit) to use in ./generate_build.sh

## Check for Windows Cygwin installation, if so we must use -std=gnu++11 instead of -std=c++11
SET(flagstdc11 -std=c++11)
if (${CYGWIN})
    SET(flagstdc11 -std=gnu++11)
endif()

### Debug #####################################################################
SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -march=native -g -O0 ${flagstdc11} -D_GLIBCXX_DEBUG -Wall -Wextra -pedantic -fPIE ")
if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    MESSAGE( STATUS"Working with Clang: enabling threadsanitizer")
    SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fPIE  -fsanitize=thread" )
endif()

### Profiling -- Clang and G++ ###############################################
SET(CMAKE_CXX_FLAGS_PROFILING "-march=native -g -O0 ${flagstdc11} -pg -fPIE")

### Release build - All compilers#############################################
# Only use this for production code
#
# Note : fPIC flag is needed if you built GTest with fPIE/fPIC
SET(CMAKE_CXX_FLAGS_RELEASE "-O3 -fPIC -march=native -g ${flagstdc11} ")

###############################################################################


### Print everything CMake does to cout to verify the options are sane.
# set(CMAKE_VERBOSE_MAKEFILE ON)

### SOURCES ###################################################################

add_executable(${PROJECT_NAME}
	src/tools/logger.cpp
	src/tools/globallog.cpp
	src/tools/coutredirect.cpp
	src/tools/asynchwriter.cpp
	src/model/atomicmodel.cpp
	src/model/cellmodel.cpp
	src/model/coupledmodel.cpp
	src/model/rootmodel.cpp
	src/model/model.cpp
	src/model/state.cpp
	src/model/port.cpp
	src/model/core.cpp
	src/model/dynamiccore.cpp
	src/model/multicore.cpp
	src/model/conservativecore.cpp
	src/model/zfunc.cpp
	src/examples/abstract_conservative/modela.cpp
	src/examples/abstract_conservative/modelb.cpp
	src/examples/abstract_conservative/modelc.cpp
	src/examples/trafficlight_classic/trafficlight.cpp
	src/examples/trafficlight_coupled/trafficlightc.cpp
	src/examples/trafficlight_coupled/policemanc.cpp
	src/examples/trafficlight_coupled/trafficsystemc.cpp
	src/examples/trafficlight_ds/trafficlightds.cpp
	src/examples/trafficlight_ds/policemands.cpp
	src/examples/trafficlight_ds/trafficsystemds.cpp
	src/examples/forestfire/constants.cpp
	src/examples/forestfire/firecell.cpp
	src/examples/forestfire/firecellstate.cpp
	src/examples/forestfire/firegenerator.cpp
	src/examples/forestfire/firespread.cpp
	src/performance/devstone/devstone.cpp
	src/performance/benchmarks/phold.cpp
	src/control/allocator.cpp
	src/control/controller.cpp
	src/control/controllerconfig.cpp
	src/control/locationtable.cpp
	src/control/timeevent.cpp
	src/network/message.cpp
	src/network/controlmessage.cpp
	src/network/network.cpp
	src/tracers/policies.cpp
	src/tracers/tracemessage.cpp
	src/test/toolstest.cpp
	src/test/coretest.cpp
	src/test/tracerstest.cpp
	src/test/networktest.cpp
	src/test/modeltest.cpp
	src/test/compare.cpp
	src/test/comparetest.cpp
	src/test/loggertest.cpp
	src/test/controllertest.cpp
	src/test/messagetest.cpp
	src/test/cerealtest.cpp
	src/test/performancetest.cpp
	src/test/testmodels.cpp
 	src/main.cpp
 	)

 add_executable(${PROJECT_NAME}_benchfire
 	src/tools/logger.cpp
 	src/tools/globallog.cpp
 	src/tools/coutredirect.cpp
 	src/tools/asynchwriter.cpp
 	src/model/atomicmodel.cpp
 	src/model/cellmodel.cpp
 	src/model/coupledmodel.cpp
 	src/model/rootmodel.cpp
 	src/model/model.cpp
 	src/model/state.cpp
 	src/model/port.cpp
 	src/model/core.cpp
 	src/model/dynamiccore.cpp
 	src/model/multicore.cpp
 	src/model/conservativecore.cpp
 	src/model/zfunc.cpp
 	src/examples/forestfire/constants.cpp
 	src/examples/forestfire/firecell.cpp
 	src/examples/forestfire/firecellstate.cpp
 	src/examples/forestfire/firegenerator.cpp
 	src/examples/forestfire/firespread.cpp
 	src/control/allocator.cpp
 	src/control/controller.cpp
 	src/control/controllerconfig.cpp
 	src/control/locationtable.cpp
	src/control/timeevent.cpp
 	src/network/message.cpp
 	src/network/controlmessage.cpp
 	src/network/network.cpp
 	src/tracers/policies.cpp
 	src/tracers/tracemessage.cpp
  	src/mainbenchfire.cpp
  	)
###############################################################################

# SET_TARGET_PROPERTIES(${PROJECT_NAME}_benchfire PROPERTIES
# 					COMPILE_FLAGS "${CMAKE_CXX_FLAGS_DEBUG} -DLOG_LEVEL=15 "#-o3"# -flto"
# 					)

### INCLUDE PATHS ############################################################
# These are found by the section above.
include_directories(${Boost_INCLUDE_DIRS})             
include_directories(${GTEST_INCLUDE_DIRS})

MESSAGE( STATUS"Using Boost Include Directories @ path :${Boost_INCLUDE_DIRS}")
MESSAGE( STATUS"Using GTest Include Directories @ path :${GTEST_INCLUDE_DIRS}")

# Note : this allows #include "file.h". Hierarchy assumes $root/main/....
include_directories(	
				src 
				include
				src/serialization
				src/test 
				src/tools
				src/model
				src/tracers
				src/performance/devstone
				src/performance/benchmarks
				src/examples/abstract_conservative
				src/examples/trafficlight_classic
				src/examples/trafficlight_coupled
				src/examples/trafficlight_ds
				src/network
				src/control
				)   # Project headers are in same folder as source

### LINKER ####################################################################

# Register libraries needed.
set(LIBS ${LIBS} ${GTEST_BOTH_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT} )

## Clang dies with a segfault of all things if the following linker flags are set
## G++ does not even link if they are NOT set.
if (CMAKE_CXX_COMPILER_ID MATCHES "GNU")
    MESSAGE( STATUS"Linking with GNU, Debug build, adapting linker flags")
    SET(CMAKE_EXE_LINKER_FLAGS "-pie" )
endif()

# Execute linker
target_link_libraries( ${PROJECT_NAME} ${LIBS})
target_link_libraries( ${PROJECT_NAME}_benchfire ${LIBS})

###############################################################################


