/*
 * virustracer.h

 *  Created on: May 29, 2015
 *      Author: Stijn Manhaeve - Devs Ex Machina
 */

#ifndef SRC_EXAMPLES_VIRUS_VIRUSTRACER_H_
#define SRC_EXAMPLES_VIRUS_VIRUSTRACER_H_

#include "timestamp.h"
#include "tracemessage.h"
#include "objectfactory.h"
#include "atomicmodel.h"
#include "policies.h"
#include "virus.h"

namespace n_virus{

using namespace n_network;
using namespace n_tracers;
using namespace n_model;

/**
 * @brief Simple struct for keeping track of the simulation state
 */
struct CellData
{
	std::string m_modelName;	//model name
	int m_value;			//current value
	int m_production;		//production
	std::string m_dotName;		//dot name
	bool m_doPrint;

	CellData(std::string modelName, int value, int production, bool doPrint);
private:
	static std::size_t m_counter;
};

std::ostream& operator<<(std::ostream& out, const CellData& data);

/**
 * @brief Simple struct for the movement of viri.
 */
struct MovementData
{
	std::string m_from;
	std::string m_to;
	int m_amountLeft;
	int m_amountRight;

	MovementData(std::string from, std::string to, int amountL, int amountR);
};

std::ostream& operator<<(std::ostream& out, const MovementData& data);


/**
 * @brief Tracer that will generate highly specialized output for the virus example.
 *
 * @warning This tracer will not work with any other model than the virus models.
 * The output generated by this tracer are a bunch of .dot files.
 * You still need to use the graphviz dot package (or similar) in order to
 * convert them to images.
 */
class VirusTracer: public MultiFileWriter
{
private:
	std::map<std::string, CellData> m_cells;			//keep data of each cell
	std::map<std::string, std::map<std::string, int>> m_conn;	//connections

	//keeps track of all the stuff in the arrays

	inline void traceCall(const n_model::t_atomicmodelptr& adevs, std::size_t coreid){
		t_timestamp time = adevs->getState()->m_timeLast; // get timestamp of the transition
		traceCall(adevs, coreid, time);
	}

	void traceCall(const n_model::t_atomicmodelptr& adevs, std::size_t coreid, t_timestamp time, bool isInit = false);


	void actualTrace(t_timestamp time);

	t_timestamp m_prevTime;

public:
	/**
	 * @brief Constructs a new VirusTracer object.
	 * @note Depending on which OutputPolicy is used, this tracer must be initialized before it can be used. See the documentation of the policy itself.
	 */
	VirusTracer()
	{
	}

	/**
	 * @brief Performs the actual tracing of a transition. Once this function is called, there is no going back.
	 */
	void transitionTrace(t_timestamp time, std::vector<MovementData> movements, CellData data);

	/**
	 * @brief Traces state initialization of a model
	 * @param model The model that is initialized
	 * @param time The simulation time of initialization.
	 * @note No trace will be made if the model does not have a CellState
	 * @see n_model::CellState
	 */
	inline void tracesInit(const t_atomicmodelptr& adevs, t_timestamp time)
	{
		traceCall(adevs, 0, time, true);
	}

	/**
	 * @brief Traces internal state transition
	 * @param adevs The atomic model that just performed an internal transition
	 * @precondition The model pointer is not a nullptr
	 * @note No trace will be made if the model does not have a CellState
	 * @see n_model::CellState
	 */
	inline void tracesInternal(const t_atomicmodelptr& adevs, std::size_t coreid)
	{
		traceCall(adevs, coreid);
	}
	/**
	 * @brief Traces external state transition
	 * @param model The model that just went through an external transition
	 * @note No trace will be made if the model does not have a CellState
	 * @see n_model::CellState
	 */
	inline void tracesExternal(const t_atomicmodelptr& adevs, std::size_t coreid)
	{
		traceCall(adevs, coreid);
	}
	/**
	 * @brief Traces confluent state transition (simultaneous internal and external transition)
	 * @param model The model that just went through a confluent transition
	 * @note No trace will be made if the model does not have a CellState
	 * @see n_model::CellState
	 */
	inline void tracesConfluent(const t_atomicmodelptr& adevs, std::size_t coreid)
	{
		traceCall(adevs, coreid);
	}

	/**
	 * @brief Traces the  start of the output
	 * Certain tracers can use this to generate a header or similar
	 */
	inline void startTrace()
	{
	}

	/**
	 * @brief Finishes the trace output
	 * Certain tracers can use this to generate a footer or similar
	 */
	inline void finishTrace()
	{
	}
};


} /* namespace n_virus */


#endif /* SRC_EXAMPLES_VIRUS_VIRUSTRACER_H_ */
