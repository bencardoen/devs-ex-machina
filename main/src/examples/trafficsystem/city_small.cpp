#include "examples/trafficsystem/city_small.h"
#include <sstream>
namespace n_examples_traffic {
City::City(std::string name): CoupledModel(name)
{
    collector = std::make_shared<Collector>();
    addSubModel(collector);
    LOG_DEBUG("CITY: Added collector");

    road_2_1 = std::make_shared<Road>(1, "road_2_1");
    addSubModel(road_2_1);
    road_2_3 = std::make_shared<Road>(1, "road_2_3");
    addSubModel(road_2_3);
    road_2_5 = std::make_shared<Road>(1, "road_2_5");
    addSubModel(road_2_5);
    road_2_7 = std::make_shared<Road>(1, "road_2_7");
    addSubModel(road_2_7);
    road_2_9 = std::make_shared<Road>(1, "road_2_9");
    addSubModel(road_2_9);
    road_2_11 = std::make_shared<Road>(1, "road_2_11");
    addSubModel(road_2_11);
    road_4_1 = std::make_shared<Road>(3, "road_4_1");
    addSubModel(road_4_1);
    road_4_3 = std::make_shared<Road>(3, "road_4_3");
    addSubModel(road_4_3);
    road_4_5 = std::make_shared<Road>(3, "road_4_5");
    addSubModel(road_4_5);
    road_4_7 = std::make_shared<Road>(3, "road_4_7");
    addSubModel(road_4_7);
    road_4_9 = std::make_shared<Road>(3, "road_4_9");
    addSubModel(road_4_9);
    road_4_11 = std::make_shared<Road>(3, "road_4_11");
    addSubModel(road_4_11);
    road_6_1 = std::make_shared<Road>(5, "road_6_1");
    addSubModel(road_6_1);
    road_6_3 = std::make_shared<Road>(5, "road_6_3");
    addSubModel(road_6_3);
    road_6_5 = std::make_shared<Road>(5, "road_6_5");
    addSubModel(road_6_5);
    road_6_7 = std::make_shared<Road>(5, "road_6_7");
    addSubModel(road_6_7);
    road_6_9 = std::make_shared<Road>(5, "road_6_9");
    addSubModel(road_6_9);
    road_6_11 = std::make_shared<Road>(5, "road_6_11");
    addSubModel(road_6_11);
    road_8_1 = std::make_shared<Road>(7, "road_8_1");
    addSubModel(road_8_1);
    road_8_3 = std::make_shared<Road>(7, "road_8_3");
    addSubModel(road_8_3);
    road_8_5 = std::make_shared<Road>(7, "road_8_5");
    addSubModel(road_8_5);
    road_8_7 = std::make_shared<Road>(7, "road_8_7");
    addSubModel(road_8_7);
    road_8_9 = std::make_shared<Road>(7, "road_8_9");
    addSubModel(road_8_9);
    road_8_11 = std::make_shared<Road>(7, "road_8_11");
    addSubModel(road_8_11);
    road_10_1 = std::make_shared<Road>(9, "road_10_1");
    addSubModel(road_10_1);
    road_10_3 = std::make_shared<Road>(9, "road_10_3");
    addSubModel(road_10_3);
    road_10_5 = std::make_shared<Road>(9, "road_10_5");
    addSubModel(road_10_5);
    road_10_7 = std::make_shared<Road>(9, "road_10_7");
    addSubModel(road_10_7);
    road_10_9 = std::make_shared<Road>(9, "road_10_9");
    addSubModel(road_10_9);
    road_10_11 = std::make_shared<Road>(9, "road_10_11");
    addSubModel(road_10_11);
    road_12_1 = std::make_shared<Road>(11, "road_12_1");
    addSubModel(road_12_1);
    road_12_3 = std::make_shared<Road>(11, "road_12_3");
    addSubModel(road_12_3);
    road_12_5 = std::make_shared<Road>(11, "road_12_5");
    addSubModel(road_12_5);
    road_12_7 = std::make_shared<Road>(11, "road_12_7");
    addSubModel(road_12_7);
    road_12_9 = std::make_shared<Road>(11, "road_12_9");
    addSubModel(road_12_9);
    road_12_11 = std::make_shared<Road>(11, "road_12_11");
    addSubModel(road_12_11);
    road_14_1 = std::make_shared<Road>(13, "road_14_1");
    addSubModel(road_14_1);
    road_14_3 = std::make_shared<Road>(13, "road_14_3");
    addSubModel(road_14_3);
    road_14_5 = std::make_shared<Road>(13, "road_14_5");
    addSubModel(road_14_5);
    road_14_7 = std::make_shared<Road>(13, "road_14_7");
    addSubModel(road_14_7);
    road_14_9 = std::make_shared<Road>(13, "road_14_9");
    addSubModel(road_14_9);
    road_14_11 = std::make_shared<Road>(13, "road_14_11");
    addSubModel(road_14_11);
    road_16_1 = std::make_shared<Road>(15, "road_16_1");
    addSubModel(road_16_1);
    road_16_3 = std::make_shared<Road>(15, "road_16_3");
    addSubModel(road_16_3);
    road_16_5 = std::make_shared<Road>(15, "road_16_5");
    addSubModel(road_16_5);
    road_16_7 = std::make_shared<Road>(15, "road_16_7");
    addSubModel(road_16_7);
    road_16_9 = std::make_shared<Road>(15, "road_16_9");
    addSubModel(road_16_9);
    road_16_11 = std::make_shared<Road>(15, "road_16_11");
    addSubModel(road_16_11);
    road_18_1 = std::make_shared<Road>(17, "road_18_1");
    addSubModel(road_18_1);
    road_18_3 = std::make_shared<Road>(17, "road_18_3");
    addSubModel(road_18_3);
    road_18_5 = std::make_shared<Road>(17, "road_18_5");
    addSubModel(road_18_5);
    road_18_7 = std::make_shared<Road>(17, "road_18_7");
    addSubModel(road_18_7);
    road_18_9 = std::make_shared<Road>(17, "road_18_9");
    addSubModel(road_18_9);
    road_18_11 = std::make_shared<Road>(17, "road_18_11");
    addSubModel(road_18_11);
    road_20_1 = std::make_shared<Road>(19, "road_20_1");
    addSubModel(road_20_1);
    road_20_3 = std::make_shared<Road>(19, "road_20_3");
    addSubModel(road_20_3);
    road_20_5 = std::make_shared<Road>(19, "road_20_5");
    addSubModel(road_20_5);
    road_20_7 = std::make_shared<Road>(19, "road_20_7");
    addSubModel(road_20_7);
    road_20_9 = std::make_shared<Road>(19, "road_20_9");
    addSubModel(road_20_9);
    road_20_11 = std::make_shared<Road>(19, "road_20_11");
    addSubModel(road_20_11);
    road_22_1 = std::make_shared<Road>(21, "road_22_1");
    addSubModel(road_22_1);
    road_22_3 = std::make_shared<Road>(21, "road_22_3");
    addSubModel(road_22_3);
    road_22_5 = std::make_shared<Road>(21, "road_22_5");
    addSubModel(road_22_5);
    road_22_7 = std::make_shared<Road>(21, "road_22_7");
    addSubModel(road_22_7);
    road_22_9 = std::make_shared<Road>(21, "road_22_9");
    addSubModel(road_22_9);
    road_22_11 = std::make_shared<Road>(21, "road_22_11");
    addSubModel(road_22_11);
    road_24_1 = std::make_shared<Road>(23, "road_24_1");
    addSubModel(road_24_1);
    road_24_3 = std::make_shared<Road>(23, "road_24_3");
    addSubModel(road_24_3);
    road_24_5 = std::make_shared<Road>(23, "road_24_5");
    addSubModel(road_24_5);
    road_24_7 = std::make_shared<Road>(23, "road_24_7");
    addSubModel(road_24_7);
    road_24_9 = std::make_shared<Road>(23, "road_24_9");
    addSubModel(road_24_9);
    road_24_11 = std::make_shared<Road>(23, "road_24_11");
    addSubModel(road_24_11);
    road_26_1 = std::make_shared<Road>(25, "road_26_1");
    addSubModel(road_26_1);
    road_26_3 = std::make_shared<Road>(25, "road_26_3");
    addSubModel(road_26_3);
    road_26_5 = std::make_shared<Road>(25, "road_26_5");
    addSubModel(road_26_5);
    road_26_7 = std::make_shared<Road>(25, "road_26_7");
    addSubModel(road_26_7);
    road_26_9 = std::make_shared<Road>(25, "road_26_9");
    addSubModel(road_26_9);
    road_26_11 = std::make_shared<Road>(25, "road_26_11");
    addSubModel(road_26_11);
    road_28_1 = std::make_shared<Road>(27, "road_28_1");
    addSubModel(road_28_1);
    road_28_3 = std::make_shared<Road>(27, "road_28_3");
    addSubModel(road_28_3);
    road_28_5 = std::make_shared<Road>(27, "road_28_5");
    addSubModel(road_28_5);
    road_28_7 = std::make_shared<Road>(27, "road_28_7");
    addSubModel(road_28_7);
    road_28_9 = std::make_shared<Road>(27, "road_28_9");
    addSubModel(road_28_9);
    road_28_11 = std::make_shared<Road>(27, "road_28_11");
    addSubModel(road_28_11);
    road_30_1 = std::make_shared<Road>(29, "road_30_1");
    addSubModel(road_30_1);
    road_30_3 = std::make_shared<Road>(29, "road_30_3");
    addSubModel(road_30_3);
    road_30_5 = std::make_shared<Road>(29, "road_30_5");
    addSubModel(road_30_5);
    road_30_7 = std::make_shared<Road>(29, "road_30_7");
    addSubModel(road_30_7);
    road_30_9 = std::make_shared<Road>(29, "road_30_9");
    addSubModel(road_30_9);
    road_30_11 = std::make_shared<Road>(29, "road_30_11");
    addSubModel(road_30_11);
    road_32_1 = std::make_shared<Road>(31, "road_32_1");
    addSubModel(road_32_1);
    road_32_3 = std::make_shared<Road>(31, "road_32_3");
    addSubModel(road_32_3);
    road_32_5 = std::make_shared<Road>(31, "road_32_5");
    addSubModel(road_32_5);
    road_32_7 = std::make_shared<Road>(31, "road_32_7");
    addSubModel(road_32_7);
    road_32_9 = std::make_shared<Road>(31, "road_32_9");
    addSubModel(road_32_9);
    road_32_11 = std::make_shared<Road>(31, "road_32_11");
    addSubModel(road_32_11);
    road_34_1 = std::make_shared<Road>(33, "road_34_1");
    addSubModel(road_34_1);
    road_34_3 = std::make_shared<Road>(33, "road_34_3");
    addSubModel(road_34_3);
    road_34_5 = std::make_shared<Road>(33, "road_34_5");
    addSubModel(road_34_5);
    road_34_7 = std::make_shared<Road>(33, "road_34_7");
    addSubModel(road_34_7);
    road_34_9 = std::make_shared<Road>(33, "road_34_9");
    addSubModel(road_34_9);
    road_34_11 = std::make_shared<Road>(33, "road_34_11");
    addSubModel(road_34_11);
    road_36_1 = std::make_shared<Road>(35, "road_36_1");
    addSubModel(road_36_1);
    road_36_3 = std::make_shared<Road>(35, "road_36_3");
    addSubModel(road_36_3);
    road_36_5 = std::make_shared<Road>(35, "road_36_5");
    addSubModel(road_36_5);
    road_36_7 = std::make_shared<Road>(35, "road_36_7");
    addSubModel(road_36_7);
    road_36_9 = std::make_shared<Road>(35, "road_36_9");
    addSubModel(road_36_9);
    road_36_11 = std::make_shared<Road>(35, "road_36_11");
    addSubModel(road_36_11);
    road_38_1 = std::make_shared<Road>(37, "road_38_1");
    addSubModel(road_38_1);
    road_38_3 = std::make_shared<Road>(37, "road_38_3");
    addSubModel(road_38_3);
    road_38_5 = std::make_shared<Road>(37, "road_38_5");
    addSubModel(road_38_5);
    road_38_7 = std::make_shared<Road>(37, "road_38_7");
    addSubModel(road_38_7);
    road_38_9 = std::make_shared<Road>(37, "road_38_9");
    addSubModel(road_38_9);
    road_38_11 = std::make_shared<Road>(37, "road_38_11");
    addSubModel(road_38_11);
    road_40_1 = std::make_shared<Road>(39, "road_40_1");
    addSubModel(road_40_1);
    road_40_3 = std::make_shared<Road>(39, "road_40_3");
    addSubModel(road_40_3);
    road_40_5 = std::make_shared<Road>(39, "road_40_5");
    addSubModel(road_40_5);
    road_40_7 = std::make_shared<Road>(39, "road_40_7");
    addSubModel(road_40_7);
    road_40_9 = std::make_shared<Road>(39, "road_40_9");
    addSubModel(road_40_9);
    road_40_11 = std::make_shared<Road>(39, "road_40_11");
    addSubModel(road_40_11);
    road_42_1 = std::make_shared<Road>(41, "road_42_1");
    addSubModel(road_42_1);
    road_42_3 = std::make_shared<Road>(41, "road_42_3");
    addSubModel(road_42_3);
    road_42_5 = std::make_shared<Road>(41, "road_42_5");
    addSubModel(road_42_5);
    road_42_7 = std::make_shared<Road>(41, "road_42_7");
    addSubModel(road_42_7);
    road_42_9 = std::make_shared<Road>(41, "road_42_9");
    addSubModel(road_42_9);
    road_42_11 = std::make_shared<Road>(41, "road_42_11");
    addSubModel(road_42_11);
    road_44_1 = std::make_shared<Road>(43, "road_44_1");
    addSubModel(road_44_1);
    road_44_3 = std::make_shared<Road>(43, "road_44_3");
    addSubModel(road_44_3);
    road_44_5 = std::make_shared<Road>(43, "road_44_5");
    addSubModel(road_44_5);
    road_44_7 = std::make_shared<Road>(43, "road_44_7");
    addSubModel(road_44_7);
    road_44_9 = std::make_shared<Road>(43, "road_44_9");
    addSubModel(road_44_9);
    road_44_11 = std::make_shared<Road>(43, "road_44_11");
    addSubModel(road_44_11);
    road_46_1 = std::make_shared<Road>(45, "road_46_1");
    addSubModel(road_46_1);
    road_46_3 = std::make_shared<Road>(45, "road_46_3");
    addSubModel(road_46_3);
    road_46_5 = std::make_shared<Road>(45, "road_46_5");
    addSubModel(road_46_5);
    road_46_7 = std::make_shared<Road>(45, "road_46_7");
    addSubModel(road_46_7);
    road_46_9 = std::make_shared<Road>(45, "road_46_9");
    addSubModel(road_46_9);
    road_46_11 = std::make_shared<Road>(45, "road_46_11");
    addSubModel(road_46_11);
    road_48_1 = std::make_shared<Road>(47, "road_48_1");
    addSubModel(road_48_1);
    road_48_3 = std::make_shared<Road>(47, "road_48_3");
    addSubModel(road_48_3);
    road_48_5 = std::make_shared<Road>(47, "road_48_5");
    addSubModel(road_48_5);
    road_48_7 = std::make_shared<Road>(47, "road_48_7");
    addSubModel(road_48_7);
    road_48_9 = std::make_shared<Road>(47, "road_48_9");
    addSubModel(road_48_9);
    road_48_11 = std::make_shared<Road>(47, "road_48_11");
    addSubModel(road_48_11);
    road_50_1 = std::make_shared<Road>(49, "road_50_1");
    addSubModel(road_50_1);
    road_50_3 = std::make_shared<Road>(49, "road_50_3");
    addSubModel(road_50_3);
    road_50_5 = std::make_shared<Road>(49, "road_50_5");
    addSubModel(road_50_5);
    road_50_7 = std::make_shared<Road>(49, "road_50_7");
    addSubModel(road_50_7);
    road_50_9 = std::make_shared<Road>(49, "road_50_9");
    addSubModel(road_50_9);
    road_50_11 = std::make_shared<Road>(49, "road_50_11");
    addSubModel(road_50_11);
    road_1_2 = std::make_shared<Road>(0, "road_1_2");
    addSubModel(road_1_2);
    road_3_2 = std::make_shared<Road>(2, "road_3_2");
    addSubModel(road_3_2);
    road_5_2 = std::make_shared<Road>(4, "road_5_2");
    addSubModel(road_5_2);
    road_7_2 = std::make_shared<Road>(6, "road_7_2");
    addSubModel(road_7_2);
    road_9_2 = std::make_shared<Road>(8, "road_9_2");
    addSubModel(road_9_2);
    road_11_2 = std::make_shared<Road>(10, "road_11_2");
    addSubModel(road_11_2);
    road_13_2 = std::make_shared<Road>(12, "road_13_2");
    addSubModel(road_13_2);
    road_15_2 = std::make_shared<Road>(14, "road_15_2");
    addSubModel(road_15_2);
    road_17_2 = std::make_shared<Road>(16, "road_17_2");
    addSubModel(road_17_2);
    road_19_2 = std::make_shared<Road>(18, "road_19_2");
    addSubModel(road_19_2);
    road_21_2 = std::make_shared<Road>(20, "road_21_2");
    addSubModel(road_21_2);
    road_23_2 = std::make_shared<Road>(22, "road_23_2");
    addSubModel(road_23_2);
    road_25_2 = std::make_shared<Road>(24, "road_25_2");
    addSubModel(road_25_2);
    road_27_2 = std::make_shared<Road>(26, "road_27_2");
    addSubModel(road_27_2);
    road_29_2 = std::make_shared<Road>(28, "road_29_2");
    addSubModel(road_29_2);
    road_31_2 = std::make_shared<Road>(30, "road_31_2");
    addSubModel(road_31_2);
    road_33_2 = std::make_shared<Road>(32, "road_33_2");
    addSubModel(road_33_2);
    road_35_2 = std::make_shared<Road>(34, "road_35_2");
    addSubModel(road_35_2);
    road_37_2 = std::make_shared<Road>(36, "road_37_2");
    addSubModel(road_37_2);
    road_39_2 = std::make_shared<Road>(38, "road_39_2");
    addSubModel(road_39_2);
    road_41_2 = std::make_shared<Road>(40, "road_41_2");
    addSubModel(road_41_2);
    road_43_2 = std::make_shared<Road>(42, "road_43_2");
    addSubModel(road_43_2);
    road_45_2 = std::make_shared<Road>(44, "road_45_2");
    addSubModel(road_45_2);
    road_47_2 = std::make_shared<Road>(46, "road_47_2");
    addSubModel(road_47_2);
    road_49_2 = std::make_shared<Road>(48, "road_49_2");
    addSubModel(road_49_2);
    road_51_2 = std::make_shared<Road>(49, "road_51_2");
    addSubModel(road_51_2);
    road_1_4 = std::make_shared<Road>(0, "road_1_4");
    addSubModel(road_1_4);
    road_3_4 = std::make_shared<Road>(2, "road_3_4");
    addSubModel(road_3_4);
    road_5_4 = std::make_shared<Road>(4, "road_5_4");
    addSubModel(road_5_4);
    road_7_4 = std::make_shared<Road>(6, "road_7_4");
    addSubModel(road_7_4);
    road_9_4 = std::make_shared<Road>(8, "road_9_4");
    addSubModel(road_9_4);
    road_11_4 = std::make_shared<Road>(10, "road_11_4");
    addSubModel(road_11_4);
    road_13_4 = std::make_shared<Road>(12, "road_13_4");
    addSubModel(road_13_4);
    road_15_4 = std::make_shared<Road>(14, "road_15_4");
    addSubModel(road_15_4);
    road_17_4 = std::make_shared<Road>(16, "road_17_4");
    addSubModel(road_17_4);
    road_19_4 = std::make_shared<Road>(18, "road_19_4");
    addSubModel(road_19_4);
    road_21_4 = std::make_shared<Road>(20, "road_21_4");
    addSubModel(road_21_4);
    road_23_4 = std::make_shared<Road>(22, "road_23_4");
    addSubModel(road_23_4);
    road_25_4 = std::make_shared<Road>(24, "road_25_4");
    addSubModel(road_25_4);
    road_27_4 = std::make_shared<Road>(26, "road_27_4");
    addSubModel(road_27_4);
    road_29_4 = std::make_shared<Road>(28, "road_29_4");
    addSubModel(road_29_4);
    road_31_4 = std::make_shared<Road>(30, "road_31_4");
    addSubModel(road_31_4);
    road_33_4 = std::make_shared<Road>(32, "road_33_4");
    addSubModel(road_33_4);
    road_35_4 = std::make_shared<Road>(34, "road_35_4");
    addSubModel(road_35_4);
    road_37_4 = std::make_shared<Road>(36, "road_37_4");
    addSubModel(road_37_4);
    road_39_4 = std::make_shared<Road>(38, "road_39_4");
    addSubModel(road_39_4);
    road_41_4 = std::make_shared<Road>(40, "road_41_4");
    addSubModel(road_41_4);
    road_43_4 = std::make_shared<Road>(42, "road_43_4");
    addSubModel(road_43_4);
    road_45_4 = std::make_shared<Road>(44, "road_45_4");
    addSubModel(road_45_4);
    road_47_4 = std::make_shared<Road>(46, "road_47_4");
    addSubModel(road_47_4);
    road_49_4 = std::make_shared<Road>(48, "road_49_4");
    addSubModel(road_49_4);
    road_51_4 = std::make_shared<Road>(49, "road_51_4");
    addSubModel(road_51_4);
    road_1_6 = std::make_shared<Road>(0, "road_1_6");
    addSubModel(road_1_6);
    road_3_6 = std::make_shared<Road>(2, "road_3_6");
    addSubModel(road_3_6);
    road_5_6 = std::make_shared<Road>(4, "road_5_6");
    addSubModel(road_5_6);
    road_7_6 = std::make_shared<Road>(6, "road_7_6");
    addSubModel(road_7_6);
    road_9_6 = std::make_shared<Road>(8, "road_9_6");
    addSubModel(road_9_6);
    road_11_6 = std::make_shared<Road>(10, "road_11_6");
    addSubModel(road_11_6);
    road_13_6 = std::make_shared<Road>(12, "road_13_6");
    addSubModel(road_13_6);
    road_15_6 = std::make_shared<Road>(14, "road_15_6");
    addSubModel(road_15_6);
    road_17_6 = std::make_shared<Road>(16, "road_17_6");
    addSubModel(road_17_6);
    road_19_6 = std::make_shared<Road>(18, "road_19_6");
    addSubModel(road_19_6);
    road_21_6 = std::make_shared<Road>(20, "road_21_6");
    addSubModel(road_21_6);
    road_23_6 = std::make_shared<Road>(22, "road_23_6");
    addSubModel(road_23_6);
    road_25_6 = std::make_shared<Road>(24, "road_25_6");
    addSubModel(road_25_6);
    road_27_6 = std::make_shared<Road>(26, "road_27_6");
    addSubModel(road_27_6);
    road_29_6 = std::make_shared<Road>(28, "road_29_6");
    addSubModel(road_29_6);
    road_31_6 = std::make_shared<Road>(30, "road_31_6");
    addSubModel(road_31_6);
    road_33_6 = std::make_shared<Road>(32, "road_33_6");
    addSubModel(road_33_6);
    road_35_6 = std::make_shared<Road>(34, "road_35_6");
    addSubModel(road_35_6);
    road_37_6 = std::make_shared<Road>(36, "road_37_6");
    addSubModel(road_37_6);
    road_39_6 = std::make_shared<Road>(38, "road_39_6");
    addSubModel(road_39_6);
    road_41_6 = std::make_shared<Road>(40, "road_41_6");
    addSubModel(road_41_6);
    road_43_6 = std::make_shared<Road>(42, "road_43_6");
    addSubModel(road_43_6);
    road_45_6 = std::make_shared<Road>(44, "road_45_6");
    addSubModel(road_45_6);
    road_47_6 = std::make_shared<Road>(46, "road_47_6");
    addSubModel(road_47_6);
    road_49_6 = std::make_shared<Road>(48, "road_49_6");
    addSubModel(road_49_6);
    road_51_6 = std::make_shared<Road>(49, "road_51_6");
    addSubModel(road_51_6);
    road_1_8 = std::make_shared<Road>(0, "road_1_8");
    addSubModel(road_1_8);
    road_3_8 = std::make_shared<Road>(2, "road_3_8");
    addSubModel(road_3_8);
    road_5_8 = std::make_shared<Road>(4, "road_5_8");
    addSubModel(road_5_8);
    road_7_8 = std::make_shared<Road>(6, "road_7_8");
    addSubModel(road_7_8);
    road_9_8 = std::make_shared<Road>(8, "road_9_8");
    addSubModel(road_9_8);
    road_11_8 = std::make_shared<Road>(10, "road_11_8");
    addSubModel(road_11_8);
    road_13_8 = std::make_shared<Road>(12, "road_13_8");
    addSubModel(road_13_8);
    road_15_8 = std::make_shared<Road>(14, "road_15_8");
    addSubModel(road_15_8);
    road_17_8 = std::make_shared<Road>(16, "road_17_8");
    addSubModel(road_17_8);
    road_19_8 = std::make_shared<Road>(18, "road_19_8");
    addSubModel(road_19_8);
    road_21_8 = std::make_shared<Road>(20, "road_21_8");
    addSubModel(road_21_8);
    road_23_8 = std::make_shared<Road>(22, "road_23_8");
    addSubModel(road_23_8);
    road_25_8 = std::make_shared<Road>(24, "road_25_8");
    addSubModel(road_25_8);
    road_27_8 = std::make_shared<Road>(26, "road_27_8");
    addSubModel(road_27_8);
    road_29_8 = std::make_shared<Road>(28, "road_29_8");
    addSubModel(road_29_8);
    road_31_8 = std::make_shared<Road>(30, "road_31_8");
    addSubModel(road_31_8);
    road_33_8 = std::make_shared<Road>(32, "road_33_8");
    addSubModel(road_33_8);
    road_35_8 = std::make_shared<Road>(34, "road_35_8");
    addSubModel(road_35_8);
    road_37_8 = std::make_shared<Road>(36, "road_37_8");
    addSubModel(road_37_8);
    road_39_8 = std::make_shared<Road>(38, "road_39_8");
    addSubModel(road_39_8);
    road_41_8 = std::make_shared<Road>(40, "road_41_8");
    addSubModel(road_41_8);
    road_43_8 = std::make_shared<Road>(42, "road_43_8");
    addSubModel(road_43_8);
    road_45_8 = std::make_shared<Road>(44, "road_45_8");
    addSubModel(road_45_8);
    road_47_8 = std::make_shared<Road>(46, "road_47_8");
    addSubModel(road_47_8);
    road_49_8 = std::make_shared<Road>(48, "road_49_8");
    addSubModel(road_49_8);
    road_51_8 = std::make_shared<Road>(49, "road_51_8");
    addSubModel(road_51_8);
    road_1_10 = std::make_shared<Road>(0, "road_1_10");
    addSubModel(road_1_10);
    road_3_10 = std::make_shared<Road>(2, "road_3_10");
    addSubModel(road_3_10);
    road_5_10 = std::make_shared<Road>(4, "road_5_10");
    addSubModel(road_5_10);
    road_7_10 = std::make_shared<Road>(6, "road_7_10");
    addSubModel(road_7_10);
    road_9_10 = std::make_shared<Road>(8, "road_9_10");
    addSubModel(road_9_10);
    road_11_10 = std::make_shared<Road>(10, "road_11_10");
    addSubModel(road_11_10);
    road_13_10 = std::make_shared<Road>(12, "road_13_10");
    addSubModel(road_13_10);
    road_15_10 = std::make_shared<Road>(14, "road_15_10");
    addSubModel(road_15_10);
    road_17_10 = std::make_shared<Road>(16, "road_17_10");
    addSubModel(road_17_10);
    road_19_10 = std::make_shared<Road>(18, "road_19_10");
    addSubModel(road_19_10);
    road_21_10 = std::make_shared<Road>(20, "road_21_10");
    addSubModel(road_21_10);
    road_23_10 = std::make_shared<Road>(22, "road_23_10");
    addSubModel(road_23_10);
    road_25_10 = std::make_shared<Road>(24, "road_25_10");
    addSubModel(road_25_10);
    road_27_10 = std::make_shared<Road>(26, "road_27_10");
    addSubModel(road_27_10);
    road_29_10 = std::make_shared<Road>(28, "road_29_10");
    addSubModel(road_29_10);
    road_31_10 = std::make_shared<Road>(30, "road_31_10");
    addSubModel(road_31_10);
    road_33_10 = std::make_shared<Road>(32, "road_33_10");
    addSubModel(road_33_10);
    road_35_10 = std::make_shared<Road>(34, "road_35_10");
    addSubModel(road_35_10);
    road_37_10 = std::make_shared<Road>(36, "road_37_10");
    addSubModel(road_37_10);
    road_39_10 = std::make_shared<Road>(38, "road_39_10");
    addSubModel(road_39_10);
    road_41_10 = std::make_shared<Road>(40, "road_41_10");
    addSubModel(road_41_10);
    road_43_10 = std::make_shared<Road>(42, "road_43_10");
    addSubModel(road_43_10);
    road_45_10 = std::make_shared<Road>(44, "road_45_10");
    addSubModel(road_45_10);
    road_47_10 = std::make_shared<Road>(46, "road_47_10");
    addSubModel(road_47_10);
    road_49_10 = std::make_shared<Road>(48, "road_49_10");
    addSubModel(road_49_10);
    road_51_10 = std::make_shared<Road>(49, "road_51_10");
    addSubModel(road_51_10);

    LOG_DEBUG("CITY: Added all roads");

    intersection_2_2 = std::make_shared<Intersection>(1, "intersection_2_2");
    addSubModel(intersection_2_2);
    connectPorts(intersection_2_2->q_send[1], road_2_3->q_recv);
    connectPorts(road_2_3->q_sans, intersection_2_2->q_rans[1]);
    connectPorts(intersection_2_2->car_out[1], road_2_3->car_in);
    connectPorts(intersection_2_2->q_send[0], road_1_2->q_recv);
    connectPorts(road_1_2->q_sans, intersection_2_2->q_rans[0]);
    connectPorts(intersection_2_2->car_out[0], road_1_2->car_in);
    connectPorts(road_2_1->q_send, intersection_2_2->q_recv[3]);
    connectPorts(intersection_2_2->q_sans[3], road_2_1->q_rans);
    connectPorts(road_2_1->car_out, intersection_2_2->car_in[3]);
    connectPorts(road_3_2->q_send, intersection_2_2->q_recv[2]);
    connectPorts(intersection_2_2->q_sans[2], road_3_2->q_rans);
    connectPorts(road_3_2->car_out, intersection_2_2->car_in[2]);
    intersection_2_4 = std::make_shared<Intersection>(1, "intersection_2_4");
    addSubModel(intersection_2_4);
    connectPorts(intersection_2_4->q_send[1], road_2_5->q_recv);
    connectPorts(road_2_5->q_sans, intersection_2_4->q_rans[1]);
    connectPorts(intersection_2_4->car_out[1], road_2_5->car_in);
    connectPorts(intersection_2_4->q_send[2], road_3_4->q_recv);
    connectPorts(road_3_4->q_sans, intersection_2_4->q_rans[2]);
    connectPorts(intersection_2_4->car_out[2], road_3_4->car_in);
    connectPorts(road_2_3->q_send, intersection_2_4->q_recv[3]);
    connectPorts(intersection_2_4->q_sans[3], road_2_3->q_rans);
    connectPorts(road_2_3->car_out, intersection_2_4->car_in[3]);
    connectPorts(road_1_4->q_send, intersection_2_4->q_recv[0]);
    connectPorts(intersection_2_4->q_sans[0], road_1_4->q_rans);
    connectPorts(road_1_4->car_out, intersection_2_4->car_in[0]);
    intersection_2_6 = std::make_shared<Intersection>(1, "intersection_2_6");
    addSubModel(intersection_2_6);
    connectPorts(intersection_2_6->q_send[1], road_2_7->q_recv);
    connectPorts(road_2_7->q_sans, intersection_2_6->q_rans[1]);
    connectPorts(intersection_2_6->car_out[1], road_2_7->car_in);
    connectPorts(intersection_2_6->q_send[0], road_1_6->q_recv);
    connectPorts(road_1_6->q_sans, intersection_2_6->q_rans[0]);
    connectPorts(intersection_2_6->car_out[0], road_1_6->car_in);
    connectPorts(road_2_5->q_send, intersection_2_6->q_recv[3]);
    connectPorts(intersection_2_6->q_sans[3], road_2_5->q_rans);
    connectPorts(road_2_5->car_out, intersection_2_6->car_in[3]);
    connectPorts(road_3_6->q_send, intersection_2_6->q_recv[2]);
    connectPorts(intersection_2_6->q_sans[2], road_3_6->q_rans);
    connectPorts(road_3_6->car_out, intersection_2_6->car_in[2]);
    intersection_2_8 = std::make_shared<Intersection>(1, "intersection_2_8");
    addSubModel(intersection_2_8);
    connectPorts(intersection_2_8->q_send[1], road_2_9->q_recv);
    connectPorts(road_2_9->q_sans, intersection_2_8->q_rans[1]);
    connectPorts(intersection_2_8->car_out[1], road_2_9->car_in);
    connectPorts(intersection_2_8->q_send[2], road_3_8->q_recv);
    connectPorts(road_3_8->q_sans, intersection_2_8->q_rans[2]);
    connectPorts(intersection_2_8->car_out[2], road_3_8->car_in);
    connectPorts(road_2_7->q_send, intersection_2_8->q_recv[3]);
    connectPorts(intersection_2_8->q_sans[3], road_2_7->q_rans);
    connectPorts(road_2_7->car_out, intersection_2_8->car_in[3]);
    connectPorts(road_1_8->q_send, intersection_2_8->q_recv[0]);
    connectPorts(intersection_2_8->q_sans[0], road_1_8->q_rans);
    connectPorts(road_1_8->car_out, intersection_2_8->car_in[0]);
    intersection_2_10 = std::make_shared<Intersection>(1, "intersection_2_10");
    addSubModel(intersection_2_10);
    connectPorts(intersection_2_10->q_send[1], road_2_11->q_recv);
    connectPorts(road_2_11->q_sans, intersection_2_10->q_rans[1]);
    connectPorts(intersection_2_10->car_out[1], road_2_11->car_in);
    connectPorts(intersection_2_10->q_send[0], road_1_10->q_recv);
    connectPorts(road_1_10->q_sans, intersection_2_10->q_rans[0]);
    connectPorts(intersection_2_10->car_out[0], road_1_10->car_in);
    connectPorts(road_2_9->q_send, intersection_2_10->q_recv[3]);
    connectPorts(intersection_2_10->q_sans[3], road_2_9->q_rans);
    connectPorts(road_2_9->car_out, intersection_2_10->car_in[3]);
    connectPorts(road_3_10->q_send, intersection_2_10->q_recv[2]);
    connectPorts(intersection_2_10->q_sans[2], road_3_10->q_rans);
    connectPorts(road_3_10->car_out, intersection_2_10->car_in[2]);
    intersection_4_2 = std::make_shared<Intersection>(3, "intersection_4_2");
    addSubModel(intersection_4_2);
    connectPorts(intersection_4_2->q_send[3], road_4_1->q_recv);
    connectPorts(road_4_1->q_sans, intersection_4_2->q_rans[3]);
    connectPorts(intersection_4_2->car_out[3], road_4_1->car_in);
    connectPorts(intersection_4_2->q_send[0], road_3_2->q_recv);
    connectPorts(road_3_2->q_sans, intersection_4_2->q_rans[0]);
    connectPorts(intersection_4_2->car_out[0], road_3_2->car_in);
    connectPorts(road_4_3->q_send, intersection_4_2->q_recv[1]);
    connectPorts(intersection_4_2->q_sans[1], road_4_3->q_rans);
    connectPorts(road_4_3->car_out, intersection_4_2->car_in[1]);
    connectPorts(road_5_2->q_send, intersection_4_2->q_recv[2]);
    connectPorts(intersection_4_2->q_sans[2], road_5_2->q_rans);
    connectPorts(road_5_2->car_out, intersection_4_2->car_in[2]);
    intersection_4_4 = std::make_shared<Intersection>(3, "intersection_4_4");
    addSubModel(intersection_4_4);
    connectPorts(intersection_4_4->q_send[3], road_4_3->q_recv);
    connectPorts(road_4_3->q_sans, intersection_4_4->q_rans[3]);
    connectPorts(intersection_4_4->car_out[3], road_4_3->car_in);
    connectPorts(intersection_4_4->q_send[2], road_5_4->q_recv);
    connectPorts(road_5_4->q_sans, intersection_4_4->q_rans[2]);
    connectPorts(intersection_4_4->car_out[2], road_5_4->car_in);
    connectPorts(road_4_5->q_send, intersection_4_4->q_recv[1]);
    connectPorts(intersection_4_4->q_sans[1], road_4_5->q_rans);
    connectPorts(road_4_5->car_out, intersection_4_4->car_in[1]);
    connectPorts(road_3_4->q_send, intersection_4_4->q_recv[0]);
    connectPorts(intersection_4_4->q_sans[0], road_3_4->q_rans);
    connectPorts(road_3_4->car_out, intersection_4_4->car_in[0]);
    intersection_4_6 = std::make_shared<Intersection>(3, "intersection_4_6");
    addSubModel(intersection_4_6);
    connectPorts(intersection_4_6->q_send[3], road_4_5->q_recv);
    connectPorts(road_4_5->q_sans, intersection_4_6->q_rans[3]);
    connectPorts(intersection_4_6->car_out[3], road_4_5->car_in);
    connectPorts(intersection_4_6->q_send[0], road_3_6->q_recv);
    connectPorts(road_3_6->q_sans, intersection_4_6->q_rans[0]);
    connectPorts(intersection_4_6->car_out[0], road_3_6->car_in);
    connectPorts(road_4_7->q_send, intersection_4_6->q_recv[1]);
    connectPorts(intersection_4_6->q_sans[1], road_4_7->q_rans);
    connectPorts(road_4_7->car_out, intersection_4_6->car_in[1]);
    connectPorts(road_5_6->q_send, intersection_4_6->q_recv[2]);
    connectPorts(intersection_4_6->q_sans[2], road_5_6->q_rans);
    connectPorts(road_5_6->car_out, intersection_4_6->car_in[2]);
    intersection_4_8 = std::make_shared<Intersection>(3, "intersection_4_8");
    addSubModel(intersection_4_8);
    connectPorts(intersection_4_8->q_send[3], road_4_7->q_recv);
    connectPorts(road_4_7->q_sans, intersection_4_8->q_rans[3]);
    connectPorts(intersection_4_8->car_out[3], road_4_7->car_in);
    connectPorts(intersection_4_8->q_send[2], road_5_8->q_recv);
    connectPorts(road_5_8->q_sans, intersection_4_8->q_rans[2]);
    connectPorts(intersection_4_8->car_out[2], road_5_8->car_in);
    connectPorts(road_4_9->q_send, intersection_4_8->q_recv[1]);
    connectPorts(intersection_4_8->q_sans[1], road_4_9->q_rans);
    connectPorts(road_4_9->car_out, intersection_4_8->car_in[1]);
    connectPorts(road_3_8->q_send, intersection_4_8->q_recv[0]);
    connectPorts(intersection_4_8->q_sans[0], road_3_8->q_rans);
    connectPorts(road_3_8->car_out, intersection_4_8->car_in[0]);
    intersection_4_10 = std::make_shared<Intersection>(3, "intersection_4_10");
    addSubModel(intersection_4_10);
    connectPorts(intersection_4_10->q_send[3], road_4_9->q_recv);
    connectPorts(road_4_9->q_sans, intersection_4_10->q_rans[3]);
    connectPorts(intersection_4_10->car_out[3], road_4_9->car_in);
    connectPorts(intersection_4_10->q_send[0], road_3_10->q_recv);
    connectPorts(road_3_10->q_sans, intersection_4_10->q_rans[0]);
    connectPorts(intersection_4_10->car_out[0], road_3_10->car_in);
    connectPorts(road_4_11->q_send, intersection_4_10->q_recv[1]);
    connectPorts(intersection_4_10->q_sans[1], road_4_11->q_rans);
    connectPorts(road_4_11->car_out, intersection_4_10->car_in[1]);
    connectPorts(road_5_10->q_send, intersection_4_10->q_recv[2]);
    connectPorts(intersection_4_10->q_sans[2], road_5_10->q_rans);
    connectPorts(road_5_10->car_out, intersection_4_10->car_in[2]);
    intersection_6_2 = std::make_shared<Intersection>(5, "intersection_6_2");
    addSubModel(intersection_6_2);
    connectPorts(intersection_6_2->q_send[1], road_6_3->q_recv);
    connectPorts(road_6_3->q_sans, intersection_6_2->q_rans[1]);
    connectPorts(intersection_6_2->car_out[1], road_6_3->car_in);
    connectPorts(intersection_6_2->q_send[0], road_5_2->q_recv);
    connectPorts(road_5_2->q_sans, intersection_6_2->q_rans[0]);
    connectPorts(intersection_6_2->car_out[0], road_5_2->car_in);
    connectPorts(road_6_1->q_send, intersection_6_2->q_recv[3]);
    connectPorts(intersection_6_2->q_sans[3], road_6_1->q_rans);
    connectPorts(road_6_1->car_out, intersection_6_2->car_in[3]);
    connectPorts(road_7_2->q_send, intersection_6_2->q_recv[2]);
    connectPorts(intersection_6_2->q_sans[2], road_7_2->q_rans);
    connectPorts(road_7_2->car_out, intersection_6_2->car_in[2]);
    intersection_6_4 = std::make_shared<Intersection>(5, "intersection_6_4");
    addSubModel(intersection_6_4);
    connectPorts(intersection_6_4->q_send[1], road_6_5->q_recv);
    connectPorts(road_6_5->q_sans, intersection_6_4->q_rans[1]);
    connectPorts(intersection_6_4->car_out[1], road_6_5->car_in);
    connectPorts(intersection_6_4->q_send[2], road_7_4->q_recv);
    connectPorts(road_7_4->q_sans, intersection_6_4->q_rans[2]);
    connectPorts(intersection_6_4->car_out[2], road_7_4->car_in);
    connectPorts(road_6_3->q_send, intersection_6_4->q_recv[3]);
    connectPorts(intersection_6_4->q_sans[3], road_6_3->q_rans);
    connectPorts(road_6_3->car_out, intersection_6_4->car_in[3]);
    connectPorts(road_5_4->q_send, intersection_6_4->q_recv[0]);
    connectPorts(intersection_6_4->q_sans[0], road_5_4->q_rans);
    connectPorts(road_5_4->car_out, intersection_6_4->car_in[0]);
    intersection_6_6 = std::make_shared<Intersection>(5, "intersection_6_6");
    addSubModel(intersection_6_6);
    connectPorts(intersection_6_6->q_send[1], road_6_7->q_recv);
    connectPorts(road_6_7->q_sans, intersection_6_6->q_rans[1]);
    connectPorts(intersection_6_6->car_out[1], road_6_7->car_in);
    connectPorts(intersection_6_6->q_send[0], road_5_6->q_recv);
    connectPorts(road_5_6->q_sans, intersection_6_6->q_rans[0]);
    connectPorts(intersection_6_6->car_out[0], road_5_6->car_in);
    connectPorts(road_6_5->q_send, intersection_6_6->q_recv[3]);
    connectPorts(intersection_6_6->q_sans[3], road_6_5->q_rans);
    connectPorts(road_6_5->car_out, intersection_6_6->car_in[3]);
    connectPorts(road_7_6->q_send, intersection_6_6->q_recv[2]);
    connectPorts(intersection_6_6->q_sans[2], road_7_6->q_rans);
    connectPorts(road_7_6->car_out, intersection_6_6->car_in[2]);
    intersection_6_8 = std::make_shared<Intersection>(5, "intersection_6_8");
    addSubModel(intersection_6_8);
    connectPorts(intersection_6_8->q_send[1], road_6_9->q_recv);
    connectPorts(road_6_9->q_sans, intersection_6_8->q_rans[1]);
    connectPorts(intersection_6_8->car_out[1], road_6_9->car_in);
    connectPorts(intersection_6_8->q_send[2], road_7_8->q_recv);
    connectPorts(road_7_8->q_sans, intersection_6_8->q_rans[2]);
    connectPorts(intersection_6_8->car_out[2], road_7_8->car_in);
    connectPorts(road_6_7->q_send, intersection_6_8->q_recv[3]);
    connectPorts(intersection_6_8->q_sans[3], road_6_7->q_rans);
    connectPorts(road_6_7->car_out, intersection_6_8->car_in[3]);
    connectPorts(road_5_8->q_send, intersection_6_8->q_recv[0]);
    connectPorts(intersection_6_8->q_sans[0], road_5_8->q_rans);
    connectPorts(road_5_8->car_out, intersection_6_8->car_in[0]);
    intersection_6_10 = std::make_shared<Intersection>(5, "intersection_6_10");
    addSubModel(intersection_6_10);
    connectPorts(intersection_6_10->q_send[1], road_6_11->q_recv);
    connectPorts(road_6_11->q_sans, intersection_6_10->q_rans[1]);
    connectPorts(intersection_6_10->car_out[1], road_6_11->car_in);
    connectPorts(intersection_6_10->q_send[0], road_5_10->q_recv);
    connectPorts(road_5_10->q_sans, intersection_6_10->q_rans[0]);
    connectPorts(intersection_6_10->car_out[0], road_5_10->car_in);
    connectPorts(road_6_9->q_send, intersection_6_10->q_recv[3]);
    connectPorts(intersection_6_10->q_sans[3], road_6_9->q_rans);
    connectPorts(road_6_9->car_out, intersection_6_10->car_in[3]);
    connectPorts(road_7_10->q_send, intersection_6_10->q_recv[2]);
    connectPorts(intersection_6_10->q_sans[2], road_7_10->q_rans);
    connectPorts(road_7_10->car_out, intersection_6_10->car_in[2]);
    intersection_8_2 = std::make_shared<Intersection>(7, "intersection_8_2");
    addSubModel(intersection_8_2);
    connectPorts(intersection_8_2->q_send[3], road_8_1->q_recv);
    connectPorts(road_8_1->q_sans, intersection_8_2->q_rans[3]);
    connectPorts(intersection_8_2->car_out[3], road_8_1->car_in);
    connectPorts(intersection_8_2->q_send[0], road_7_2->q_recv);
    connectPorts(road_7_2->q_sans, intersection_8_2->q_rans[0]);
    connectPorts(intersection_8_2->car_out[0], road_7_2->car_in);
    connectPorts(road_8_3->q_send, intersection_8_2->q_recv[1]);
    connectPorts(intersection_8_2->q_sans[1], road_8_3->q_rans);
    connectPorts(road_8_3->car_out, intersection_8_2->car_in[1]);
    connectPorts(road_9_2->q_send, intersection_8_2->q_recv[2]);
    connectPorts(intersection_8_2->q_sans[2], road_9_2->q_rans);
    connectPorts(road_9_2->car_out, intersection_8_2->car_in[2]);
    intersection_8_4 = std::make_shared<Intersection>(7, "intersection_8_4");
    addSubModel(intersection_8_4);
    connectPorts(intersection_8_4->q_send[3], road_8_3->q_recv);
    connectPorts(road_8_3->q_sans, intersection_8_4->q_rans[3]);
    connectPorts(intersection_8_4->car_out[3], road_8_3->car_in);
    connectPorts(intersection_8_4->q_send[2], road_9_4->q_recv);
    connectPorts(road_9_4->q_sans, intersection_8_4->q_rans[2]);
    connectPorts(intersection_8_4->car_out[2], road_9_4->car_in);
    connectPorts(road_8_5->q_send, intersection_8_4->q_recv[1]);
    connectPorts(intersection_8_4->q_sans[1], road_8_5->q_rans);
    connectPorts(road_8_5->car_out, intersection_8_4->car_in[1]);
    connectPorts(road_7_4->q_send, intersection_8_4->q_recv[0]);
    connectPorts(intersection_8_4->q_sans[0], road_7_4->q_rans);
    connectPorts(road_7_4->car_out, intersection_8_4->car_in[0]);
    intersection_8_6 = std::make_shared<Intersection>(7, "intersection_8_6");
    addSubModel(intersection_8_6);
    connectPorts(intersection_8_6->q_send[3], road_8_5->q_recv);
    connectPorts(road_8_5->q_sans, intersection_8_6->q_rans[3]);
    connectPorts(intersection_8_6->car_out[3], road_8_5->car_in);
    connectPorts(intersection_8_6->q_send[0], road_7_6->q_recv);
    connectPorts(road_7_6->q_sans, intersection_8_6->q_rans[0]);
    connectPorts(intersection_8_6->car_out[0], road_7_6->car_in);
    connectPorts(road_8_7->q_send, intersection_8_6->q_recv[1]);
    connectPorts(intersection_8_6->q_sans[1], road_8_7->q_rans);
    connectPorts(road_8_7->car_out, intersection_8_6->car_in[1]);
    connectPorts(road_9_6->q_send, intersection_8_6->q_recv[2]);
    connectPorts(intersection_8_6->q_sans[2], road_9_6->q_rans);
    connectPorts(road_9_6->car_out, intersection_8_6->car_in[2]);
    intersection_8_8 = std::make_shared<Intersection>(7, "intersection_8_8");
    addSubModel(intersection_8_8);
    connectPorts(intersection_8_8->q_send[3], road_8_7->q_recv);
    connectPorts(road_8_7->q_sans, intersection_8_8->q_rans[3]);
    connectPorts(intersection_8_8->car_out[3], road_8_7->car_in);
    connectPorts(intersection_8_8->q_send[2], road_9_8->q_recv);
    connectPorts(road_9_8->q_sans, intersection_8_8->q_rans[2]);
    connectPorts(intersection_8_8->car_out[2], road_9_8->car_in);
    connectPorts(road_8_9->q_send, intersection_8_8->q_recv[1]);
    connectPorts(intersection_8_8->q_sans[1], road_8_9->q_rans);
    connectPorts(road_8_9->car_out, intersection_8_8->car_in[1]);
    connectPorts(road_7_8->q_send, intersection_8_8->q_recv[0]);
    connectPorts(intersection_8_8->q_sans[0], road_7_8->q_rans);
    connectPorts(road_7_8->car_out, intersection_8_8->car_in[0]);
    intersection_8_10 = std::make_shared<Intersection>(7, "intersection_8_10");
    addSubModel(intersection_8_10);
    connectPorts(intersection_8_10->q_send[3], road_8_9->q_recv);
    connectPorts(road_8_9->q_sans, intersection_8_10->q_rans[3]);
    connectPorts(intersection_8_10->car_out[3], road_8_9->car_in);
    connectPorts(intersection_8_10->q_send[0], road_7_10->q_recv);
    connectPorts(road_7_10->q_sans, intersection_8_10->q_rans[0]);
    connectPorts(intersection_8_10->car_out[0], road_7_10->car_in);
    connectPorts(road_8_11->q_send, intersection_8_10->q_recv[1]);
    connectPorts(intersection_8_10->q_sans[1], road_8_11->q_rans);
    connectPorts(road_8_11->car_out, intersection_8_10->car_in[1]);
    connectPorts(road_9_10->q_send, intersection_8_10->q_recv[2]);
    connectPorts(intersection_8_10->q_sans[2], road_9_10->q_rans);
    connectPorts(road_9_10->car_out, intersection_8_10->car_in[2]);
    intersection_10_2 = std::make_shared<Intersection>(9, "intersection_10_2");
    addSubModel(intersection_10_2);
    connectPorts(intersection_10_2->q_send[1], road_10_3->q_recv);
    connectPorts(road_10_3->q_sans, intersection_10_2->q_rans[1]);
    connectPorts(intersection_10_2->car_out[1], road_10_3->car_in);
    connectPorts(intersection_10_2->q_send[0], road_9_2->q_recv);
    connectPorts(road_9_2->q_sans, intersection_10_2->q_rans[0]);
    connectPorts(intersection_10_2->car_out[0], road_9_2->car_in);
    connectPorts(road_10_1->q_send, intersection_10_2->q_recv[3]);
    connectPorts(intersection_10_2->q_sans[3], road_10_1->q_rans);
    connectPorts(road_10_1->car_out, intersection_10_2->car_in[3]);
    connectPorts(road_11_2->q_send, intersection_10_2->q_recv[2]);
    connectPorts(intersection_10_2->q_sans[2], road_11_2->q_rans);
    connectPorts(road_11_2->car_out, intersection_10_2->car_in[2]);
    intersection_10_4 = std::make_shared<Intersection>(9, "intersection_10_4");
    addSubModel(intersection_10_4);
    connectPorts(intersection_10_4->q_send[1], road_10_5->q_recv);
    connectPorts(road_10_5->q_sans, intersection_10_4->q_rans[1]);
    connectPorts(intersection_10_4->car_out[1], road_10_5->car_in);
    connectPorts(intersection_10_4->q_send[2], road_11_4->q_recv);
    connectPorts(road_11_4->q_sans, intersection_10_4->q_rans[2]);
    connectPorts(intersection_10_4->car_out[2], road_11_4->car_in);
    connectPorts(road_10_3->q_send, intersection_10_4->q_recv[3]);
    connectPorts(intersection_10_4->q_sans[3], road_10_3->q_rans);
    connectPorts(road_10_3->car_out, intersection_10_4->car_in[3]);
    connectPorts(road_9_4->q_send, intersection_10_4->q_recv[0]);
    connectPorts(intersection_10_4->q_sans[0], road_9_4->q_rans);
    connectPorts(road_9_4->car_out, intersection_10_4->car_in[0]);
    intersection_10_6 = std::make_shared<Intersection>(9, "intersection_10_6");
    addSubModel(intersection_10_6);
    connectPorts(intersection_10_6->q_send[1], road_10_7->q_recv);
    connectPorts(road_10_7->q_sans, intersection_10_6->q_rans[1]);
    connectPorts(intersection_10_6->car_out[1], road_10_7->car_in);
    connectPorts(intersection_10_6->q_send[0], road_9_6->q_recv);
    connectPorts(road_9_6->q_sans, intersection_10_6->q_rans[0]);
    connectPorts(intersection_10_6->car_out[0], road_9_6->car_in);
    connectPorts(road_10_5->q_send, intersection_10_6->q_recv[3]);
    connectPorts(intersection_10_6->q_sans[3], road_10_5->q_rans);
    connectPorts(road_10_5->car_out, intersection_10_6->car_in[3]);
    connectPorts(road_11_6->q_send, intersection_10_6->q_recv[2]);
    connectPorts(intersection_10_6->q_sans[2], road_11_6->q_rans);
    connectPorts(road_11_6->car_out, intersection_10_6->car_in[2]);
    intersection_10_8 = std::make_shared<Intersection>(9, "intersection_10_8");
    addSubModel(intersection_10_8);
    connectPorts(intersection_10_8->q_send[1], road_10_9->q_recv);
    connectPorts(road_10_9->q_sans, intersection_10_8->q_rans[1]);
    connectPorts(intersection_10_8->car_out[1], road_10_9->car_in);
    connectPorts(intersection_10_8->q_send[2], road_11_8->q_recv);
    connectPorts(road_11_8->q_sans, intersection_10_8->q_rans[2]);
    connectPorts(intersection_10_8->car_out[2], road_11_8->car_in);
    connectPorts(road_10_7->q_send, intersection_10_8->q_recv[3]);
    connectPorts(intersection_10_8->q_sans[3], road_10_7->q_rans);
    connectPorts(road_10_7->car_out, intersection_10_8->car_in[3]);
    connectPorts(road_9_8->q_send, intersection_10_8->q_recv[0]);
    connectPorts(intersection_10_8->q_sans[0], road_9_8->q_rans);
    connectPorts(road_9_8->car_out, intersection_10_8->car_in[0]);
    intersection_10_10 = std::make_shared<Intersection>(9, "intersection_10_10");
    addSubModel(intersection_10_10);
    connectPorts(intersection_10_10->q_send[1], road_10_11->q_recv);
    connectPorts(road_10_11->q_sans, intersection_10_10->q_rans[1]);
    connectPorts(intersection_10_10->car_out[1], road_10_11->car_in);
    connectPorts(intersection_10_10->q_send[0], road_9_10->q_recv);
    connectPorts(road_9_10->q_sans, intersection_10_10->q_rans[0]);
    connectPorts(intersection_10_10->car_out[0], road_9_10->car_in);
    connectPorts(road_10_9->q_send, intersection_10_10->q_recv[3]);
    connectPorts(intersection_10_10->q_sans[3], road_10_9->q_rans);
    connectPorts(road_10_9->car_out, intersection_10_10->car_in[3]);
    connectPorts(road_11_10->q_send, intersection_10_10->q_recv[2]);
    connectPorts(intersection_10_10->q_sans[2], road_11_10->q_rans);
    connectPorts(road_11_10->car_out, intersection_10_10->car_in[2]);
    intersection_12_2 = std::make_shared<Intersection>(11, "intersection_12_2");
    addSubModel(intersection_12_2);
    connectPorts(intersection_12_2->q_send[3], road_12_1->q_recv);
    connectPorts(road_12_1->q_sans, intersection_12_2->q_rans[3]);
    connectPorts(intersection_12_2->car_out[3], road_12_1->car_in);
    connectPorts(intersection_12_2->q_send[0], road_11_2->q_recv);
    connectPorts(road_11_2->q_sans, intersection_12_2->q_rans[0]);
    connectPorts(intersection_12_2->car_out[0], road_11_2->car_in);
    connectPorts(road_12_3->q_send, intersection_12_2->q_recv[1]);
    connectPorts(intersection_12_2->q_sans[1], road_12_3->q_rans);
    connectPorts(road_12_3->car_out, intersection_12_2->car_in[1]);
    connectPorts(road_13_2->q_send, intersection_12_2->q_recv[2]);
    connectPorts(intersection_12_2->q_sans[2], road_13_2->q_rans);
    connectPorts(road_13_2->car_out, intersection_12_2->car_in[2]);
    intersection_12_4 = std::make_shared<Intersection>(11, "intersection_12_4");
    addSubModel(intersection_12_4);
    connectPorts(intersection_12_4->q_send[3], road_12_3->q_recv);
    connectPorts(road_12_3->q_sans, intersection_12_4->q_rans[3]);
    connectPorts(intersection_12_4->car_out[3], road_12_3->car_in);
    connectPorts(intersection_12_4->q_send[2], road_13_4->q_recv);
    connectPorts(road_13_4->q_sans, intersection_12_4->q_rans[2]);
    connectPorts(intersection_12_4->car_out[2], road_13_4->car_in);
    connectPorts(road_12_5->q_send, intersection_12_4->q_recv[1]);
    connectPorts(intersection_12_4->q_sans[1], road_12_5->q_rans);
    connectPorts(road_12_5->car_out, intersection_12_4->car_in[1]);
    connectPorts(road_11_4->q_send, intersection_12_4->q_recv[0]);
    connectPorts(intersection_12_4->q_sans[0], road_11_4->q_rans);
    connectPorts(road_11_4->car_out, intersection_12_4->car_in[0]);
    intersection_12_6 = std::make_shared<Intersection>(11, "intersection_12_6");
    addSubModel(intersection_12_6);
    connectPorts(intersection_12_6->q_send[3], road_12_5->q_recv);
    connectPorts(road_12_5->q_sans, intersection_12_6->q_rans[3]);
    connectPorts(intersection_12_6->car_out[3], road_12_5->car_in);
    connectPorts(intersection_12_6->q_send[0], road_11_6->q_recv);
    connectPorts(road_11_6->q_sans, intersection_12_6->q_rans[0]);
    connectPorts(intersection_12_6->car_out[0], road_11_6->car_in);
    connectPorts(road_12_7->q_send, intersection_12_6->q_recv[1]);
    connectPorts(intersection_12_6->q_sans[1], road_12_7->q_rans);
    connectPorts(road_12_7->car_out, intersection_12_6->car_in[1]);
    connectPorts(road_13_6->q_send, intersection_12_6->q_recv[2]);
    connectPorts(intersection_12_6->q_sans[2], road_13_6->q_rans);
    connectPorts(road_13_6->car_out, intersection_12_6->car_in[2]);
    intersection_12_8 = std::make_shared<Intersection>(11, "intersection_12_8");
    addSubModel(intersection_12_8);
    connectPorts(intersection_12_8->q_send[3], road_12_7->q_recv);
    connectPorts(road_12_7->q_sans, intersection_12_8->q_rans[3]);
    connectPorts(intersection_12_8->car_out[3], road_12_7->car_in);
    connectPorts(intersection_12_8->q_send[2], road_13_8->q_recv);
    connectPorts(road_13_8->q_sans, intersection_12_8->q_rans[2]);
    connectPorts(intersection_12_8->car_out[2], road_13_8->car_in);
    connectPorts(road_12_9->q_send, intersection_12_8->q_recv[1]);
    connectPorts(intersection_12_8->q_sans[1], road_12_9->q_rans);
    connectPorts(road_12_9->car_out, intersection_12_8->car_in[1]);
    connectPorts(road_11_8->q_send, intersection_12_8->q_recv[0]);
    connectPorts(intersection_12_8->q_sans[0], road_11_8->q_rans);
    connectPorts(road_11_8->car_out, intersection_12_8->car_in[0]);
    intersection_12_10 = std::make_shared<Intersection>(11, "intersection_12_10");
    addSubModel(intersection_12_10);
    connectPorts(intersection_12_10->q_send[3], road_12_9->q_recv);
    connectPorts(road_12_9->q_sans, intersection_12_10->q_rans[3]);
    connectPorts(intersection_12_10->car_out[3], road_12_9->car_in);
    connectPorts(intersection_12_10->q_send[0], road_11_10->q_recv);
    connectPorts(road_11_10->q_sans, intersection_12_10->q_rans[0]);
    connectPorts(intersection_12_10->car_out[0], road_11_10->car_in);
    connectPorts(road_12_11->q_send, intersection_12_10->q_recv[1]);
    connectPorts(intersection_12_10->q_sans[1], road_12_11->q_rans);
    connectPorts(road_12_11->car_out, intersection_12_10->car_in[1]);
    connectPorts(road_13_10->q_send, intersection_12_10->q_recv[2]);
    connectPorts(intersection_12_10->q_sans[2], road_13_10->q_rans);
    connectPorts(road_13_10->car_out, intersection_12_10->car_in[2]);
    intersection_14_2 = std::make_shared<Intersection>(13, "intersection_14_2");
    addSubModel(intersection_14_2);
    connectPorts(intersection_14_2->q_send[1], road_14_3->q_recv);
    connectPorts(road_14_3->q_sans, intersection_14_2->q_rans[1]);
    connectPorts(intersection_14_2->car_out[1], road_14_3->car_in);
    connectPorts(intersection_14_2->q_send[0], road_13_2->q_recv);
    connectPorts(road_13_2->q_sans, intersection_14_2->q_rans[0]);
    connectPorts(intersection_14_2->car_out[0], road_13_2->car_in);
    connectPorts(road_14_1->q_send, intersection_14_2->q_recv[3]);
    connectPorts(intersection_14_2->q_sans[3], road_14_1->q_rans);
    connectPorts(road_14_1->car_out, intersection_14_2->car_in[3]);
    connectPorts(road_15_2->q_send, intersection_14_2->q_recv[2]);
    connectPorts(intersection_14_2->q_sans[2], road_15_2->q_rans);
    connectPorts(road_15_2->car_out, intersection_14_2->car_in[2]);
    intersection_14_4 = std::make_shared<Intersection>(13, "intersection_14_4");
    addSubModel(intersection_14_4);
    connectPorts(intersection_14_4->q_send[1], road_14_5->q_recv);
    connectPorts(road_14_5->q_sans, intersection_14_4->q_rans[1]);
    connectPorts(intersection_14_4->car_out[1], road_14_5->car_in);
    connectPorts(intersection_14_4->q_send[2], road_15_4->q_recv);
    connectPorts(road_15_4->q_sans, intersection_14_4->q_rans[2]);
    connectPorts(intersection_14_4->car_out[2], road_15_4->car_in);
    connectPorts(road_14_3->q_send, intersection_14_4->q_recv[3]);
    connectPorts(intersection_14_4->q_sans[3], road_14_3->q_rans);
    connectPorts(road_14_3->car_out, intersection_14_4->car_in[3]);
    connectPorts(road_13_4->q_send, intersection_14_4->q_recv[0]);
    connectPorts(intersection_14_4->q_sans[0], road_13_4->q_rans);
    connectPorts(road_13_4->car_out, intersection_14_4->car_in[0]);
    intersection_14_6 = std::make_shared<Intersection>(13, "intersection_14_6");
    addSubModel(intersection_14_6);
    connectPorts(intersection_14_6->q_send[1], road_14_7->q_recv);
    connectPorts(road_14_7->q_sans, intersection_14_6->q_rans[1]);
    connectPorts(intersection_14_6->car_out[1], road_14_7->car_in);
    connectPorts(intersection_14_6->q_send[0], road_13_6->q_recv);
    connectPorts(road_13_6->q_sans, intersection_14_6->q_rans[0]);
    connectPorts(intersection_14_6->car_out[0], road_13_6->car_in);
    connectPorts(road_14_5->q_send, intersection_14_6->q_recv[3]);
    connectPorts(intersection_14_6->q_sans[3], road_14_5->q_rans);
    connectPorts(road_14_5->car_out, intersection_14_6->car_in[3]);
    connectPorts(road_15_6->q_send, intersection_14_6->q_recv[2]);
    connectPorts(intersection_14_6->q_sans[2], road_15_6->q_rans);
    connectPorts(road_15_6->car_out, intersection_14_6->car_in[2]);
    intersection_14_8 = std::make_shared<Intersection>(13, "intersection_14_8");
    addSubModel(intersection_14_8);
    connectPorts(intersection_14_8->q_send[1], road_14_9->q_recv);
    connectPorts(road_14_9->q_sans, intersection_14_8->q_rans[1]);
    connectPorts(intersection_14_8->car_out[1], road_14_9->car_in);
    connectPorts(intersection_14_8->q_send[2], road_15_8->q_recv);
    connectPorts(road_15_8->q_sans, intersection_14_8->q_rans[2]);
    connectPorts(intersection_14_8->car_out[2], road_15_8->car_in);
    connectPorts(road_14_7->q_send, intersection_14_8->q_recv[3]);
    connectPorts(intersection_14_8->q_sans[3], road_14_7->q_rans);
    connectPorts(road_14_7->car_out, intersection_14_8->car_in[3]);
    connectPorts(road_13_8->q_send, intersection_14_8->q_recv[0]);
    connectPorts(intersection_14_8->q_sans[0], road_13_8->q_rans);
    connectPorts(road_13_8->car_out, intersection_14_8->car_in[0]);
    intersection_14_10 = std::make_shared<Intersection>(13, "intersection_14_10");
    addSubModel(intersection_14_10);
    connectPorts(intersection_14_10->q_send[1], road_14_11->q_recv);
    connectPorts(road_14_11->q_sans, intersection_14_10->q_rans[1]);
    connectPorts(intersection_14_10->car_out[1], road_14_11->car_in);
    connectPorts(intersection_14_10->q_send[0], road_13_10->q_recv);
    connectPorts(road_13_10->q_sans, intersection_14_10->q_rans[0]);
    connectPorts(intersection_14_10->car_out[0], road_13_10->car_in);
    connectPorts(road_14_9->q_send, intersection_14_10->q_recv[3]);
    connectPorts(intersection_14_10->q_sans[3], road_14_9->q_rans);
    connectPorts(road_14_9->car_out, intersection_14_10->car_in[3]);
    connectPorts(road_15_10->q_send, intersection_14_10->q_recv[2]);
    connectPorts(intersection_14_10->q_sans[2], road_15_10->q_rans);
    connectPorts(road_15_10->car_out, intersection_14_10->car_in[2]);
    intersection_16_2 = std::make_shared<Intersection>(15, "intersection_16_2");
    addSubModel(intersection_16_2);
    connectPorts(intersection_16_2->q_send[3], road_16_1->q_recv);
    connectPorts(road_16_1->q_sans, intersection_16_2->q_rans[3]);
    connectPorts(intersection_16_2->car_out[3], road_16_1->car_in);
    connectPorts(intersection_16_2->q_send[0], road_15_2->q_recv);
    connectPorts(road_15_2->q_sans, intersection_16_2->q_rans[0]);
    connectPorts(intersection_16_2->car_out[0], road_15_2->car_in);
    connectPorts(road_16_3->q_send, intersection_16_2->q_recv[1]);
    connectPorts(intersection_16_2->q_sans[1], road_16_3->q_rans);
    connectPorts(road_16_3->car_out, intersection_16_2->car_in[1]);
    connectPorts(road_17_2->q_send, intersection_16_2->q_recv[2]);
    connectPorts(intersection_16_2->q_sans[2], road_17_2->q_rans);
    connectPorts(road_17_2->car_out, intersection_16_2->car_in[2]);
    intersection_16_4 = std::make_shared<Intersection>(15, "intersection_16_4");
    addSubModel(intersection_16_4);
    connectPorts(intersection_16_4->q_send[3], road_16_3->q_recv);
    connectPorts(road_16_3->q_sans, intersection_16_4->q_rans[3]);
    connectPorts(intersection_16_4->car_out[3], road_16_3->car_in);
    connectPorts(intersection_16_4->q_send[2], road_17_4->q_recv);
    connectPorts(road_17_4->q_sans, intersection_16_4->q_rans[2]);
    connectPorts(intersection_16_4->car_out[2], road_17_4->car_in);
    connectPorts(road_16_5->q_send, intersection_16_4->q_recv[1]);
    connectPorts(intersection_16_4->q_sans[1], road_16_5->q_rans);
    connectPorts(road_16_5->car_out, intersection_16_4->car_in[1]);
    connectPorts(road_15_4->q_send, intersection_16_4->q_recv[0]);
    connectPorts(intersection_16_4->q_sans[0], road_15_4->q_rans);
    connectPorts(road_15_4->car_out, intersection_16_4->car_in[0]);
    intersection_16_6 = std::make_shared<Intersection>(15, "intersection_16_6");
    addSubModel(intersection_16_6);
    connectPorts(intersection_16_6->q_send[3], road_16_5->q_recv);
    connectPorts(road_16_5->q_sans, intersection_16_6->q_rans[3]);
    connectPorts(intersection_16_6->car_out[3], road_16_5->car_in);
    connectPorts(intersection_16_6->q_send[0], road_15_6->q_recv);
    connectPorts(road_15_6->q_sans, intersection_16_6->q_rans[0]);
    connectPorts(intersection_16_6->car_out[0], road_15_6->car_in);
    connectPorts(road_16_7->q_send, intersection_16_6->q_recv[1]);
    connectPorts(intersection_16_6->q_sans[1], road_16_7->q_rans);
    connectPorts(road_16_7->car_out, intersection_16_6->car_in[1]);
    connectPorts(road_17_6->q_send, intersection_16_6->q_recv[2]);
    connectPorts(intersection_16_6->q_sans[2], road_17_6->q_rans);
    connectPorts(road_17_6->car_out, intersection_16_6->car_in[2]);
    intersection_16_8 = std::make_shared<Intersection>(15, "intersection_16_8");
    addSubModel(intersection_16_8);
    connectPorts(intersection_16_8->q_send[3], road_16_7->q_recv);
    connectPorts(road_16_7->q_sans, intersection_16_8->q_rans[3]);
    connectPorts(intersection_16_8->car_out[3], road_16_7->car_in);
    connectPorts(intersection_16_8->q_send[2], road_17_8->q_recv);
    connectPorts(road_17_8->q_sans, intersection_16_8->q_rans[2]);
    connectPorts(intersection_16_8->car_out[2], road_17_8->car_in);
    connectPorts(road_16_9->q_send, intersection_16_8->q_recv[1]);
    connectPorts(intersection_16_8->q_sans[1], road_16_9->q_rans);
    connectPorts(road_16_9->car_out, intersection_16_8->car_in[1]);
    connectPorts(road_15_8->q_send, intersection_16_8->q_recv[0]);
    connectPorts(intersection_16_8->q_sans[0], road_15_8->q_rans);
    connectPorts(road_15_8->car_out, intersection_16_8->car_in[0]);
    intersection_16_10 = std::make_shared<Intersection>(15, "intersection_16_10");
    addSubModel(intersection_16_10);
    connectPorts(intersection_16_10->q_send[3], road_16_9->q_recv);
    connectPorts(road_16_9->q_sans, intersection_16_10->q_rans[3]);
    connectPorts(intersection_16_10->car_out[3], road_16_9->car_in);
    connectPorts(intersection_16_10->q_send[0], road_15_10->q_recv);
    connectPorts(road_15_10->q_sans, intersection_16_10->q_rans[0]);
    connectPorts(intersection_16_10->car_out[0], road_15_10->car_in);
    connectPorts(road_16_11->q_send, intersection_16_10->q_recv[1]);
    connectPorts(intersection_16_10->q_sans[1], road_16_11->q_rans);
    connectPorts(road_16_11->car_out, intersection_16_10->car_in[1]);
    connectPorts(road_17_10->q_send, intersection_16_10->q_recv[2]);
    connectPorts(intersection_16_10->q_sans[2], road_17_10->q_rans);
    connectPorts(road_17_10->car_out, intersection_16_10->car_in[2]);
    intersection_18_2 = std::make_shared<Intersection>(17, "intersection_18_2");
    addSubModel(intersection_18_2);
    connectPorts(intersection_18_2->q_send[1], road_18_3->q_recv);
    connectPorts(road_18_3->q_sans, intersection_18_2->q_rans[1]);
    connectPorts(intersection_18_2->car_out[1], road_18_3->car_in);
    connectPorts(intersection_18_2->q_send[0], road_17_2->q_recv);
    connectPorts(road_17_2->q_sans, intersection_18_2->q_rans[0]);
    connectPorts(intersection_18_2->car_out[0], road_17_2->car_in);
    connectPorts(road_18_1->q_send, intersection_18_2->q_recv[3]);
    connectPorts(intersection_18_2->q_sans[3], road_18_1->q_rans);
    connectPorts(road_18_1->car_out, intersection_18_2->car_in[3]);
    connectPorts(road_19_2->q_send, intersection_18_2->q_recv[2]);
    connectPorts(intersection_18_2->q_sans[2], road_19_2->q_rans);
    connectPorts(road_19_2->car_out, intersection_18_2->car_in[2]);
    intersection_18_4 = std::make_shared<Intersection>(17, "intersection_18_4");
    addSubModel(intersection_18_4);
    connectPorts(intersection_18_4->q_send[1], road_18_5->q_recv);
    connectPorts(road_18_5->q_sans, intersection_18_4->q_rans[1]);
    connectPorts(intersection_18_4->car_out[1], road_18_5->car_in);
    connectPorts(intersection_18_4->q_send[2], road_19_4->q_recv);
    connectPorts(road_19_4->q_sans, intersection_18_4->q_rans[2]);
    connectPorts(intersection_18_4->car_out[2], road_19_4->car_in);
    connectPorts(road_18_3->q_send, intersection_18_4->q_recv[3]);
    connectPorts(intersection_18_4->q_sans[3], road_18_3->q_rans);
    connectPorts(road_18_3->car_out, intersection_18_4->car_in[3]);
    connectPorts(road_17_4->q_send, intersection_18_4->q_recv[0]);
    connectPorts(intersection_18_4->q_sans[0], road_17_4->q_rans);
    connectPorts(road_17_4->car_out, intersection_18_4->car_in[0]);
    intersection_18_6 = std::make_shared<Intersection>(17, "intersection_18_6");
    addSubModel(intersection_18_6);
    connectPorts(intersection_18_6->q_send[1], road_18_7->q_recv);
    connectPorts(road_18_7->q_sans, intersection_18_6->q_rans[1]);
    connectPorts(intersection_18_6->car_out[1], road_18_7->car_in);
    connectPorts(intersection_18_6->q_send[0], road_17_6->q_recv);
    connectPorts(road_17_6->q_sans, intersection_18_6->q_rans[0]);
    connectPorts(intersection_18_6->car_out[0], road_17_6->car_in);
    connectPorts(road_18_5->q_send, intersection_18_6->q_recv[3]);
    connectPorts(intersection_18_6->q_sans[3], road_18_5->q_rans);
    connectPorts(road_18_5->car_out, intersection_18_6->car_in[3]);
    connectPorts(road_19_6->q_send, intersection_18_6->q_recv[2]);
    connectPorts(intersection_18_6->q_sans[2], road_19_6->q_rans);
    connectPorts(road_19_6->car_out, intersection_18_6->car_in[2]);
    intersection_18_8 = std::make_shared<Intersection>(17, "intersection_18_8");
    addSubModel(intersection_18_8);
    connectPorts(intersection_18_8->q_send[1], road_18_9->q_recv);
    connectPorts(road_18_9->q_sans, intersection_18_8->q_rans[1]);
    connectPorts(intersection_18_8->car_out[1], road_18_9->car_in);
    connectPorts(intersection_18_8->q_send[2], road_19_8->q_recv);
    connectPorts(road_19_8->q_sans, intersection_18_8->q_rans[2]);
    connectPorts(intersection_18_8->car_out[2], road_19_8->car_in);
    connectPorts(road_18_7->q_send, intersection_18_8->q_recv[3]);
    connectPorts(intersection_18_8->q_sans[3], road_18_7->q_rans);
    connectPorts(road_18_7->car_out, intersection_18_8->car_in[3]);
    connectPorts(road_17_8->q_send, intersection_18_8->q_recv[0]);
    connectPorts(intersection_18_8->q_sans[0], road_17_8->q_rans);
    connectPorts(road_17_8->car_out, intersection_18_8->car_in[0]);
    intersection_18_10 = std::make_shared<Intersection>(17, "intersection_18_10");
    addSubModel(intersection_18_10);
    connectPorts(intersection_18_10->q_send[1], road_18_11->q_recv);
    connectPorts(road_18_11->q_sans, intersection_18_10->q_rans[1]);
    connectPorts(intersection_18_10->car_out[1], road_18_11->car_in);
    connectPorts(intersection_18_10->q_send[0], road_17_10->q_recv);
    connectPorts(road_17_10->q_sans, intersection_18_10->q_rans[0]);
    connectPorts(intersection_18_10->car_out[0], road_17_10->car_in);
    connectPorts(road_18_9->q_send, intersection_18_10->q_recv[3]);
    connectPorts(intersection_18_10->q_sans[3], road_18_9->q_rans);
    connectPorts(road_18_9->car_out, intersection_18_10->car_in[3]);
    connectPorts(road_19_10->q_send, intersection_18_10->q_recv[2]);
    connectPorts(intersection_18_10->q_sans[2], road_19_10->q_rans);
    connectPorts(road_19_10->car_out, intersection_18_10->car_in[2]);
    intersection_20_2 = std::make_shared<Intersection>(19, "intersection_20_2");
    addSubModel(intersection_20_2);
    connectPorts(intersection_20_2->q_send[3], road_20_1->q_recv);
    connectPorts(road_20_1->q_sans, intersection_20_2->q_rans[3]);
    connectPorts(intersection_20_2->car_out[3], road_20_1->car_in);
    connectPorts(intersection_20_2->q_send[0], road_19_2->q_recv);
    connectPorts(road_19_2->q_sans, intersection_20_2->q_rans[0]);
    connectPorts(intersection_20_2->car_out[0], road_19_2->car_in);
    connectPorts(road_20_3->q_send, intersection_20_2->q_recv[1]);
    connectPorts(intersection_20_2->q_sans[1], road_20_3->q_rans);
    connectPorts(road_20_3->car_out, intersection_20_2->car_in[1]);
    connectPorts(road_21_2->q_send, intersection_20_2->q_recv[2]);
    connectPorts(intersection_20_2->q_sans[2], road_21_2->q_rans);
    connectPorts(road_21_2->car_out, intersection_20_2->car_in[2]);
    intersection_20_4 = std::make_shared<Intersection>(19, "intersection_20_4");
    addSubModel(intersection_20_4);
    connectPorts(intersection_20_4->q_send[3], road_20_3->q_recv);
    connectPorts(road_20_3->q_sans, intersection_20_4->q_rans[3]);
    connectPorts(intersection_20_4->car_out[3], road_20_3->car_in);
    connectPorts(intersection_20_4->q_send[2], road_21_4->q_recv);
    connectPorts(road_21_4->q_sans, intersection_20_4->q_rans[2]);
    connectPorts(intersection_20_4->car_out[2], road_21_4->car_in);
    connectPorts(road_20_5->q_send, intersection_20_4->q_recv[1]);
    connectPorts(intersection_20_4->q_sans[1], road_20_5->q_rans);
    connectPorts(road_20_5->car_out, intersection_20_4->car_in[1]);
    connectPorts(road_19_4->q_send, intersection_20_4->q_recv[0]);
    connectPorts(intersection_20_4->q_sans[0], road_19_4->q_rans);
    connectPorts(road_19_4->car_out, intersection_20_4->car_in[0]);
    intersection_20_6 = std::make_shared<Intersection>(19, "intersection_20_6");
    addSubModel(intersection_20_6);
    connectPorts(intersection_20_6->q_send[3], road_20_5->q_recv);
    connectPorts(road_20_5->q_sans, intersection_20_6->q_rans[3]);
    connectPorts(intersection_20_6->car_out[3], road_20_5->car_in);
    connectPorts(intersection_20_6->q_send[0], road_19_6->q_recv);
    connectPorts(road_19_6->q_sans, intersection_20_6->q_rans[0]);
    connectPorts(intersection_20_6->car_out[0], road_19_6->car_in);
    connectPorts(road_20_7->q_send, intersection_20_6->q_recv[1]);
    connectPorts(intersection_20_6->q_sans[1], road_20_7->q_rans);
    connectPorts(road_20_7->car_out, intersection_20_6->car_in[1]);
    connectPorts(road_21_6->q_send, intersection_20_6->q_recv[2]);
    connectPorts(intersection_20_6->q_sans[2], road_21_6->q_rans);
    connectPorts(road_21_6->car_out, intersection_20_6->car_in[2]);
    intersection_20_8 = std::make_shared<Intersection>(19, "intersection_20_8");
    addSubModel(intersection_20_8);
    connectPorts(intersection_20_8->q_send[3], road_20_7->q_recv);
    connectPorts(road_20_7->q_sans, intersection_20_8->q_rans[3]);
    connectPorts(intersection_20_8->car_out[3], road_20_7->car_in);
    connectPorts(intersection_20_8->q_send[2], road_21_8->q_recv);
    connectPorts(road_21_8->q_sans, intersection_20_8->q_rans[2]);
    connectPorts(intersection_20_8->car_out[2], road_21_8->car_in);
    connectPorts(road_20_9->q_send, intersection_20_8->q_recv[1]);
    connectPorts(intersection_20_8->q_sans[1], road_20_9->q_rans);
    connectPorts(road_20_9->car_out, intersection_20_8->car_in[1]);
    connectPorts(road_19_8->q_send, intersection_20_8->q_recv[0]);
    connectPorts(intersection_20_8->q_sans[0], road_19_8->q_rans);
    connectPorts(road_19_8->car_out, intersection_20_8->car_in[0]);
    intersection_20_10 = std::make_shared<Intersection>(19, "intersection_20_10");
    addSubModel(intersection_20_10);
    connectPorts(intersection_20_10->q_send[3], road_20_9->q_recv);
    connectPorts(road_20_9->q_sans, intersection_20_10->q_rans[3]);
    connectPorts(intersection_20_10->car_out[3], road_20_9->car_in);
    connectPorts(intersection_20_10->q_send[0], road_19_10->q_recv);
    connectPorts(road_19_10->q_sans, intersection_20_10->q_rans[0]);
    connectPorts(intersection_20_10->car_out[0], road_19_10->car_in);
    connectPorts(road_20_11->q_send, intersection_20_10->q_recv[1]);
    connectPorts(intersection_20_10->q_sans[1], road_20_11->q_rans);
    connectPorts(road_20_11->car_out, intersection_20_10->car_in[1]);
    connectPorts(road_21_10->q_send, intersection_20_10->q_recv[2]);
    connectPorts(intersection_20_10->q_sans[2], road_21_10->q_rans);
    connectPorts(road_21_10->car_out, intersection_20_10->car_in[2]);
    intersection_22_2 = std::make_shared<Intersection>(21, "intersection_22_2");
    addSubModel(intersection_22_2);
    connectPorts(intersection_22_2->q_send[1], road_22_3->q_recv);
    connectPorts(road_22_3->q_sans, intersection_22_2->q_rans[1]);
    connectPorts(intersection_22_2->car_out[1], road_22_3->car_in);
    connectPorts(intersection_22_2->q_send[0], road_21_2->q_recv);
    connectPorts(road_21_2->q_sans, intersection_22_2->q_rans[0]);
    connectPorts(intersection_22_2->car_out[0], road_21_2->car_in);
    connectPorts(road_22_1->q_send, intersection_22_2->q_recv[3]);
    connectPorts(intersection_22_2->q_sans[3], road_22_1->q_rans);
    connectPorts(road_22_1->car_out, intersection_22_2->car_in[3]);
    connectPorts(road_23_2->q_send, intersection_22_2->q_recv[2]);
    connectPorts(intersection_22_2->q_sans[2], road_23_2->q_rans);
    connectPorts(road_23_2->car_out, intersection_22_2->car_in[2]);
    intersection_22_4 = std::make_shared<Intersection>(21, "intersection_22_4");
    addSubModel(intersection_22_4);
    connectPorts(intersection_22_4->q_send[1], road_22_5->q_recv);
    connectPorts(road_22_5->q_sans, intersection_22_4->q_rans[1]);
    connectPorts(intersection_22_4->car_out[1], road_22_5->car_in);
    connectPorts(intersection_22_4->q_send[2], road_23_4->q_recv);
    connectPorts(road_23_4->q_sans, intersection_22_4->q_rans[2]);
    connectPorts(intersection_22_4->car_out[2], road_23_4->car_in);
    connectPorts(road_22_3->q_send, intersection_22_4->q_recv[3]);
    connectPorts(intersection_22_4->q_sans[3], road_22_3->q_rans);
    connectPorts(road_22_3->car_out, intersection_22_4->car_in[3]);
    connectPorts(road_21_4->q_send, intersection_22_4->q_recv[0]);
    connectPorts(intersection_22_4->q_sans[0], road_21_4->q_rans);
    connectPorts(road_21_4->car_out, intersection_22_4->car_in[0]);
    intersection_22_6 = std::make_shared<Intersection>(21, "intersection_22_6");
    addSubModel(intersection_22_6);
    connectPorts(intersection_22_6->q_send[1], road_22_7->q_recv);
    connectPorts(road_22_7->q_sans, intersection_22_6->q_rans[1]);
    connectPorts(intersection_22_6->car_out[1], road_22_7->car_in);
    connectPorts(intersection_22_6->q_send[0], road_21_6->q_recv);
    connectPorts(road_21_6->q_sans, intersection_22_6->q_rans[0]);
    connectPorts(intersection_22_6->car_out[0], road_21_6->car_in);
    connectPorts(road_22_5->q_send, intersection_22_6->q_recv[3]);
    connectPorts(intersection_22_6->q_sans[3], road_22_5->q_rans);
    connectPorts(road_22_5->car_out, intersection_22_6->car_in[3]);
    connectPorts(road_23_6->q_send, intersection_22_6->q_recv[2]);
    connectPorts(intersection_22_6->q_sans[2], road_23_6->q_rans);
    connectPorts(road_23_6->car_out, intersection_22_6->car_in[2]);
    intersection_22_8 = std::make_shared<Intersection>(21, "intersection_22_8");
    addSubModel(intersection_22_8);
    connectPorts(intersection_22_8->q_send[1], road_22_9->q_recv);
    connectPorts(road_22_9->q_sans, intersection_22_8->q_rans[1]);
    connectPorts(intersection_22_8->car_out[1], road_22_9->car_in);
    connectPorts(intersection_22_8->q_send[2], road_23_8->q_recv);
    connectPorts(road_23_8->q_sans, intersection_22_8->q_rans[2]);
    connectPorts(intersection_22_8->car_out[2], road_23_8->car_in);
    connectPorts(road_22_7->q_send, intersection_22_8->q_recv[3]);
    connectPorts(intersection_22_8->q_sans[3], road_22_7->q_rans);
    connectPorts(road_22_7->car_out, intersection_22_8->car_in[3]);
    connectPorts(road_21_8->q_send, intersection_22_8->q_recv[0]);
    connectPorts(intersection_22_8->q_sans[0], road_21_8->q_rans);
    connectPorts(road_21_8->car_out, intersection_22_8->car_in[0]);
    intersection_22_10 = std::make_shared<Intersection>(21, "intersection_22_10");
    addSubModel(intersection_22_10);
    connectPorts(intersection_22_10->q_send[1], road_22_11->q_recv);
    connectPorts(road_22_11->q_sans, intersection_22_10->q_rans[1]);
    connectPorts(intersection_22_10->car_out[1], road_22_11->car_in);
    connectPorts(intersection_22_10->q_send[0], road_21_10->q_recv);
    connectPorts(road_21_10->q_sans, intersection_22_10->q_rans[0]);
    connectPorts(intersection_22_10->car_out[0], road_21_10->car_in);
    connectPorts(road_22_9->q_send, intersection_22_10->q_recv[3]);
    connectPorts(intersection_22_10->q_sans[3], road_22_9->q_rans);
    connectPorts(road_22_9->car_out, intersection_22_10->car_in[3]);
    connectPorts(road_23_10->q_send, intersection_22_10->q_recv[2]);
    connectPorts(intersection_22_10->q_sans[2], road_23_10->q_rans);
    connectPorts(road_23_10->car_out, intersection_22_10->car_in[2]);
    intersection_24_2 = std::make_shared<Intersection>(23, "intersection_24_2");
    addSubModel(intersection_24_2);
    connectPorts(intersection_24_2->q_send[3], road_24_1->q_recv);
    connectPorts(road_24_1->q_sans, intersection_24_2->q_rans[3]);
    connectPorts(intersection_24_2->car_out[3], road_24_1->car_in);
    connectPorts(intersection_24_2->q_send[0], road_23_2->q_recv);
    connectPorts(road_23_2->q_sans, intersection_24_2->q_rans[0]);
    connectPorts(intersection_24_2->car_out[0], road_23_2->car_in);
    connectPorts(road_24_3->q_send, intersection_24_2->q_recv[1]);
    connectPorts(intersection_24_2->q_sans[1], road_24_3->q_rans);
    connectPorts(road_24_3->car_out, intersection_24_2->car_in[1]);
    connectPorts(road_25_2->q_send, intersection_24_2->q_recv[2]);
    connectPorts(intersection_24_2->q_sans[2], road_25_2->q_rans);
    connectPorts(road_25_2->car_out, intersection_24_2->car_in[2]);
    intersection_24_4 = std::make_shared<Intersection>(23, "intersection_24_4");
    addSubModel(intersection_24_4);
    connectPorts(intersection_24_4->q_send[3], road_24_3->q_recv);
    connectPorts(road_24_3->q_sans, intersection_24_4->q_rans[3]);
    connectPorts(intersection_24_4->car_out[3], road_24_3->car_in);
    connectPorts(intersection_24_4->q_send[2], road_25_4->q_recv);
    connectPorts(road_25_4->q_sans, intersection_24_4->q_rans[2]);
    connectPorts(intersection_24_4->car_out[2], road_25_4->car_in);
    connectPorts(road_24_5->q_send, intersection_24_4->q_recv[1]);
    connectPorts(intersection_24_4->q_sans[1], road_24_5->q_rans);
    connectPorts(road_24_5->car_out, intersection_24_4->car_in[1]);
    connectPorts(road_23_4->q_send, intersection_24_4->q_recv[0]);
    connectPorts(intersection_24_4->q_sans[0], road_23_4->q_rans);
    connectPorts(road_23_4->car_out, intersection_24_4->car_in[0]);
    intersection_24_6 = std::make_shared<Intersection>(23, "intersection_24_6");
    addSubModel(intersection_24_6);
    connectPorts(intersection_24_6->q_send[3], road_24_5->q_recv);
    connectPorts(road_24_5->q_sans, intersection_24_6->q_rans[3]);
    connectPorts(intersection_24_6->car_out[3], road_24_5->car_in);
    connectPorts(intersection_24_6->q_send[0], road_23_6->q_recv);
    connectPorts(road_23_6->q_sans, intersection_24_6->q_rans[0]);
    connectPorts(intersection_24_6->car_out[0], road_23_6->car_in);
    connectPorts(road_24_7->q_send, intersection_24_6->q_recv[1]);
    connectPorts(intersection_24_6->q_sans[1], road_24_7->q_rans);
    connectPorts(road_24_7->car_out, intersection_24_6->car_in[1]);
    connectPorts(road_25_6->q_send, intersection_24_6->q_recv[2]);
    connectPorts(intersection_24_6->q_sans[2], road_25_6->q_rans);
    connectPorts(road_25_6->car_out, intersection_24_6->car_in[2]);
    intersection_24_8 = std::make_shared<Intersection>(23, "intersection_24_8");
    addSubModel(intersection_24_8);
    connectPorts(intersection_24_8->q_send[3], road_24_7->q_recv);
    connectPorts(road_24_7->q_sans, intersection_24_8->q_rans[3]);
    connectPorts(intersection_24_8->car_out[3], road_24_7->car_in);
    connectPorts(intersection_24_8->q_send[2], road_25_8->q_recv);
    connectPorts(road_25_8->q_sans, intersection_24_8->q_rans[2]);
    connectPorts(intersection_24_8->car_out[2], road_25_8->car_in);
    connectPorts(road_24_9->q_send, intersection_24_8->q_recv[1]);
    connectPorts(intersection_24_8->q_sans[1], road_24_9->q_rans);
    connectPorts(road_24_9->car_out, intersection_24_8->car_in[1]);
    connectPorts(road_23_8->q_send, intersection_24_8->q_recv[0]);
    connectPorts(intersection_24_8->q_sans[0], road_23_8->q_rans);
    connectPorts(road_23_8->car_out, intersection_24_8->car_in[0]);
    intersection_24_10 = std::make_shared<Intersection>(23, "intersection_24_10");
    addSubModel(intersection_24_10);
    connectPorts(intersection_24_10->q_send[3], road_24_9->q_recv);
    connectPorts(road_24_9->q_sans, intersection_24_10->q_rans[3]);
    connectPorts(intersection_24_10->car_out[3], road_24_9->car_in);
    connectPorts(intersection_24_10->q_send[0], road_23_10->q_recv);
    connectPorts(road_23_10->q_sans, intersection_24_10->q_rans[0]);
    connectPorts(intersection_24_10->car_out[0], road_23_10->car_in);
    connectPorts(road_24_11->q_send, intersection_24_10->q_recv[1]);
    connectPorts(intersection_24_10->q_sans[1], road_24_11->q_rans);
    connectPorts(road_24_11->car_out, intersection_24_10->car_in[1]);
    connectPorts(road_25_10->q_send, intersection_24_10->q_recv[2]);
    connectPorts(intersection_24_10->q_sans[2], road_25_10->q_rans);
    connectPorts(road_25_10->car_out, intersection_24_10->car_in[2]);
    intersection_26_2 = std::make_shared<Intersection>(25, "intersection_26_2");
    addSubModel(intersection_26_2);
    connectPorts(intersection_26_2->q_send[1], road_26_3->q_recv);
    connectPorts(road_26_3->q_sans, intersection_26_2->q_rans[1]);
    connectPorts(intersection_26_2->car_out[1], road_26_3->car_in);
    connectPorts(intersection_26_2->q_send[0], road_25_2->q_recv);
    connectPorts(road_25_2->q_sans, intersection_26_2->q_rans[0]);
    connectPorts(intersection_26_2->car_out[0], road_25_2->car_in);
    connectPorts(road_26_1->q_send, intersection_26_2->q_recv[3]);
    connectPorts(intersection_26_2->q_sans[3], road_26_1->q_rans);
    connectPorts(road_26_1->car_out, intersection_26_2->car_in[3]);
    connectPorts(road_27_2->q_send, intersection_26_2->q_recv[2]);
    connectPorts(intersection_26_2->q_sans[2], road_27_2->q_rans);
    connectPorts(road_27_2->car_out, intersection_26_2->car_in[2]);
    intersection_26_4 = std::make_shared<Intersection>(25, "intersection_26_4");
    addSubModel(intersection_26_4);
    connectPorts(intersection_26_4->q_send[1], road_26_5->q_recv);
    connectPorts(road_26_5->q_sans, intersection_26_4->q_rans[1]);
    connectPorts(intersection_26_4->car_out[1], road_26_5->car_in);
    connectPorts(intersection_26_4->q_send[2], road_27_4->q_recv);
    connectPorts(road_27_4->q_sans, intersection_26_4->q_rans[2]);
    connectPorts(intersection_26_4->car_out[2], road_27_4->car_in);
    connectPorts(road_26_3->q_send, intersection_26_4->q_recv[3]);
    connectPorts(intersection_26_4->q_sans[3], road_26_3->q_rans);
    connectPorts(road_26_3->car_out, intersection_26_4->car_in[3]);
    connectPorts(road_25_4->q_send, intersection_26_4->q_recv[0]);
    connectPorts(intersection_26_4->q_sans[0], road_25_4->q_rans);
    connectPorts(road_25_4->car_out, intersection_26_4->car_in[0]);
    intersection_26_6 = std::make_shared<Intersection>(25, "intersection_26_6");
    addSubModel(intersection_26_6);
    connectPorts(intersection_26_6->q_send[1], road_26_7->q_recv);
    connectPorts(road_26_7->q_sans, intersection_26_6->q_rans[1]);
    connectPorts(intersection_26_6->car_out[1], road_26_7->car_in);
    connectPorts(intersection_26_6->q_send[0], road_25_6->q_recv);
    connectPorts(road_25_6->q_sans, intersection_26_6->q_rans[0]);
    connectPorts(intersection_26_6->car_out[0], road_25_6->car_in);
    connectPorts(road_26_5->q_send, intersection_26_6->q_recv[3]);
    connectPorts(intersection_26_6->q_sans[3], road_26_5->q_rans);
    connectPorts(road_26_5->car_out, intersection_26_6->car_in[3]);
    connectPorts(road_27_6->q_send, intersection_26_6->q_recv[2]);
    connectPorts(intersection_26_6->q_sans[2], road_27_6->q_rans);
    connectPorts(road_27_6->car_out, intersection_26_6->car_in[2]);
    intersection_26_8 = std::make_shared<Intersection>(25, "intersection_26_8");
    addSubModel(intersection_26_8);
    connectPorts(intersection_26_8->q_send[1], road_26_9->q_recv);
    connectPorts(road_26_9->q_sans, intersection_26_8->q_rans[1]);
    connectPorts(intersection_26_8->car_out[1], road_26_9->car_in);
    connectPorts(intersection_26_8->q_send[2], road_27_8->q_recv);
    connectPorts(road_27_8->q_sans, intersection_26_8->q_rans[2]);
    connectPorts(intersection_26_8->car_out[2], road_27_8->car_in);
    connectPorts(road_26_7->q_send, intersection_26_8->q_recv[3]);
    connectPorts(intersection_26_8->q_sans[3], road_26_7->q_rans);
    connectPorts(road_26_7->car_out, intersection_26_8->car_in[3]);
    connectPorts(road_25_8->q_send, intersection_26_8->q_recv[0]);
    connectPorts(intersection_26_8->q_sans[0], road_25_8->q_rans);
    connectPorts(road_25_8->car_out, intersection_26_8->car_in[0]);
    intersection_26_10 = std::make_shared<Intersection>(25, "intersection_26_10");
    addSubModel(intersection_26_10);
    connectPorts(intersection_26_10->q_send[1], road_26_11->q_recv);
    connectPorts(road_26_11->q_sans, intersection_26_10->q_rans[1]);
    connectPorts(intersection_26_10->car_out[1], road_26_11->car_in);
    connectPorts(intersection_26_10->q_send[0], road_25_10->q_recv);
    connectPorts(road_25_10->q_sans, intersection_26_10->q_rans[0]);
    connectPorts(intersection_26_10->car_out[0], road_25_10->car_in);
    connectPorts(road_26_9->q_send, intersection_26_10->q_recv[3]);
    connectPorts(intersection_26_10->q_sans[3], road_26_9->q_rans);
    connectPorts(road_26_9->car_out, intersection_26_10->car_in[3]);
    connectPorts(road_27_10->q_send, intersection_26_10->q_recv[2]);
    connectPorts(intersection_26_10->q_sans[2], road_27_10->q_rans);
    connectPorts(road_27_10->car_out, intersection_26_10->car_in[2]);
    intersection_28_2 = std::make_shared<Intersection>(27, "intersection_28_2");
    addSubModel(intersection_28_2);
    connectPorts(intersection_28_2->q_send[3], road_28_1->q_recv);
    connectPorts(road_28_1->q_sans, intersection_28_2->q_rans[3]);
    connectPorts(intersection_28_2->car_out[3], road_28_1->car_in);
    connectPorts(intersection_28_2->q_send[0], road_27_2->q_recv);
    connectPorts(road_27_2->q_sans, intersection_28_2->q_rans[0]);
    connectPorts(intersection_28_2->car_out[0], road_27_2->car_in);
    connectPorts(road_28_3->q_send, intersection_28_2->q_recv[1]);
    connectPorts(intersection_28_2->q_sans[1], road_28_3->q_rans);
    connectPorts(road_28_3->car_out, intersection_28_2->car_in[1]);
    connectPorts(road_29_2->q_send, intersection_28_2->q_recv[2]);
    connectPorts(intersection_28_2->q_sans[2], road_29_2->q_rans);
    connectPorts(road_29_2->car_out, intersection_28_2->car_in[2]);
    intersection_28_4 = std::make_shared<Intersection>(27, "intersection_28_4");
    addSubModel(intersection_28_4);
    connectPorts(intersection_28_4->q_send[3], road_28_3->q_recv);
    connectPorts(road_28_3->q_sans, intersection_28_4->q_rans[3]);
    connectPorts(intersection_28_4->car_out[3], road_28_3->car_in);
    connectPorts(intersection_28_4->q_send[2], road_29_4->q_recv);
    connectPorts(road_29_4->q_sans, intersection_28_4->q_rans[2]);
    connectPorts(intersection_28_4->car_out[2], road_29_4->car_in);
    connectPorts(road_28_5->q_send, intersection_28_4->q_recv[1]);
    connectPorts(intersection_28_4->q_sans[1], road_28_5->q_rans);
    connectPorts(road_28_5->car_out, intersection_28_4->car_in[1]);
    connectPorts(road_27_4->q_send, intersection_28_4->q_recv[0]);
    connectPorts(intersection_28_4->q_sans[0], road_27_4->q_rans);
    connectPorts(road_27_4->car_out, intersection_28_4->car_in[0]);
    intersection_28_6 = std::make_shared<Intersection>(27, "intersection_28_6");
    addSubModel(intersection_28_6);
    connectPorts(intersection_28_6->q_send[3], road_28_5->q_recv);
    connectPorts(road_28_5->q_sans, intersection_28_6->q_rans[3]);
    connectPorts(intersection_28_6->car_out[3], road_28_5->car_in);
    connectPorts(intersection_28_6->q_send[0], road_27_6->q_recv);
    connectPorts(road_27_6->q_sans, intersection_28_6->q_rans[0]);
    connectPorts(intersection_28_6->car_out[0], road_27_6->car_in);
    connectPorts(road_28_7->q_send, intersection_28_6->q_recv[1]);
    connectPorts(intersection_28_6->q_sans[1], road_28_7->q_rans);
    connectPorts(road_28_7->car_out, intersection_28_6->car_in[1]);
    connectPorts(road_29_6->q_send, intersection_28_6->q_recv[2]);
    connectPorts(intersection_28_6->q_sans[2], road_29_6->q_rans);
    connectPorts(road_29_6->car_out, intersection_28_6->car_in[2]);
    intersection_28_8 = std::make_shared<Intersection>(27, "intersection_28_8");
    addSubModel(intersection_28_8);
    connectPorts(intersection_28_8->q_send[3], road_28_7->q_recv);
    connectPorts(road_28_7->q_sans, intersection_28_8->q_rans[3]);
    connectPorts(intersection_28_8->car_out[3], road_28_7->car_in);
    connectPorts(intersection_28_8->q_send[2], road_29_8->q_recv);
    connectPorts(road_29_8->q_sans, intersection_28_8->q_rans[2]);
    connectPorts(intersection_28_8->car_out[2], road_29_8->car_in);
    connectPorts(road_28_9->q_send, intersection_28_8->q_recv[1]);
    connectPorts(intersection_28_8->q_sans[1], road_28_9->q_rans);
    connectPorts(road_28_9->car_out, intersection_28_8->car_in[1]);
    connectPorts(road_27_8->q_send, intersection_28_8->q_recv[0]);
    connectPorts(intersection_28_8->q_sans[0], road_27_8->q_rans);
    connectPorts(road_27_8->car_out, intersection_28_8->car_in[0]);
    intersection_28_10 = std::make_shared<Intersection>(27, "intersection_28_10");
    addSubModel(intersection_28_10);
    connectPorts(intersection_28_10->q_send[3], road_28_9->q_recv);
    connectPorts(road_28_9->q_sans, intersection_28_10->q_rans[3]);
    connectPorts(intersection_28_10->car_out[3], road_28_9->car_in);
    connectPorts(intersection_28_10->q_send[0], road_27_10->q_recv);
    connectPorts(road_27_10->q_sans, intersection_28_10->q_rans[0]);
    connectPorts(intersection_28_10->car_out[0], road_27_10->car_in);
    connectPorts(road_28_11->q_send, intersection_28_10->q_recv[1]);
    connectPorts(intersection_28_10->q_sans[1], road_28_11->q_rans);
    connectPorts(road_28_11->car_out, intersection_28_10->car_in[1]);
    connectPorts(road_29_10->q_send, intersection_28_10->q_recv[2]);
    connectPorts(intersection_28_10->q_sans[2], road_29_10->q_rans);
    connectPorts(road_29_10->car_out, intersection_28_10->car_in[2]);
    intersection_30_2 = std::make_shared<Intersection>(29, "intersection_30_2");
    addSubModel(intersection_30_2);
    connectPorts(intersection_30_2->q_send[1], road_30_3->q_recv);
    connectPorts(road_30_3->q_sans, intersection_30_2->q_rans[1]);
    connectPorts(intersection_30_2->car_out[1], road_30_3->car_in);
    connectPorts(intersection_30_2->q_send[0], road_29_2->q_recv);
    connectPorts(road_29_2->q_sans, intersection_30_2->q_rans[0]);
    connectPorts(intersection_30_2->car_out[0], road_29_2->car_in);
    connectPorts(road_30_1->q_send, intersection_30_2->q_recv[3]);
    connectPorts(intersection_30_2->q_sans[3], road_30_1->q_rans);
    connectPorts(road_30_1->car_out, intersection_30_2->car_in[3]);
    connectPorts(road_31_2->q_send, intersection_30_2->q_recv[2]);
    connectPorts(intersection_30_2->q_sans[2], road_31_2->q_rans);
    connectPorts(road_31_2->car_out, intersection_30_2->car_in[2]);
    intersection_30_4 = std::make_shared<Intersection>(29, "intersection_30_4");
    addSubModel(intersection_30_4);
    connectPorts(intersection_30_4->q_send[1], road_30_5->q_recv);
    connectPorts(road_30_5->q_sans, intersection_30_4->q_rans[1]);
    connectPorts(intersection_30_4->car_out[1], road_30_5->car_in);
    connectPorts(intersection_30_4->q_send[2], road_31_4->q_recv);
    connectPorts(road_31_4->q_sans, intersection_30_4->q_rans[2]);
    connectPorts(intersection_30_4->car_out[2], road_31_4->car_in);
    connectPorts(road_30_3->q_send, intersection_30_4->q_recv[3]);
    connectPorts(intersection_30_4->q_sans[3], road_30_3->q_rans);
    connectPorts(road_30_3->car_out, intersection_30_4->car_in[3]);
    connectPorts(road_29_4->q_send, intersection_30_4->q_recv[0]);
    connectPorts(intersection_30_4->q_sans[0], road_29_4->q_rans);
    connectPorts(road_29_4->car_out, intersection_30_4->car_in[0]);
    intersection_30_6 = std::make_shared<Intersection>(29, "intersection_30_6");
    addSubModel(intersection_30_6);
    connectPorts(intersection_30_6->q_send[1], road_30_7->q_recv);
    connectPorts(road_30_7->q_sans, intersection_30_6->q_rans[1]);
    connectPorts(intersection_30_6->car_out[1], road_30_7->car_in);
    connectPorts(intersection_30_6->q_send[0], road_29_6->q_recv);
    connectPorts(road_29_6->q_sans, intersection_30_6->q_rans[0]);
    connectPorts(intersection_30_6->car_out[0], road_29_6->car_in);
    connectPorts(road_30_5->q_send, intersection_30_6->q_recv[3]);
    connectPorts(intersection_30_6->q_sans[3], road_30_5->q_rans);
    connectPorts(road_30_5->car_out, intersection_30_6->car_in[3]);
    connectPorts(road_31_6->q_send, intersection_30_6->q_recv[2]);
    connectPorts(intersection_30_6->q_sans[2], road_31_6->q_rans);
    connectPorts(road_31_6->car_out, intersection_30_6->car_in[2]);
    intersection_30_8 = std::make_shared<Intersection>(29, "intersection_30_8");
    addSubModel(intersection_30_8);
    connectPorts(intersection_30_8->q_send[1], road_30_9->q_recv);
    connectPorts(road_30_9->q_sans, intersection_30_8->q_rans[1]);
    connectPorts(intersection_30_8->car_out[1], road_30_9->car_in);
    connectPorts(intersection_30_8->q_send[2], road_31_8->q_recv);
    connectPorts(road_31_8->q_sans, intersection_30_8->q_rans[2]);
    connectPorts(intersection_30_8->car_out[2], road_31_8->car_in);
    connectPorts(road_30_7->q_send, intersection_30_8->q_recv[3]);
    connectPorts(intersection_30_8->q_sans[3], road_30_7->q_rans);
    connectPorts(road_30_7->car_out, intersection_30_8->car_in[3]);
    connectPorts(road_29_8->q_send, intersection_30_8->q_recv[0]);
    connectPorts(intersection_30_8->q_sans[0], road_29_8->q_rans);
    connectPorts(road_29_8->car_out, intersection_30_8->car_in[0]);
    intersection_30_10 = std::make_shared<Intersection>(29, "intersection_30_10");
    addSubModel(intersection_30_10);
    connectPorts(intersection_30_10->q_send[1], road_30_11->q_recv);
    connectPorts(road_30_11->q_sans, intersection_30_10->q_rans[1]);
    connectPorts(intersection_30_10->car_out[1], road_30_11->car_in);
    connectPorts(intersection_30_10->q_send[0], road_29_10->q_recv);
    connectPorts(road_29_10->q_sans, intersection_30_10->q_rans[0]);
    connectPorts(intersection_30_10->car_out[0], road_29_10->car_in);
    connectPorts(road_30_9->q_send, intersection_30_10->q_recv[3]);
    connectPorts(intersection_30_10->q_sans[3], road_30_9->q_rans);
    connectPorts(road_30_9->car_out, intersection_30_10->car_in[3]);
    connectPorts(road_31_10->q_send, intersection_30_10->q_recv[2]);
    connectPorts(intersection_30_10->q_sans[2], road_31_10->q_rans);
    connectPorts(road_31_10->car_out, intersection_30_10->car_in[2]);
    intersection_32_2 = std::make_shared<Intersection>(31, "intersection_32_2");
    addSubModel(intersection_32_2);
    connectPorts(intersection_32_2->q_send[3], road_32_1->q_recv);
    connectPorts(road_32_1->q_sans, intersection_32_2->q_rans[3]);
    connectPorts(intersection_32_2->car_out[3], road_32_1->car_in);
    connectPorts(intersection_32_2->q_send[0], road_31_2->q_recv);
    connectPorts(road_31_2->q_sans, intersection_32_2->q_rans[0]);
    connectPorts(intersection_32_2->car_out[0], road_31_2->car_in);
    connectPorts(road_32_3->q_send, intersection_32_2->q_recv[1]);
    connectPorts(intersection_32_2->q_sans[1], road_32_3->q_rans);
    connectPorts(road_32_3->car_out, intersection_32_2->car_in[1]);
    connectPorts(road_33_2->q_send, intersection_32_2->q_recv[2]);
    connectPorts(intersection_32_2->q_sans[2], road_33_2->q_rans);
    connectPorts(road_33_2->car_out, intersection_32_2->car_in[2]);
    intersection_32_4 = std::make_shared<Intersection>(31, "intersection_32_4");
    addSubModel(intersection_32_4);
    connectPorts(intersection_32_4->q_send[3], road_32_3->q_recv);
    connectPorts(road_32_3->q_sans, intersection_32_4->q_rans[3]);
    connectPorts(intersection_32_4->car_out[3], road_32_3->car_in);
    connectPorts(intersection_32_4->q_send[2], road_33_4->q_recv);
    connectPorts(road_33_4->q_sans, intersection_32_4->q_rans[2]);
    connectPorts(intersection_32_4->car_out[2], road_33_4->car_in);
    connectPorts(road_32_5->q_send, intersection_32_4->q_recv[1]);
    connectPorts(intersection_32_4->q_sans[1], road_32_5->q_rans);
    connectPorts(road_32_5->car_out, intersection_32_4->car_in[1]);
    connectPorts(road_31_4->q_send, intersection_32_4->q_recv[0]);
    connectPorts(intersection_32_4->q_sans[0], road_31_4->q_rans);
    connectPorts(road_31_4->car_out, intersection_32_4->car_in[0]);
    intersection_32_6 = std::make_shared<Intersection>(31, "intersection_32_6");
    addSubModel(intersection_32_6);
    connectPorts(intersection_32_6->q_send[3], road_32_5->q_recv);
    connectPorts(road_32_5->q_sans, intersection_32_6->q_rans[3]);
    connectPorts(intersection_32_6->car_out[3], road_32_5->car_in);
    connectPorts(intersection_32_6->q_send[0], road_31_6->q_recv);
    connectPorts(road_31_6->q_sans, intersection_32_6->q_rans[0]);
    connectPorts(intersection_32_6->car_out[0], road_31_6->car_in);
    connectPorts(road_32_7->q_send, intersection_32_6->q_recv[1]);
    connectPorts(intersection_32_6->q_sans[1], road_32_7->q_rans);
    connectPorts(road_32_7->car_out, intersection_32_6->car_in[1]);
    connectPorts(road_33_6->q_send, intersection_32_6->q_recv[2]);
    connectPorts(intersection_32_6->q_sans[2], road_33_6->q_rans);
    connectPorts(road_33_6->car_out, intersection_32_6->car_in[2]);
    intersection_32_8 = std::make_shared<Intersection>(31, "intersection_32_8");
    addSubModel(intersection_32_8);
    connectPorts(intersection_32_8->q_send[3], road_32_7->q_recv);
    connectPorts(road_32_7->q_sans, intersection_32_8->q_rans[3]);
    connectPorts(intersection_32_8->car_out[3], road_32_7->car_in);
    connectPorts(intersection_32_8->q_send[2], road_33_8->q_recv);
    connectPorts(road_33_8->q_sans, intersection_32_8->q_rans[2]);
    connectPorts(intersection_32_8->car_out[2], road_33_8->car_in);
    connectPorts(road_32_9->q_send, intersection_32_8->q_recv[1]);
    connectPorts(intersection_32_8->q_sans[1], road_32_9->q_rans);
    connectPorts(road_32_9->car_out, intersection_32_8->car_in[1]);
    connectPorts(road_31_8->q_send, intersection_32_8->q_recv[0]);
    connectPorts(intersection_32_8->q_sans[0], road_31_8->q_rans);
    connectPorts(road_31_8->car_out, intersection_32_8->car_in[0]);
    intersection_32_10 = std::make_shared<Intersection>(31, "intersection_32_10");
    addSubModel(intersection_32_10);
    connectPorts(intersection_32_10->q_send[3], road_32_9->q_recv);
    connectPorts(road_32_9->q_sans, intersection_32_10->q_rans[3]);
    connectPorts(intersection_32_10->car_out[3], road_32_9->car_in);
    connectPorts(intersection_32_10->q_send[0], road_31_10->q_recv);
    connectPorts(road_31_10->q_sans, intersection_32_10->q_rans[0]);
    connectPorts(intersection_32_10->car_out[0], road_31_10->car_in);
    connectPorts(road_32_11->q_send, intersection_32_10->q_recv[1]);
    connectPorts(intersection_32_10->q_sans[1], road_32_11->q_rans);
    connectPorts(road_32_11->car_out, intersection_32_10->car_in[1]);
    connectPorts(road_33_10->q_send, intersection_32_10->q_recv[2]);
    connectPorts(intersection_32_10->q_sans[2], road_33_10->q_rans);
    connectPorts(road_33_10->car_out, intersection_32_10->car_in[2]);
    intersection_34_2 = std::make_shared<Intersection>(33, "intersection_34_2");
    addSubModel(intersection_34_2);
    connectPorts(intersection_34_2->q_send[1], road_34_3->q_recv);
    connectPorts(road_34_3->q_sans, intersection_34_2->q_rans[1]);
    connectPorts(intersection_34_2->car_out[1], road_34_3->car_in);
    connectPorts(intersection_34_2->q_send[0], road_33_2->q_recv);
    connectPorts(road_33_2->q_sans, intersection_34_2->q_rans[0]);
    connectPorts(intersection_34_2->car_out[0], road_33_2->car_in);
    connectPorts(road_34_1->q_send, intersection_34_2->q_recv[3]);
    connectPorts(intersection_34_2->q_sans[3], road_34_1->q_rans);
    connectPorts(road_34_1->car_out, intersection_34_2->car_in[3]);
    connectPorts(road_35_2->q_send, intersection_34_2->q_recv[2]);
    connectPorts(intersection_34_2->q_sans[2], road_35_2->q_rans);
    connectPorts(road_35_2->car_out, intersection_34_2->car_in[2]);
    intersection_34_4 = std::make_shared<Intersection>(33, "intersection_34_4");
    addSubModel(intersection_34_4);
    connectPorts(intersection_34_4->q_send[1], road_34_5->q_recv);
    connectPorts(road_34_5->q_sans, intersection_34_4->q_rans[1]);
    connectPorts(intersection_34_4->car_out[1], road_34_5->car_in);
    connectPorts(intersection_34_4->q_send[2], road_35_4->q_recv);
    connectPorts(road_35_4->q_sans, intersection_34_4->q_rans[2]);
    connectPorts(intersection_34_4->car_out[2], road_35_4->car_in);
    connectPorts(road_34_3->q_send, intersection_34_4->q_recv[3]);
    connectPorts(intersection_34_4->q_sans[3], road_34_3->q_rans);
    connectPorts(road_34_3->car_out, intersection_34_4->car_in[3]);
    connectPorts(road_33_4->q_send, intersection_34_4->q_recv[0]);
    connectPorts(intersection_34_4->q_sans[0], road_33_4->q_rans);
    connectPorts(road_33_4->car_out, intersection_34_4->car_in[0]);
    intersection_34_6 = std::make_shared<Intersection>(33, "intersection_34_6");
    addSubModel(intersection_34_6);
    connectPorts(intersection_34_6->q_send[1], road_34_7->q_recv);
    connectPorts(road_34_7->q_sans, intersection_34_6->q_rans[1]);
    connectPorts(intersection_34_6->car_out[1], road_34_7->car_in);
    connectPorts(intersection_34_6->q_send[0], road_33_6->q_recv);
    connectPorts(road_33_6->q_sans, intersection_34_6->q_rans[0]);
    connectPorts(intersection_34_6->car_out[0], road_33_6->car_in);
    connectPorts(road_34_5->q_send, intersection_34_6->q_recv[3]);
    connectPorts(intersection_34_6->q_sans[3], road_34_5->q_rans);
    connectPorts(road_34_5->car_out, intersection_34_6->car_in[3]);
    connectPorts(road_35_6->q_send, intersection_34_6->q_recv[2]);
    connectPorts(intersection_34_6->q_sans[2], road_35_6->q_rans);
    connectPorts(road_35_6->car_out, intersection_34_6->car_in[2]);
    intersection_34_8 = std::make_shared<Intersection>(33, "intersection_34_8");
    addSubModel(intersection_34_8);
    connectPorts(intersection_34_8->q_send[1], road_34_9->q_recv);
    connectPorts(road_34_9->q_sans, intersection_34_8->q_rans[1]);
    connectPorts(intersection_34_8->car_out[1], road_34_9->car_in);
    connectPorts(intersection_34_8->q_send[2], road_35_8->q_recv);
    connectPorts(road_35_8->q_sans, intersection_34_8->q_rans[2]);
    connectPorts(intersection_34_8->car_out[2], road_35_8->car_in);
    connectPorts(road_34_7->q_send, intersection_34_8->q_recv[3]);
    connectPorts(intersection_34_8->q_sans[3], road_34_7->q_rans);
    connectPorts(road_34_7->car_out, intersection_34_8->car_in[3]);
    connectPorts(road_33_8->q_send, intersection_34_8->q_recv[0]);
    connectPorts(intersection_34_8->q_sans[0], road_33_8->q_rans);
    connectPorts(road_33_8->car_out, intersection_34_8->car_in[0]);
    intersection_34_10 = std::make_shared<Intersection>(33, "intersection_34_10");
    addSubModel(intersection_34_10);
    connectPorts(intersection_34_10->q_send[1], road_34_11->q_recv);
    connectPorts(road_34_11->q_sans, intersection_34_10->q_rans[1]);
    connectPorts(intersection_34_10->car_out[1], road_34_11->car_in);
    connectPorts(intersection_34_10->q_send[0], road_33_10->q_recv);
    connectPorts(road_33_10->q_sans, intersection_34_10->q_rans[0]);
    connectPorts(intersection_34_10->car_out[0], road_33_10->car_in);
    connectPorts(road_34_9->q_send, intersection_34_10->q_recv[3]);
    connectPorts(intersection_34_10->q_sans[3], road_34_9->q_rans);
    connectPorts(road_34_9->car_out, intersection_34_10->car_in[3]);
    connectPorts(road_35_10->q_send, intersection_34_10->q_recv[2]);
    connectPorts(intersection_34_10->q_sans[2], road_35_10->q_rans);
    connectPorts(road_35_10->car_out, intersection_34_10->car_in[2]);
    intersection_36_2 = std::make_shared<Intersection>(35, "intersection_36_2");
    addSubModel(intersection_36_2);
    connectPorts(intersection_36_2->q_send[3], road_36_1->q_recv);
    connectPorts(road_36_1->q_sans, intersection_36_2->q_rans[3]);
    connectPorts(intersection_36_2->car_out[3], road_36_1->car_in);
    connectPorts(intersection_36_2->q_send[0], road_35_2->q_recv);
    connectPorts(road_35_2->q_sans, intersection_36_2->q_rans[0]);
    connectPorts(intersection_36_2->car_out[0], road_35_2->car_in);
    connectPorts(road_36_3->q_send, intersection_36_2->q_recv[1]);
    connectPorts(intersection_36_2->q_sans[1], road_36_3->q_rans);
    connectPorts(road_36_3->car_out, intersection_36_2->car_in[1]);
    connectPorts(road_37_2->q_send, intersection_36_2->q_recv[2]);
    connectPorts(intersection_36_2->q_sans[2], road_37_2->q_rans);
    connectPorts(road_37_2->car_out, intersection_36_2->car_in[2]);
    intersection_36_4 = std::make_shared<Intersection>(35, "intersection_36_4");
    addSubModel(intersection_36_4);
    connectPorts(intersection_36_4->q_send[3], road_36_3->q_recv);
    connectPorts(road_36_3->q_sans, intersection_36_4->q_rans[3]);
    connectPorts(intersection_36_4->car_out[3], road_36_3->car_in);
    connectPorts(intersection_36_4->q_send[2], road_37_4->q_recv);
    connectPorts(road_37_4->q_sans, intersection_36_4->q_rans[2]);
    connectPorts(intersection_36_4->car_out[2], road_37_4->car_in);
    connectPorts(road_36_5->q_send, intersection_36_4->q_recv[1]);
    connectPorts(intersection_36_4->q_sans[1], road_36_5->q_rans);
    connectPorts(road_36_5->car_out, intersection_36_4->car_in[1]);
    connectPorts(road_35_4->q_send, intersection_36_4->q_recv[0]);
    connectPorts(intersection_36_4->q_sans[0], road_35_4->q_rans);
    connectPorts(road_35_4->car_out, intersection_36_4->car_in[0]);
    intersection_36_6 = std::make_shared<Intersection>(35, "intersection_36_6");
    addSubModel(intersection_36_6);
    connectPorts(intersection_36_6->q_send[3], road_36_5->q_recv);
    connectPorts(road_36_5->q_sans, intersection_36_6->q_rans[3]);
    connectPorts(intersection_36_6->car_out[3], road_36_5->car_in);
    connectPorts(intersection_36_6->q_send[0], road_35_6->q_recv);
    connectPorts(road_35_6->q_sans, intersection_36_6->q_rans[0]);
    connectPorts(intersection_36_6->car_out[0], road_35_6->car_in);
    connectPorts(road_36_7->q_send, intersection_36_6->q_recv[1]);
    connectPorts(intersection_36_6->q_sans[1], road_36_7->q_rans);
    connectPorts(road_36_7->car_out, intersection_36_6->car_in[1]);
    connectPorts(road_37_6->q_send, intersection_36_6->q_recv[2]);
    connectPorts(intersection_36_6->q_sans[2], road_37_6->q_rans);
    connectPorts(road_37_6->car_out, intersection_36_6->car_in[2]);
    intersection_36_8 = std::make_shared<Intersection>(35, "intersection_36_8");
    addSubModel(intersection_36_8);
    connectPorts(intersection_36_8->q_send[3], road_36_7->q_recv);
    connectPorts(road_36_7->q_sans, intersection_36_8->q_rans[3]);
    connectPorts(intersection_36_8->car_out[3], road_36_7->car_in);
    connectPorts(intersection_36_8->q_send[2], road_37_8->q_recv);
    connectPorts(road_37_8->q_sans, intersection_36_8->q_rans[2]);
    connectPorts(intersection_36_8->car_out[2], road_37_8->car_in);
    connectPorts(road_36_9->q_send, intersection_36_8->q_recv[1]);
    connectPorts(intersection_36_8->q_sans[1], road_36_9->q_rans);
    connectPorts(road_36_9->car_out, intersection_36_8->car_in[1]);
    connectPorts(road_35_8->q_send, intersection_36_8->q_recv[0]);
    connectPorts(intersection_36_8->q_sans[0], road_35_8->q_rans);
    connectPorts(road_35_8->car_out, intersection_36_8->car_in[0]);
    intersection_36_10 = std::make_shared<Intersection>(35, "intersection_36_10");
    addSubModel(intersection_36_10);
    connectPorts(intersection_36_10->q_send[3], road_36_9->q_recv);
    connectPorts(road_36_9->q_sans, intersection_36_10->q_rans[3]);
    connectPorts(intersection_36_10->car_out[3], road_36_9->car_in);
    connectPorts(intersection_36_10->q_send[0], road_35_10->q_recv);
    connectPorts(road_35_10->q_sans, intersection_36_10->q_rans[0]);
    connectPorts(intersection_36_10->car_out[0], road_35_10->car_in);
    connectPorts(road_36_11->q_send, intersection_36_10->q_recv[1]);
    connectPorts(intersection_36_10->q_sans[1], road_36_11->q_rans);
    connectPorts(road_36_11->car_out, intersection_36_10->car_in[1]);
    connectPorts(road_37_10->q_send, intersection_36_10->q_recv[2]);
    connectPorts(intersection_36_10->q_sans[2], road_37_10->q_rans);
    connectPorts(road_37_10->car_out, intersection_36_10->car_in[2]);
    intersection_38_2 = std::make_shared<Intersection>(37, "intersection_38_2");
    addSubModel(intersection_38_2);
    connectPorts(intersection_38_2->q_send[1], road_38_3->q_recv);
    connectPorts(road_38_3->q_sans, intersection_38_2->q_rans[1]);
    connectPorts(intersection_38_2->car_out[1], road_38_3->car_in);
    connectPorts(intersection_38_2->q_send[0], road_37_2->q_recv);
    connectPorts(road_37_2->q_sans, intersection_38_2->q_rans[0]);
    connectPorts(intersection_38_2->car_out[0], road_37_2->car_in);
    connectPorts(road_38_1->q_send, intersection_38_2->q_recv[3]);
    connectPorts(intersection_38_2->q_sans[3], road_38_1->q_rans);
    connectPorts(road_38_1->car_out, intersection_38_2->car_in[3]);
    connectPorts(road_39_2->q_send, intersection_38_2->q_recv[2]);
    connectPorts(intersection_38_2->q_sans[2], road_39_2->q_rans);
    connectPorts(road_39_2->car_out, intersection_38_2->car_in[2]);
    intersection_38_4 = std::make_shared<Intersection>(37, "intersection_38_4");
    addSubModel(intersection_38_4);
    connectPorts(intersection_38_4->q_send[1], road_38_5->q_recv);
    connectPorts(road_38_5->q_sans, intersection_38_4->q_rans[1]);
    connectPorts(intersection_38_4->car_out[1], road_38_5->car_in);
    connectPorts(intersection_38_4->q_send[2], road_39_4->q_recv);
    connectPorts(road_39_4->q_sans, intersection_38_4->q_rans[2]);
    connectPorts(intersection_38_4->car_out[2], road_39_4->car_in);
    connectPorts(road_38_3->q_send, intersection_38_4->q_recv[3]);
    connectPorts(intersection_38_4->q_sans[3], road_38_3->q_rans);
    connectPorts(road_38_3->car_out, intersection_38_4->car_in[3]);
    connectPorts(road_37_4->q_send, intersection_38_4->q_recv[0]);
    connectPorts(intersection_38_4->q_sans[0], road_37_4->q_rans);
    connectPorts(road_37_4->car_out, intersection_38_4->car_in[0]);
    intersection_38_6 = std::make_shared<Intersection>(37, "intersection_38_6");
    addSubModel(intersection_38_6);
    connectPorts(intersection_38_6->q_send[1], road_38_7->q_recv);
    connectPorts(road_38_7->q_sans, intersection_38_6->q_rans[1]);
    connectPorts(intersection_38_6->car_out[1], road_38_7->car_in);
    connectPorts(intersection_38_6->q_send[0], road_37_6->q_recv);
    connectPorts(road_37_6->q_sans, intersection_38_6->q_rans[0]);
    connectPorts(intersection_38_6->car_out[0], road_37_6->car_in);
    connectPorts(road_38_5->q_send, intersection_38_6->q_recv[3]);
    connectPorts(intersection_38_6->q_sans[3], road_38_5->q_rans);
    connectPorts(road_38_5->car_out, intersection_38_6->car_in[3]);
    connectPorts(road_39_6->q_send, intersection_38_6->q_recv[2]);
    connectPorts(intersection_38_6->q_sans[2], road_39_6->q_rans);
    connectPorts(road_39_6->car_out, intersection_38_6->car_in[2]);
    intersection_38_8 = std::make_shared<Intersection>(37, "intersection_38_8");
    addSubModel(intersection_38_8);
    connectPorts(intersection_38_8->q_send[1], road_38_9->q_recv);
    connectPorts(road_38_9->q_sans, intersection_38_8->q_rans[1]);
    connectPorts(intersection_38_8->car_out[1], road_38_9->car_in);
    connectPorts(intersection_38_8->q_send[2], road_39_8->q_recv);
    connectPorts(road_39_8->q_sans, intersection_38_8->q_rans[2]);
    connectPorts(intersection_38_8->car_out[2], road_39_8->car_in);
    connectPorts(road_38_7->q_send, intersection_38_8->q_recv[3]);
    connectPorts(intersection_38_8->q_sans[3], road_38_7->q_rans);
    connectPorts(road_38_7->car_out, intersection_38_8->car_in[3]);
    connectPorts(road_37_8->q_send, intersection_38_8->q_recv[0]);
    connectPorts(intersection_38_8->q_sans[0], road_37_8->q_rans);
    connectPorts(road_37_8->car_out, intersection_38_8->car_in[0]);
    intersection_38_10 = std::make_shared<Intersection>(37, "intersection_38_10");
    addSubModel(intersection_38_10);
    connectPorts(intersection_38_10->q_send[1], road_38_11->q_recv);
    connectPorts(road_38_11->q_sans, intersection_38_10->q_rans[1]);
    connectPorts(intersection_38_10->car_out[1], road_38_11->car_in);
    connectPorts(intersection_38_10->q_send[0], road_37_10->q_recv);
    connectPorts(road_37_10->q_sans, intersection_38_10->q_rans[0]);
    connectPorts(intersection_38_10->car_out[0], road_37_10->car_in);
    connectPorts(road_38_9->q_send, intersection_38_10->q_recv[3]);
    connectPorts(intersection_38_10->q_sans[3], road_38_9->q_rans);
    connectPorts(road_38_9->car_out, intersection_38_10->car_in[3]);
    connectPorts(road_39_10->q_send, intersection_38_10->q_recv[2]);
    connectPorts(intersection_38_10->q_sans[2], road_39_10->q_rans);
    connectPorts(road_39_10->car_out, intersection_38_10->car_in[2]);
    intersection_40_2 = std::make_shared<Intersection>(39, "intersection_40_2");
    addSubModel(intersection_40_2);
    connectPorts(intersection_40_2->q_send[3], road_40_1->q_recv);
    connectPorts(road_40_1->q_sans, intersection_40_2->q_rans[3]);
    connectPorts(intersection_40_2->car_out[3], road_40_1->car_in);
    connectPorts(intersection_40_2->q_send[0], road_39_2->q_recv);
    connectPorts(road_39_2->q_sans, intersection_40_2->q_rans[0]);
    connectPorts(intersection_40_2->car_out[0], road_39_2->car_in);
    connectPorts(road_40_3->q_send, intersection_40_2->q_recv[1]);
    connectPorts(intersection_40_2->q_sans[1], road_40_3->q_rans);
    connectPorts(road_40_3->car_out, intersection_40_2->car_in[1]);
    connectPorts(road_41_2->q_send, intersection_40_2->q_recv[2]);
    connectPorts(intersection_40_2->q_sans[2], road_41_2->q_rans);
    connectPorts(road_41_2->car_out, intersection_40_2->car_in[2]);
    intersection_40_4 = std::make_shared<Intersection>(39, "intersection_40_4");
    addSubModel(intersection_40_4);
    connectPorts(intersection_40_4->q_send[3], road_40_3->q_recv);
    connectPorts(road_40_3->q_sans, intersection_40_4->q_rans[3]);
    connectPorts(intersection_40_4->car_out[3], road_40_3->car_in);
    connectPorts(intersection_40_4->q_send[2], road_41_4->q_recv);
    connectPorts(road_41_4->q_sans, intersection_40_4->q_rans[2]);
    connectPorts(intersection_40_4->car_out[2], road_41_4->car_in);
    connectPorts(road_40_5->q_send, intersection_40_4->q_recv[1]);
    connectPorts(intersection_40_4->q_sans[1], road_40_5->q_rans);
    connectPorts(road_40_5->car_out, intersection_40_4->car_in[1]);
    connectPorts(road_39_4->q_send, intersection_40_4->q_recv[0]);
    connectPorts(intersection_40_4->q_sans[0], road_39_4->q_rans);
    connectPorts(road_39_4->car_out, intersection_40_4->car_in[0]);
    intersection_40_6 = std::make_shared<Intersection>(39, "intersection_40_6");
    addSubModel(intersection_40_6);
    connectPorts(intersection_40_6->q_send[3], road_40_5->q_recv);
    connectPorts(road_40_5->q_sans, intersection_40_6->q_rans[3]);
    connectPorts(intersection_40_6->car_out[3], road_40_5->car_in);
    connectPorts(intersection_40_6->q_send[0], road_39_6->q_recv);
    connectPorts(road_39_6->q_sans, intersection_40_6->q_rans[0]);
    connectPorts(intersection_40_6->car_out[0], road_39_6->car_in);
    connectPorts(road_40_7->q_send, intersection_40_6->q_recv[1]);
    connectPorts(intersection_40_6->q_sans[1], road_40_7->q_rans);
    connectPorts(road_40_7->car_out, intersection_40_6->car_in[1]);
    connectPorts(road_41_6->q_send, intersection_40_6->q_recv[2]);
    connectPorts(intersection_40_6->q_sans[2], road_41_6->q_rans);
    connectPorts(road_41_6->car_out, intersection_40_6->car_in[2]);
    intersection_40_8 = std::make_shared<Intersection>(39, "intersection_40_8");
    addSubModel(intersection_40_8);
    connectPorts(intersection_40_8->q_send[3], road_40_7->q_recv);
    connectPorts(road_40_7->q_sans, intersection_40_8->q_rans[3]);
    connectPorts(intersection_40_8->car_out[3], road_40_7->car_in);
    connectPorts(intersection_40_8->q_send[2], road_41_8->q_recv);
    connectPorts(road_41_8->q_sans, intersection_40_8->q_rans[2]);
    connectPorts(intersection_40_8->car_out[2], road_41_8->car_in);
    connectPorts(road_40_9->q_send, intersection_40_8->q_recv[1]);
    connectPorts(intersection_40_8->q_sans[1], road_40_9->q_rans);
    connectPorts(road_40_9->car_out, intersection_40_8->car_in[1]);
    connectPorts(road_39_8->q_send, intersection_40_8->q_recv[0]);
    connectPorts(intersection_40_8->q_sans[0], road_39_8->q_rans);
    connectPorts(road_39_8->car_out, intersection_40_8->car_in[0]);
    intersection_40_10 = std::make_shared<Intersection>(39, "intersection_40_10");
    addSubModel(intersection_40_10);
    connectPorts(intersection_40_10->q_send[3], road_40_9->q_recv);
    connectPorts(road_40_9->q_sans, intersection_40_10->q_rans[3]);
    connectPorts(intersection_40_10->car_out[3], road_40_9->car_in);
    connectPorts(intersection_40_10->q_send[0], road_39_10->q_recv);
    connectPorts(road_39_10->q_sans, intersection_40_10->q_rans[0]);
    connectPorts(intersection_40_10->car_out[0], road_39_10->car_in);
    connectPorts(road_40_11->q_send, intersection_40_10->q_recv[1]);
    connectPorts(intersection_40_10->q_sans[1], road_40_11->q_rans);
    connectPorts(road_40_11->car_out, intersection_40_10->car_in[1]);
    connectPorts(road_41_10->q_send, intersection_40_10->q_recv[2]);
    connectPorts(intersection_40_10->q_sans[2], road_41_10->q_rans);
    connectPorts(road_41_10->car_out, intersection_40_10->car_in[2]);
    intersection_42_2 = std::make_shared<Intersection>(41, "intersection_42_2");
    addSubModel(intersection_42_2);
    connectPorts(intersection_42_2->q_send[1], road_42_3->q_recv);
    connectPorts(road_42_3->q_sans, intersection_42_2->q_rans[1]);
    connectPorts(intersection_42_2->car_out[1], road_42_3->car_in);
    connectPorts(intersection_42_2->q_send[0], road_41_2->q_recv);
    connectPorts(road_41_2->q_sans, intersection_42_2->q_rans[0]);
    connectPorts(intersection_42_2->car_out[0], road_41_2->car_in);
    connectPorts(road_42_1->q_send, intersection_42_2->q_recv[3]);
    connectPorts(intersection_42_2->q_sans[3], road_42_1->q_rans);
    connectPorts(road_42_1->car_out, intersection_42_2->car_in[3]);
    connectPorts(road_43_2->q_send, intersection_42_2->q_recv[2]);
    connectPorts(intersection_42_2->q_sans[2], road_43_2->q_rans);
    connectPorts(road_43_2->car_out, intersection_42_2->car_in[2]);
    intersection_42_4 = std::make_shared<Intersection>(41, "intersection_42_4");
    addSubModel(intersection_42_4);
    connectPorts(intersection_42_4->q_send[1], road_42_5->q_recv);
    connectPorts(road_42_5->q_sans, intersection_42_4->q_rans[1]);
    connectPorts(intersection_42_4->car_out[1], road_42_5->car_in);
    connectPorts(intersection_42_4->q_send[2], road_43_4->q_recv);
    connectPorts(road_43_4->q_sans, intersection_42_4->q_rans[2]);
    connectPorts(intersection_42_4->car_out[2], road_43_4->car_in);
    connectPorts(road_42_3->q_send, intersection_42_4->q_recv[3]);
    connectPorts(intersection_42_4->q_sans[3], road_42_3->q_rans);
    connectPorts(road_42_3->car_out, intersection_42_4->car_in[3]);
    connectPorts(road_41_4->q_send, intersection_42_4->q_recv[0]);
    connectPorts(intersection_42_4->q_sans[0], road_41_4->q_rans);
    connectPorts(road_41_4->car_out, intersection_42_4->car_in[0]);
    intersection_42_6 = std::make_shared<Intersection>(41, "intersection_42_6");
    addSubModel(intersection_42_6);
    connectPorts(intersection_42_6->q_send[1], road_42_7->q_recv);
    connectPorts(road_42_7->q_sans, intersection_42_6->q_rans[1]);
    connectPorts(intersection_42_6->car_out[1], road_42_7->car_in);
    connectPorts(intersection_42_6->q_send[0], road_41_6->q_recv);
    connectPorts(road_41_6->q_sans, intersection_42_6->q_rans[0]);
    connectPorts(intersection_42_6->car_out[0], road_41_6->car_in);
    connectPorts(road_42_5->q_send, intersection_42_6->q_recv[3]);
    connectPorts(intersection_42_6->q_sans[3], road_42_5->q_rans);
    connectPorts(road_42_5->car_out, intersection_42_6->car_in[3]);
    connectPorts(road_43_6->q_send, intersection_42_6->q_recv[2]);
    connectPorts(intersection_42_6->q_sans[2], road_43_6->q_rans);
    connectPorts(road_43_6->car_out, intersection_42_6->car_in[2]);
    intersection_42_8 = std::make_shared<Intersection>(41, "intersection_42_8");
    addSubModel(intersection_42_8);
    connectPorts(intersection_42_8->q_send[1], road_42_9->q_recv);
    connectPorts(road_42_9->q_sans, intersection_42_8->q_rans[1]);
    connectPorts(intersection_42_8->car_out[1], road_42_9->car_in);
    connectPorts(intersection_42_8->q_send[2], road_43_8->q_recv);
    connectPorts(road_43_8->q_sans, intersection_42_8->q_rans[2]);
    connectPorts(intersection_42_8->car_out[2], road_43_8->car_in);
    connectPorts(road_42_7->q_send, intersection_42_8->q_recv[3]);
    connectPorts(intersection_42_8->q_sans[3], road_42_7->q_rans);
    connectPorts(road_42_7->car_out, intersection_42_8->car_in[3]);
    connectPorts(road_41_8->q_send, intersection_42_8->q_recv[0]);
    connectPorts(intersection_42_8->q_sans[0], road_41_8->q_rans);
    connectPorts(road_41_8->car_out, intersection_42_8->car_in[0]);
    intersection_42_10 = std::make_shared<Intersection>(41, "intersection_42_10");
    addSubModel(intersection_42_10);
    connectPorts(intersection_42_10->q_send[1], road_42_11->q_recv);
    connectPorts(road_42_11->q_sans, intersection_42_10->q_rans[1]);
    connectPorts(intersection_42_10->car_out[1], road_42_11->car_in);
    connectPorts(intersection_42_10->q_send[0], road_41_10->q_recv);
    connectPorts(road_41_10->q_sans, intersection_42_10->q_rans[0]);
    connectPorts(intersection_42_10->car_out[0], road_41_10->car_in);
    connectPorts(road_42_9->q_send, intersection_42_10->q_recv[3]);
    connectPorts(intersection_42_10->q_sans[3], road_42_9->q_rans);
    connectPorts(road_42_9->car_out, intersection_42_10->car_in[3]);
    connectPorts(road_43_10->q_send, intersection_42_10->q_recv[2]);
    connectPorts(intersection_42_10->q_sans[2], road_43_10->q_rans);
    connectPorts(road_43_10->car_out, intersection_42_10->car_in[2]);
    intersection_44_2 = std::make_shared<Intersection>(43, "intersection_44_2");
    addSubModel(intersection_44_2);
    connectPorts(intersection_44_2->q_send[3], road_44_1->q_recv);
    connectPorts(road_44_1->q_sans, intersection_44_2->q_rans[3]);
    connectPorts(intersection_44_2->car_out[3], road_44_1->car_in);
    connectPorts(intersection_44_2->q_send[0], road_43_2->q_recv);
    connectPorts(road_43_2->q_sans, intersection_44_2->q_rans[0]);
    connectPorts(intersection_44_2->car_out[0], road_43_2->car_in);
    connectPorts(road_44_3->q_send, intersection_44_2->q_recv[1]);
    connectPorts(intersection_44_2->q_sans[1], road_44_3->q_rans);
    connectPorts(road_44_3->car_out, intersection_44_2->car_in[1]);
    connectPorts(road_45_2->q_send, intersection_44_2->q_recv[2]);
    connectPorts(intersection_44_2->q_sans[2], road_45_2->q_rans);
    connectPorts(road_45_2->car_out, intersection_44_2->car_in[2]);
    intersection_44_4 = std::make_shared<Intersection>(43, "intersection_44_4");
    addSubModel(intersection_44_4);
    connectPorts(intersection_44_4->q_send[3], road_44_3->q_recv);
    connectPorts(road_44_3->q_sans, intersection_44_4->q_rans[3]);
    connectPorts(intersection_44_4->car_out[3], road_44_3->car_in);
    connectPorts(intersection_44_4->q_send[2], road_45_4->q_recv);
    connectPorts(road_45_4->q_sans, intersection_44_4->q_rans[2]);
    connectPorts(intersection_44_4->car_out[2], road_45_4->car_in);
    connectPorts(road_44_5->q_send, intersection_44_4->q_recv[1]);
    connectPorts(intersection_44_4->q_sans[1], road_44_5->q_rans);
    connectPorts(road_44_5->car_out, intersection_44_4->car_in[1]);
    connectPorts(road_43_4->q_send, intersection_44_4->q_recv[0]);
    connectPorts(intersection_44_4->q_sans[0], road_43_4->q_rans);
    connectPorts(road_43_4->car_out, intersection_44_4->car_in[0]);
    intersection_44_6 = std::make_shared<Intersection>(43, "intersection_44_6");
    addSubModel(intersection_44_6);
    connectPorts(intersection_44_6->q_send[3], road_44_5->q_recv);
    connectPorts(road_44_5->q_sans, intersection_44_6->q_rans[3]);
    connectPorts(intersection_44_6->car_out[3], road_44_5->car_in);
    connectPorts(intersection_44_6->q_send[0], road_43_6->q_recv);
    connectPorts(road_43_6->q_sans, intersection_44_6->q_rans[0]);
    connectPorts(intersection_44_6->car_out[0], road_43_6->car_in);
    connectPorts(road_44_7->q_send, intersection_44_6->q_recv[1]);
    connectPorts(intersection_44_6->q_sans[1], road_44_7->q_rans);
    connectPorts(road_44_7->car_out, intersection_44_6->car_in[1]);
    connectPorts(road_45_6->q_send, intersection_44_6->q_recv[2]);
    connectPorts(intersection_44_6->q_sans[2], road_45_6->q_rans);
    connectPorts(road_45_6->car_out, intersection_44_6->car_in[2]);
    intersection_44_8 = std::make_shared<Intersection>(43, "intersection_44_8");
    addSubModel(intersection_44_8);
    connectPorts(intersection_44_8->q_send[3], road_44_7->q_recv);
    connectPorts(road_44_7->q_sans, intersection_44_8->q_rans[3]);
    connectPorts(intersection_44_8->car_out[3], road_44_7->car_in);
    connectPorts(intersection_44_8->q_send[2], road_45_8->q_recv);
    connectPorts(road_45_8->q_sans, intersection_44_8->q_rans[2]);
    connectPorts(intersection_44_8->car_out[2], road_45_8->car_in);
    connectPorts(road_44_9->q_send, intersection_44_8->q_recv[1]);
    connectPorts(intersection_44_8->q_sans[1], road_44_9->q_rans);
    connectPorts(road_44_9->car_out, intersection_44_8->car_in[1]);
    connectPorts(road_43_8->q_send, intersection_44_8->q_recv[0]);
    connectPorts(intersection_44_8->q_sans[0], road_43_8->q_rans);
    connectPorts(road_43_8->car_out, intersection_44_8->car_in[0]);
    intersection_44_10 = std::make_shared<Intersection>(43, "intersection_44_10");
    addSubModel(intersection_44_10);
    connectPorts(intersection_44_10->q_send[3], road_44_9->q_recv);
    connectPorts(road_44_9->q_sans, intersection_44_10->q_rans[3]);
    connectPorts(intersection_44_10->car_out[3], road_44_9->car_in);
    connectPorts(intersection_44_10->q_send[0], road_43_10->q_recv);
    connectPorts(road_43_10->q_sans, intersection_44_10->q_rans[0]);
    connectPorts(intersection_44_10->car_out[0], road_43_10->car_in);
    connectPorts(road_44_11->q_send, intersection_44_10->q_recv[1]);
    connectPorts(intersection_44_10->q_sans[1], road_44_11->q_rans);
    connectPorts(road_44_11->car_out, intersection_44_10->car_in[1]);
    connectPorts(road_45_10->q_send, intersection_44_10->q_recv[2]);
    connectPorts(intersection_44_10->q_sans[2], road_45_10->q_rans);
    connectPorts(road_45_10->car_out, intersection_44_10->car_in[2]);
    intersection_46_2 = std::make_shared<Intersection>(45, "intersection_46_2");
    addSubModel(intersection_46_2);
    connectPorts(intersection_46_2->q_send[1], road_46_3->q_recv);
    connectPorts(road_46_3->q_sans, intersection_46_2->q_rans[1]);
    connectPorts(intersection_46_2->car_out[1], road_46_3->car_in);
    connectPorts(intersection_46_2->q_send[0], road_45_2->q_recv);
    connectPorts(road_45_2->q_sans, intersection_46_2->q_rans[0]);
    connectPorts(intersection_46_2->car_out[0], road_45_2->car_in);
    connectPorts(road_46_1->q_send, intersection_46_2->q_recv[3]);
    connectPorts(intersection_46_2->q_sans[3], road_46_1->q_rans);
    connectPorts(road_46_1->car_out, intersection_46_2->car_in[3]);
    connectPorts(road_47_2->q_send, intersection_46_2->q_recv[2]);
    connectPorts(intersection_46_2->q_sans[2], road_47_2->q_rans);
    connectPorts(road_47_2->car_out, intersection_46_2->car_in[2]);
    intersection_46_4 = std::make_shared<Intersection>(45, "intersection_46_4");
    addSubModel(intersection_46_4);
    connectPorts(intersection_46_4->q_send[1], road_46_5->q_recv);
    connectPorts(road_46_5->q_sans, intersection_46_4->q_rans[1]);
    connectPorts(intersection_46_4->car_out[1], road_46_5->car_in);
    connectPorts(intersection_46_4->q_send[2], road_47_4->q_recv);
    connectPorts(road_47_4->q_sans, intersection_46_4->q_rans[2]);
    connectPorts(intersection_46_4->car_out[2], road_47_4->car_in);
    connectPorts(road_46_3->q_send, intersection_46_4->q_recv[3]);
    connectPorts(intersection_46_4->q_sans[3], road_46_3->q_rans);
    connectPorts(road_46_3->car_out, intersection_46_4->car_in[3]);
    connectPorts(road_45_4->q_send, intersection_46_4->q_recv[0]);
    connectPorts(intersection_46_4->q_sans[0], road_45_4->q_rans);
    connectPorts(road_45_4->car_out, intersection_46_4->car_in[0]);
    intersection_46_6 = std::make_shared<Intersection>(45, "intersection_46_6");
    addSubModel(intersection_46_6);
    connectPorts(intersection_46_6->q_send[1], road_46_7->q_recv);
    connectPorts(road_46_7->q_sans, intersection_46_6->q_rans[1]);
    connectPorts(intersection_46_6->car_out[1], road_46_7->car_in);
    connectPorts(intersection_46_6->q_send[0], road_45_6->q_recv);
    connectPorts(road_45_6->q_sans, intersection_46_6->q_rans[0]);
    connectPorts(intersection_46_6->car_out[0], road_45_6->car_in);
    connectPorts(road_46_5->q_send, intersection_46_6->q_recv[3]);
    connectPorts(intersection_46_6->q_sans[3], road_46_5->q_rans);
    connectPorts(road_46_5->car_out, intersection_46_6->car_in[3]);
    connectPorts(road_47_6->q_send, intersection_46_6->q_recv[2]);
    connectPorts(intersection_46_6->q_sans[2], road_47_6->q_rans);
    connectPorts(road_47_6->car_out, intersection_46_6->car_in[2]);
    intersection_46_8 = std::make_shared<Intersection>(45, "intersection_46_8");
    addSubModel(intersection_46_8);
    connectPorts(intersection_46_8->q_send[1], road_46_9->q_recv);
    connectPorts(road_46_9->q_sans, intersection_46_8->q_rans[1]);
    connectPorts(intersection_46_8->car_out[1], road_46_9->car_in);
    connectPorts(intersection_46_8->q_send[2], road_47_8->q_recv);
    connectPorts(road_47_8->q_sans, intersection_46_8->q_rans[2]);
    connectPorts(intersection_46_8->car_out[2], road_47_8->car_in);
    connectPorts(road_46_7->q_send, intersection_46_8->q_recv[3]);
    connectPorts(intersection_46_8->q_sans[3], road_46_7->q_rans);
    connectPorts(road_46_7->car_out, intersection_46_8->car_in[3]);
    connectPorts(road_45_8->q_send, intersection_46_8->q_recv[0]);
    connectPorts(intersection_46_8->q_sans[0], road_45_8->q_rans);
    connectPorts(road_45_8->car_out, intersection_46_8->car_in[0]);
    intersection_46_10 = std::make_shared<Intersection>(45, "intersection_46_10");
    addSubModel(intersection_46_10);
    connectPorts(intersection_46_10->q_send[1], road_46_11->q_recv);
    connectPorts(road_46_11->q_sans, intersection_46_10->q_rans[1]);
    connectPorts(intersection_46_10->car_out[1], road_46_11->car_in);
    connectPorts(intersection_46_10->q_send[0], road_45_10->q_recv);
    connectPorts(road_45_10->q_sans, intersection_46_10->q_rans[0]);
    connectPorts(intersection_46_10->car_out[0], road_45_10->car_in);
    connectPorts(road_46_9->q_send, intersection_46_10->q_recv[3]);
    connectPorts(intersection_46_10->q_sans[3], road_46_9->q_rans);
    connectPorts(road_46_9->car_out, intersection_46_10->car_in[3]);
    connectPorts(road_47_10->q_send, intersection_46_10->q_recv[2]);
    connectPorts(intersection_46_10->q_sans[2], road_47_10->q_rans);
    connectPorts(road_47_10->car_out, intersection_46_10->car_in[2]);
    intersection_48_2 = std::make_shared<Intersection>(47, "intersection_48_2");
    addSubModel(intersection_48_2);
    connectPorts(intersection_48_2->q_send[3], road_48_1->q_recv);
    connectPorts(road_48_1->q_sans, intersection_48_2->q_rans[3]);
    connectPorts(intersection_48_2->car_out[3], road_48_1->car_in);
    connectPorts(intersection_48_2->q_send[0], road_47_2->q_recv);
    connectPorts(road_47_2->q_sans, intersection_48_2->q_rans[0]);
    connectPorts(intersection_48_2->car_out[0], road_47_2->car_in);
    connectPorts(road_48_3->q_send, intersection_48_2->q_recv[1]);
    connectPorts(intersection_48_2->q_sans[1], road_48_3->q_rans);
    connectPorts(road_48_3->car_out, intersection_48_2->car_in[1]);
    connectPorts(road_49_2->q_send, intersection_48_2->q_recv[2]);
    connectPorts(intersection_48_2->q_sans[2], road_49_2->q_rans);
    connectPorts(road_49_2->car_out, intersection_48_2->car_in[2]);
    intersection_48_4 = std::make_shared<Intersection>(47, "intersection_48_4");
    addSubModel(intersection_48_4);
    connectPorts(intersection_48_4->q_send[3], road_48_3->q_recv);
    connectPorts(road_48_3->q_sans, intersection_48_4->q_rans[3]);
    connectPorts(intersection_48_4->car_out[3], road_48_3->car_in);
    connectPorts(intersection_48_4->q_send[2], road_49_4->q_recv);
    connectPorts(road_49_4->q_sans, intersection_48_4->q_rans[2]);
    connectPorts(intersection_48_4->car_out[2], road_49_4->car_in);
    connectPorts(road_48_5->q_send, intersection_48_4->q_recv[1]);
    connectPorts(intersection_48_4->q_sans[1], road_48_5->q_rans);
    connectPorts(road_48_5->car_out, intersection_48_4->car_in[1]);
    connectPorts(road_47_4->q_send, intersection_48_4->q_recv[0]);
    connectPorts(intersection_48_4->q_sans[0], road_47_4->q_rans);
    connectPorts(road_47_4->car_out, intersection_48_4->car_in[0]);
    intersection_48_6 = std::make_shared<Intersection>(47, "intersection_48_6");
    addSubModel(intersection_48_6);
    connectPorts(intersection_48_6->q_send[3], road_48_5->q_recv);
    connectPorts(road_48_5->q_sans, intersection_48_6->q_rans[3]);
    connectPorts(intersection_48_6->car_out[3], road_48_5->car_in);
    connectPorts(intersection_48_6->q_send[0], road_47_6->q_recv);
    connectPorts(road_47_6->q_sans, intersection_48_6->q_rans[0]);
    connectPorts(intersection_48_6->car_out[0], road_47_6->car_in);
    connectPorts(road_48_7->q_send, intersection_48_6->q_recv[1]);
    connectPorts(intersection_48_6->q_sans[1], road_48_7->q_rans);
    connectPorts(road_48_7->car_out, intersection_48_6->car_in[1]);
    connectPorts(road_49_6->q_send, intersection_48_6->q_recv[2]);
    connectPorts(intersection_48_6->q_sans[2], road_49_6->q_rans);
    connectPorts(road_49_6->car_out, intersection_48_6->car_in[2]);
    intersection_48_8 = std::make_shared<Intersection>(47, "intersection_48_8");
    addSubModel(intersection_48_8);
    connectPorts(intersection_48_8->q_send[3], road_48_7->q_recv);
    connectPorts(road_48_7->q_sans, intersection_48_8->q_rans[3]);
    connectPorts(intersection_48_8->car_out[3], road_48_7->car_in);
    connectPorts(intersection_48_8->q_send[2], road_49_8->q_recv);
    connectPorts(road_49_8->q_sans, intersection_48_8->q_rans[2]);
    connectPorts(intersection_48_8->car_out[2], road_49_8->car_in);
    connectPorts(road_48_9->q_send, intersection_48_8->q_recv[1]);
    connectPorts(intersection_48_8->q_sans[1], road_48_9->q_rans);
    connectPorts(road_48_9->car_out, intersection_48_8->car_in[1]);
    connectPorts(road_47_8->q_send, intersection_48_8->q_recv[0]);
    connectPorts(intersection_48_8->q_sans[0], road_47_8->q_rans);
    connectPorts(road_47_8->car_out, intersection_48_8->car_in[0]);
    intersection_48_10 = std::make_shared<Intersection>(47, "intersection_48_10");
    addSubModel(intersection_48_10);
    connectPorts(intersection_48_10->q_send[3], road_48_9->q_recv);
    connectPorts(road_48_9->q_sans, intersection_48_10->q_rans[3]);
    connectPorts(intersection_48_10->car_out[3], road_48_9->car_in);
    connectPorts(intersection_48_10->q_send[0], road_47_10->q_recv);
    connectPorts(road_47_10->q_sans, intersection_48_10->q_rans[0]);
    connectPorts(intersection_48_10->car_out[0], road_47_10->car_in);
    connectPorts(road_48_11->q_send, intersection_48_10->q_recv[1]);
    connectPorts(intersection_48_10->q_sans[1], road_48_11->q_rans);
    connectPorts(road_48_11->car_out, intersection_48_10->car_in[1]);
    connectPorts(road_49_10->q_send, intersection_48_10->q_recv[2]);
    connectPorts(intersection_48_10->q_sans[2], road_49_10->q_rans);
    connectPorts(road_49_10->car_out, intersection_48_10->car_in[2]);
    intersection_50_2 = std::make_shared<Intersection>(49, "intersection_50_2");
    addSubModel(intersection_50_2);
    connectPorts(intersection_50_2->q_send[1], road_50_3->q_recv);
    connectPorts(road_50_3->q_sans, intersection_50_2->q_rans[1]);
    connectPorts(intersection_50_2->car_out[1], road_50_3->car_in);
    connectPorts(intersection_50_2->q_send[0], road_49_2->q_recv);
    connectPorts(road_49_2->q_sans, intersection_50_2->q_rans[0]);
    connectPorts(intersection_50_2->car_out[0], road_49_2->car_in);
    connectPorts(road_50_1->q_send, intersection_50_2->q_recv[3]);
    connectPorts(intersection_50_2->q_sans[3], road_50_1->q_rans);
    connectPorts(road_50_1->car_out, intersection_50_2->car_in[3]);
    connectPorts(road_51_2->q_send, intersection_50_2->q_recv[2]);
    connectPorts(intersection_50_2->q_sans[2], road_51_2->q_rans);
    connectPorts(road_51_2->car_out, intersection_50_2->car_in[2]);
    intersection_50_4 = std::make_shared<Intersection>(49, "intersection_50_4");
    addSubModel(intersection_50_4);
    connectPorts(intersection_50_4->q_send[1], road_50_5->q_recv);
    connectPorts(road_50_5->q_sans, intersection_50_4->q_rans[1]);
    connectPorts(intersection_50_4->car_out[1], road_50_5->car_in);
    connectPorts(intersection_50_4->q_send[2], road_51_4->q_recv);
    connectPorts(road_51_4->q_sans, intersection_50_4->q_rans[2]);
    connectPorts(intersection_50_4->car_out[2], road_51_4->car_in);
    connectPorts(road_50_3->q_send, intersection_50_4->q_recv[3]);
    connectPorts(intersection_50_4->q_sans[3], road_50_3->q_rans);
    connectPorts(road_50_3->car_out, intersection_50_4->car_in[3]);
    connectPorts(road_49_4->q_send, intersection_50_4->q_recv[0]);
    connectPorts(intersection_50_4->q_sans[0], road_49_4->q_rans);
    connectPorts(road_49_4->car_out, intersection_50_4->car_in[0]);
    intersection_50_6 = std::make_shared<Intersection>(49, "intersection_50_6");
    addSubModel(intersection_50_6);
    connectPorts(intersection_50_6->q_send[1], road_50_7->q_recv);
    connectPorts(road_50_7->q_sans, intersection_50_6->q_rans[1]);
    connectPorts(intersection_50_6->car_out[1], road_50_7->car_in);
    connectPorts(intersection_50_6->q_send[0], road_49_6->q_recv);
    connectPorts(road_49_6->q_sans, intersection_50_6->q_rans[0]);
    connectPorts(intersection_50_6->car_out[0], road_49_6->car_in);
    connectPorts(road_50_5->q_send, intersection_50_6->q_recv[3]);
    connectPorts(intersection_50_6->q_sans[3], road_50_5->q_rans);
    connectPorts(road_50_5->car_out, intersection_50_6->car_in[3]);
    connectPorts(road_51_6->q_send, intersection_50_6->q_recv[2]);
    connectPorts(intersection_50_6->q_sans[2], road_51_6->q_rans);
    connectPorts(road_51_6->car_out, intersection_50_6->car_in[2]);
    intersection_50_8 = std::make_shared<Intersection>(49, "intersection_50_8");
    addSubModel(intersection_50_8);
    connectPorts(intersection_50_8->q_send[1], road_50_9->q_recv);
    connectPorts(road_50_9->q_sans, intersection_50_8->q_rans[1]);
    connectPorts(intersection_50_8->car_out[1], road_50_9->car_in);
    connectPorts(intersection_50_8->q_send[2], road_51_8->q_recv);
    connectPorts(road_51_8->q_sans, intersection_50_8->q_rans[2]);
    connectPorts(intersection_50_8->car_out[2], road_51_8->car_in);
    connectPorts(road_50_7->q_send, intersection_50_8->q_recv[3]);
    connectPorts(intersection_50_8->q_sans[3], road_50_7->q_rans);
    connectPorts(road_50_7->car_out, intersection_50_8->car_in[3]);
    connectPorts(road_49_8->q_send, intersection_50_8->q_recv[0]);
    connectPorts(intersection_50_8->q_sans[0], road_49_8->q_rans);
    connectPorts(road_49_8->car_out, intersection_50_8->car_in[0]);
    intersection_50_10 = std::make_shared<Intersection>(49, "intersection_50_10");
    addSubModel(intersection_50_10);
    connectPorts(intersection_50_10->q_send[1], road_50_11->q_recv);
    connectPorts(road_50_11->q_sans, intersection_50_10->q_rans[1]);
    connectPorts(intersection_50_10->car_out[1], road_50_11->car_in);
    connectPorts(intersection_50_10->q_send[0], road_49_10->q_recv);
    connectPorts(road_49_10->q_sans, intersection_50_10->q_rans[0]);
    connectPorts(intersection_50_10->car_out[0], road_49_10->car_in);
    connectPorts(road_50_9->q_send, intersection_50_10->q_recv[3]);
    connectPorts(intersection_50_10->q_sans[3], road_50_9->q_rans);
    connectPorts(road_50_9->car_out, intersection_50_10->car_in[3]);
    connectPorts(road_51_10->q_send, intersection_50_10->q_recv[2]);
    connectPorts(intersection_50_10->q_sans[2], road_51_10->q_rans);
    connectPorts(road_51_10->car_out, intersection_50_10->car_in[2]);

    LOG_DEBUG("CITY: Added all intersections");

    std::vector<std::string> path_12_7 {"w", "s", "e", "e", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "e"};
    residential_12_7 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_12_7), 11, "residential_12_7", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_12_7);
    connectPorts(residential_12_7->q_send, road_12_7->q_recv_bs);
    connectPorts(residential_12_7->exit, road_12_7->entries);
    connectPorts(road_12_7->q_sans_bs, residential_12_7->q_rans);
    commercial_42_9 = std::make_shared<Commercial>(41, "commercial_42_9");
    addSubModel(commercial_42_9);
    connectPorts(road_42_9->exits, commercial_42_9->entry);
    connectPorts(commercial_42_9->toCollector, collector->car_in);
    std::vector<std::string> path_22_7 {"s", "s", "s", "s", "s", "w", "n"};
    residential_22_7 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_22_7), 21, "residential_22_7", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_22_7);
    connectPorts(residential_22_7->q_send, road_22_7->q_recv_bs);
    connectPorts(residential_22_7->exit, road_22_7->entries);
    connectPorts(road_22_7->q_sans_bs, residential_22_7->q_rans);
    commercial_31_6 = std::make_shared<Commercial>(30, "commercial_31_6");
    addSubModel(commercial_31_6);
    connectPorts(road_31_6->exits, commercial_31_6->entry);
    connectPorts(commercial_31_6->toCollector, collector->car_in);
    std::vector<std::string> path_10_9 {"n", "w", "w", "w", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "w", "w"};
    residential_10_9 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_10_9), 9, "residential_10_9", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_10_9);
    connectPorts(residential_10_9->q_send, road_10_9->q_recv_bs);
    connectPorts(residential_10_9->exit, road_10_9->entries);
    connectPorts(road_10_9->q_sans_bs, residential_10_9->q_rans);
    commercial_32_1 = std::make_shared<Commercial>(31, "commercial_32_1");
    addSubModel(commercial_32_1);
    connectPorts(road_32_1->exits, commercial_32_1->entry);
    connectPorts(commercial_32_1->toCollector, collector->car_in);
    std::vector<std::string> path_10_3 {"e", "e", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s"};
    residential_10_3 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_10_3), 9, "residential_10_3", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_10_3);
    connectPorts(residential_10_3->q_send, road_10_3->q_recv_bs);
    connectPorts(residential_10_3->exit, road_10_3->entries);
    connectPorts(road_10_3->q_sans_bs, residential_10_3->q_rans);
    commercial_33_8 = std::make_shared<Commercial>(32, "commercial_33_8");
    addSubModel(commercial_33_8);
    connectPorts(road_33_8->exits, commercial_33_8->entry);
    connectPorts(commercial_33_8->toCollector, collector->car_in);
    std::vector<std::string> path_22_5 {"e", "s", "w", "w", "s", "s", "s", "s", "s", "s", "s"};
    residential_22_5 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_22_5), 21, "residential_22_5", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_22_5);
    connectPorts(residential_22_5->q_send, road_22_5->q_recv_bs);
    connectPorts(residential_22_5->exit, road_22_5->entries);
    connectPorts(road_22_5->q_sans_bs, residential_22_5->q_rans);
    commercial_37_4 = std::make_shared<Commercial>(36, "commercial_37_4");
    addSubModel(commercial_37_4);
    connectPorts(road_37_4->exits, commercial_37_4->entry);
    connectPorts(commercial_37_4->toCollector, collector->car_in);
    std::vector<std::string> path_24_3 {"n", "e", "e", "e", "s", "s", "s", "s", "e", "n"};
    residential_24_3 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_24_3), 23, "residential_24_3", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_24_3);
    connectPorts(residential_24_3->q_send, road_24_3->q_recv_bs);
    connectPorts(residential_24_3->exit, road_24_3->entries);
    connectPorts(road_24_3->q_sans_bs, residential_24_3->q_rans);
    commercial_29_10 = std::make_shared<Commercial>(28, "commercial_29_10");
    addSubModel(commercial_29_10);
    connectPorts(road_29_10->exits, commercial_29_10->entry);
    connectPorts(commercial_29_10->toCollector, collector->car_in);
    std::vector<std::string> path_25_6 {"w", "s", "e", "e", "s", "s", "e"};
    residential_25_6 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_25_6), 24, "residential_25_6", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_25_6);
    connectPorts(residential_25_6->q_send, road_25_6->q_recv_bs);
    connectPorts(residential_25_6->exit, road_25_6->entries);
    connectPorts(road_25_6->q_sans_bs, residential_25_6->q_rans);
    commercial_30_9 = std::make_shared<Commercial>(29, "commercial_30_9");
    addSubModel(commercial_30_9);
    connectPorts(road_30_9->exits, commercial_30_9->entry);
    connectPorts(commercial_30_9->toCollector, collector->car_in);
    std::vector<std::string> path_25_4 {"e", "e", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "w"};
    residential_25_4 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_25_4), 24, "residential_25_4", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_25_4);
    connectPorts(residential_25_4->q_send, road_25_4->q_recv_bs);
    connectPorts(residential_25_4->exit, road_25_4->entries);
    connectPorts(road_25_4->q_sans_bs, residential_25_4->q_rans);
    commercial_48_7 = std::make_shared<Commercial>(47, "commercial_48_7");
    addSubModel(commercial_48_7);
    connectPorts(road_48_7->exits, commercial_48_7->entry);
    connectPorts(commercial_48_7->toCollector, collector->car_in);
    std::vector<std::string> path_3_2 {"e", "e", "e", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "w", "w"};
    residential_3_2 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_3_2), 2, "residential_3_2", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_3_2);
    connectPorts(residential_3_2->q_send, road_3_2->q_recv_bs);
    connectPorts(residential_3_2->exit, road_3_2->entries);
    connectPorts(road_3_2->q_sans_bs, residential_3_2->q_rans);
    commercial_40_5 = std::make_shared<Commercial>(39, "commercial_40_5");
    addSubModel(commercial_40_5);
    connectPorts(road_40_5->exits, commercial_40_5->entry);
    connectPorts(commercial_40_5->toCollector, collector->car_in);
    std::vector<std::string> path_17_6 {"w", "s", "e", "e", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "w", "n"};
    residential_17_6 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_17_6), 16, "residential_17_6", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_17_6);
    connectPorts(residential_17_6->q_send, road_17_6->q_recv_bs);
    connectPorts(residential_17_6->exit, road_17_6->entries);
    connectPorts(road_17_6->q_sans_bs, residential_17_6->q_rans);
    commercial_39_6 = std::make_shared<Commercial>(38, "commercial_39_6");
    addSubModel(commercial_39_6);
    connectPorts(road_39_6->exits, commercial_39_6->entry);
    connectPorts(commercial_39_6->toCollector, collector->car_in);
    std::vector<std::string> path_10_7 {"s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "w", "w"};
    residential_10_7 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_10_7), 9, "residential_10_7", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_10_7);
    connectPorts(residential_10_7->q_send, road_10_7->q_recv_bs);
    connectPorts(residential_10_7->exit, road_10_7->entries);
    connectPorts(road_10_7->q_sans_bs, residential_10_7->q_rans);
    commercial_36_5 = std::make_shared<Commercial>(35, "commercial_36_5");
    addSubModel(commercial_36_5);
    connectPorts(road_36_5->exits, commercial_36_5->entry);
    connectPorts(commercial_36_5->toCollector, collector->car_in);
    std::vector<std::string> path_12_3 {"n", "e", "s", "s", "s", "s", "s", "s", "s", "s", "s"};
    residential_12_3 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_12_3), 11, "residential_12_3", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_12_3);
    connectPorts(residential_12_3->q_send, road_12_3->q_recv_bs);
    connectPorts(residential_12_3->exit, road_12_3->entries);
    connectPorts(road_12_3->q_sans_bs, residential_12_3->q_rans);
    commercial_27_4 = std::make_shared<Commercial>(26, "commercial_27_4");
    addSubModel(commercial_27_4);
    connectPorts(road_27_4->exits, commercial_27_4->entry);
    connectPorts(commercial_27_4->toCollector, collector->car_in);
    std::vector<std::string> path_22_1 {"e", "e", "e", "s", "s", "s", "s", "s", "s", "e", "e"};
    residential_22_1 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_22_1), 21, "residential_22_1", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_22_1);
    connectPorts(residential_22_1->q_send, road_22_1->q_recv_bs);
    connectPorts(residential_22_1->exit, road_22_1->entries);
    connectPorts(road_22_1->q_sans_bs, residential_22_1->q_rans);
    commercial_34_11 = std::make_shared<Commercial>(33, "commercial_34_11");
    addSubModel(commercial_34_11);
    connectPorts(road_34_11->exits, commercial_34_11->entry);
    connectPorts(commercial_34_11->toCollector, collector->car_in);
    std::vector<std::string> path_22_3 {"s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "w", "n"};
    residential_22_3 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_22_3), 21, "residential_22_3", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_22_3);
    connectPorts(residential_22_3->q_send, road_22_3->q_recv_bs);
    connectPorts(residential_22_3->exit, road_22_3->entries);
    connectPorts(road_22_3->q_sans_bs, residential_22_3->q_rans);
    commercial_43_2 = std::make_shared<Commercial>(42, "commercial_43_2");
    addSubModel(commercial_43_2);
    connectPorts(road_43_2->exits, commercial_43_2->entry);
    connectPorts(commercial_43_2->toCollector, collector->car_in);
    std::vector<std::string> path_18_1 {"e", "e", "e", "s", "s", "s", "s", "s", "s", "s", "s", "e", "n"};
    residential_18_1 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_18_1), 17, "residential_18_1", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_18_1);
    connectPorts(residential_18_1->q_send, road_18_1->q_recv_bs);
    connectPorts(residential_18_1->exit, road_18_1->entries);
    connectPorts(road_18_1->q_sans_bs, residential_18_1->q_rans);
    commercial_33_10 = std::make_shared<Commercial>(32, "commercial_33_10");
    addSubModel(commercial_33_10);
    connectPorts(road_33_10->exits, commercial_33_10->entry);
    connectPorts(commercial_33_10->toCollector, collector->car_in);
    std::vector<std::string> path_23_4 {"s", "s", "s", "s", "s", "s", "s", "s", "s"};
    residential_23_4 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_23_4), 22, "residential_23_4", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_23_4);
    connectPorts(residential_23_4->q_send, road_23_4->q_recv_bs);
    connectPorts(residential_23_4->exit, road_23_4->entries);
    connectPorts(road_23_4->q_sans_bs, residential_23_4->q_rans);
    commercial_41_4 = std::make_shared<Commercial>(40, "commercial_41_4");
    addSubModel(commercial_41_4);
    connectPorts(road_41_4->exits, commercial_41_4->entry);
    connectPorts(commercial_41_4->toCollector, collector->car_in);
    std::vector<std::string> path_5_6 {"w", "s", "e", "e", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "w", "n"};
    residential_5_6 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_5_6), 4, "residential_5_6", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_5_6);
    connectPorts(residential_5_6->q_send, road_5_6->q_recv_bs);
    connectPorts(residential_5_6->exit, road_5_6->entries);
    connectPorts(road_5_6->q_sans_bs, residential_5_6->q_rans);
    commercial_27_6 = std::make_shared<Commercial>(26, "commercial_27_6");
    addSubModel(commercial_27_6);
    connectPorts(road_27_6->exits, commercial_27_6->entry);
    connectPorts(commercial_27_6->toCollector, collector->car_in);
    std::vector<std::string> path_19_8 {"s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "e", "n", "w"};
    residential_19_8 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_19_8), 18, "residential_19_8", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_19_8);
    connectPorts(residential_19_8->q_send, road_19_8->q_recv_bs);
    connectPorts(residential_19_8->exit, road_19_8->entries);
    connectPorts(road_19_8->q_sans_bs, residential_19_8->q_rans);
    commercial_48_9 = std::make_shared<Commercial>(47, "commercial_48_9");
    addSubModel(commercial_48_9);
    connectPorts(road_48_9->exits, commercial_48_9->entry);
    connectPorts(commercial_48_9->toCollector, collector->car_in);
    std::vector<std::string> path_8_9 {"w", "w", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "w"};
    residential_8_9 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_8_9), 7, "residential_8_9", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_8_9);
    connectPorts(residential_8_9->q_send, road_8_9->q_recv_bs);
    connectPorts(residential_8_9->exit, road_8_9->entries);
    connectPorts(road_8_9->q_sans_bs, residential_8_9->q_rans);
    commercial_36_3 = std::make_shared<Commercial>(35, "commercial_36_3");
    addSubModel(commercial_36_3);
    connectPorts(road_36_3->exits, commercial_36_3->entry);
    connectPorts(commercial_36_3->toCollector, collector->car_in);
    std::vector<std::string> path_25_8 {"s", "w", "w", "s", "s", "s", "e", "n"};
    residential_25_8 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_25_8), 24, "residential_25_8", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_25_8);
    connectPorts(residential_25_8->q_send, road_25_8->q_recv_bs);
    connectPorts(residential_25_8->exit, road_25_8->entries);
    connectPorts(road_25_8->q_sans_bs, residential_25_8->q_rans);
    commercial_33_6 = std::make_shared<Commercial>(32, "commercial_33_6");
    addSubModel(commercial_33_6);
    connectPorts(road_33_6->exits, commercial_33_6->entry);
    connectPorts(commercial_33_6->toCollector, collector->car_in);
    std::vector<std::string> path_18_7 {"s", "w", "w", "s", "s", "s", "s", "w", "w"};
    residential_18_7 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_18_7), 17, "residential_18_7", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_18_7);
    connectPorts(residential_18_7->q_send, road_18_7->q_recv_bs);
    connectPorts(residential_18_7->exit, road_18_7->entries);
    connectPorts(road_18_7->q_sans_bs, residential_18_7->q_rans);
    commercial_28_1 = std::make_shared<Commercial>(27, "commercial_28_1");
    addSubModel(commercial_28_1);
    connectPorts(road_28_1->exits, commercial_28_1->entry);
    connectPorts(commercial_28_1->toCollector, collector->car_in);
    std::vector<std::string> path_24_5 {"s", "e", "e", "s", "s", "e", "n", "n"};
    residential_24_5 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_24_5), 23, "residential_24_5", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_24_5);
    connectPorts(residential_24_5->q_send, road_24_5->q_recv_bs);
    connectPorts(residential_24_5->exit, road_24_5->entries);
    connectPorts(road_24_5->q_sans_bs, residential_24_5->q_rans);
    commercial_27_10 = std::make_shared<Commercial>(26, "commercial_27_10");
    addSubModel(commercial_27_10);
    connectPorts(road_27_10->exits, commercial_27_10->entry);
    connectPorts(commercial_27_10->toCollector, collector->car_in);
    std::vector<std::string> path_16_11 {"w", "w", "w", "s", "s", "s", "s", "s", "s", "s", "s", "s"};
    residential_16_11 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_16_11), 15, "residential_16_11", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_16_11);
    connectPorts(residential_16_11->q_send, road_16_11->q_recv_bs);
    connectPorts(residential_16_11->exit, road_16_11->entries);
    connectPorts(road_16_11->q_sans_bs, residential_16_11->q_rans);
    commercial_33_4 = std::make_shared<Commercial>(32, "commercial_33_4");
    addSubModel(commercial_33_4);
    connectPorts(road_33_4->exits, commercial_33_4->entry);
    connectPorts(commercial_33_4->toCollector, collector->car_in);
    std::vector<std::string> path_7_10 {"n", "w", "w", "w", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "w"};
    residential_7_10 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_7_10), 6, "residential_7_10", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_7_10);
    connectPorts(residential_7_10->q_send, road_7_10->q_recv_bs);
    connectPorts(residential_7_10->exit, road_7_10->entries);
    connectPorts(road_7_10->q_sans_bs, residential_7_10->q_rans);
    commercial_32_3 = std::make_shared<Commercial>(31, "commercial_32_3");
    addSubModel(commercial_32_3);
    connectPorts(road_32_3->exits, commercial_32_3->entry);
    connectPorts(commercial_32_3->toCollector, collector->car_in);
    std::vector<std::string> path_25_2 {"n", "e", "s", "s", "s", "s", "s", "s", "s"};
    residential_25_2 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_25_2), 24, "residential_25_2", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_25_2);
    connectPorts(residential_25_2->q_send, road_25_2->q_recv_bs);
    connectPorts(residential_25_2->exit, road_25_2->entries);
    connectPorts(road_25_2->q_sans_bs, residential_25_2->q_rans);
    commercial_35_4 = std::make_shared<Commercial>(34, "commercial_35_4");
    addSubModel(commercial_35_4);
    connectPorts(road_35_4->exits, commercial_35_4->entry);
    connectPorts(commercial_35_4->toCollector, collector->car_in);
    std::vector<std::string> path_18_9 {"n", "w", "w", "w", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s"};
    residential_18_9 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_18_9), 17, "residential_18_9", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_18_9);
    connectPorts(residential_18_9->q_send, road_18_9->q_recv_bs);
    connectPorts(residential_18_9->exit, road_18_9->entries);
    connectPorts(road_18_9->q_sans_bs, residential_18_9->q_rans);
    commercial_51_4 = std::make_shared<Commercial>(49, "commercial_51_4");
    addSubModel(commercial_51_4);
    connectPorts(road_51_4->exits, commercial_51_4->entry);
    connectPorts(commercial_51_4->toCollector, collector->car_in);
    std::vector<std::string> path_14_3 {"s", "s", "s", "s", "s", "s", "s", "s"};
    residential_14_3 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_14_3), 13, "residential_14_3", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_14_3);
    connectPorts(residential_14_3->q_send, road_14_3->q_recv_bs);
    connectPorts(residential_14_3->exit, road_14_3->entries);
    connectPorts(road_14_3->q_sans_bs, residential_14_3->q_rans);
    commercial_29_4 = std::make_shared<Commercial>(28, "commercial_29_4");
    addSubModel(commercial_29_4);
    connectPorts(road_29_4->exits, commercial_29_4->entry);
    connectPorts(commercial_29_4->toCollector, collector->car_in);
    std::vector<std::string> path_7_6 {"e", "s", "w", "w", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "w", "n"};
    residential_7_6 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_7_6), 6, "residential_7_6", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_7_6);
    connectPorts(residential_7_6->q_send, road_7_6->q_recv_bs);
    connectPorts(residential_7_6->exit, road_7_6->entries);
    connectPorts(road_7_6->q_sans_bs, residential_7_6->q_rans);
    commercial_39_2 = std::make_shared<Commercial>(38, "commercial_39_2");
    addSubModel(commercial_39_2);
    connectPorts(road_39_2->exits, commercial_39_2->entry);
    connectPorts(commercial_39_2->toCollector, collector->car_in);
    std::vector<std::string> path_2_7 {"s", "w", "w", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "w", "n", "n"};
    residential_2_7 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_2_7), 1, "residential_2_7", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_2_7);
    connectPorts(residential_2_7->q_send, road_2_7->q_recv_bs);
    connectPorts(residential_2_7->exit, road_2_7->entries);
    connectPorts(road_2_7->q_sans_bs, residential_2_7->q_rans);
    commercial_41_2 = std::make_shared<Commercial>(40, "commercial_41_2");
    addSubModel(commercial_41_2);
    connectPorts(road_41_2->exits, commercial_41_2->entry);
    connectPorts(commercial_41_2->toCollector, collector->car_in);
    std::vector<std::string> path_9_8 {"s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "w", "w"};
    residential_9_8 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_9_8), 8, "residential_9_8", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_9_8);
    connectPorts(residential_9_8->q_send, road_9_8->q_recv_bs);
    connectPorts(residential_9_8->exit, road_9_8->entries);
    connectPorts(road_9_8->q_sans_bs, residential_9_8->q_rans);
    commercial_48_5 = std::make_shared<Commercial>(47, "commercial_48_5");
    addSubModel(commercial_48_5);
    connectPorts(road_48_5->exits, commercial_48_5->entry);
    connectPorts(commercial_48_5->toCollector, collector->car_in);
    std::vector<std::string> path_4_7 {"w", "s", "e", "e", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s"};
    residential_4_7 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_4_7), 3, "residential_4_7", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_4_7);
    connectPorts(residential_4_7->q_send, road_4_7->q_recv_bs);
    connectPorts(residential_4_7->exit, road_4_7->entries);
    connectPorts(road_4_7->q_sans_bs, residential_4_7->q_rans);
    commercial_47_8 = std::make_shared<Commercial>(46, "commercial_47_8");
    addSubModel(commercial_47_8);
    connectPorts(road_47_8->exits, commercial_47_8->entry);
    connectPorts(commercial_47_8->toCollector, collector->car_in);
    std::vector<std::string> path_7_8 {"w", "w", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "e", "e"};
    residential_7_8 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_7_8), 6, "residential_7_8", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_7_8);
    connectPorts(residential_7_8->q_send, road_7_8->q_recv_bs);
    connectPorts(residential_7_8->exit, road_7_8->entries);
    connectPorts(road_7_8->q_sans_bs, residential_7_8->q_rans);
    commercial_50_7 = std::make_shared<Commercial>(49, "commercial_50_7");
    addSubModel(commercial_50_7);
    connectPorts(road_50_7->exits, commercial_50_7->entry);
    connectPorts(commercial_50_7->toCollector, collector->car_in);
    std::vector<std::string> path_14_1 {"e", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "e", "n"};
    residential_14_1 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_14_1), 13, "residential_14_1", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_14_1);
    connectPorts(residential_14_1->q_send, road_14_1->q_recv_bs);
    connectPorts(residential_14_1->exit, road_14_1->entries);
    connectPorts(road_14_1->q_sans_bs, residential_14_1->q_rans);
    commercial_37_6 = std::make_shared<Commercial>(36, "commercial_37_6");
    addSubModel(commercial_37_6);
    connectPorts(road_37_6->exits, commercial_37_6->entry);
    connectPorts(commercial_37_6->toCollector, collector->car_in);
    std::vector<std::string> path_15_10 {"n", "w", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "e", "n"};
    residential_15_10 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_15_10), 14, "residential_15_10", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_15_10);
    connectPorts(residential_15_10->q_send, road_15_10->q_recv_bs);
    connectPorts(residential_15_10->exit, road_15_10->entries);
    connectPorts(road_15_10->q_sans_bs, residential_15_10->q_rans);
    commercial_45_10 = std::make_shared<Commercial>(44, "commercial_45_10");
    addSubModel(commercial_45_10);
    connectPorts(road_45_10->exits, commercial_45_10->entry);
    connectPorts(commercial_45_10->toCollector, collector->car_in);
    std::vector<std::string> path_14_5 {"e", "s", "s", "s", "s", "s", "s", "e", "e"};
    residential_14_5 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_14_5), 13, "residential_14_5", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_14_5);
    connectPorts(residential_14_5->q_send, road_14_5->q_recv_bs);
    connectPorts(residential_14_5->exit, road_14_5->entries);
    connectPorts(road_14_5->q_sans_bs, residential_14_5->q_rans);
    commercial_26_11 = std::make_shared<Commercial>(25, "commercial_26_11");
    addSubModel(commercial_26_11);
    connectPorts(road_26_11->exits, commercial_26_11->entry);
    connectPorts(commercial_26_11->toCollector, collector->car_in);
    std::vector<std::string> path_2_5 {"e", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "e", "n", "n"};
    residential_2_5 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_2_5), 1, "residential_2_5", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_2_5);
    connectPorts(residential_2_5->q_send, road_2_5->q_recv_bs);
    connectPorts(residential_2_5->exit, road_2_5->entries);
    connectPorts(road_2_5->q_sans_bs, residential_2_5->q_rans);
    commercial_39_10 = std::make_shared<Commercial>(38, "commercial_39_10");
    addSubModel(commercial_39_10);
    connectPorts(road_39_10->exits, commercial_39_10->entry);
    connectPorts(commercial_39_10->toCollector, collector->car_in);
    std::vector<std::string> path_12_11 {"w", "w", "w", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "w"};
    residential_12_11 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_12_11), 11, "residential_12_11", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_12_11);
    connectPorts(residential_12_11->q_send, road_12_11->q_recv_bs);
    connectPorts(residential_12_11->exit, road_12_11->entries);
    connectPorts(road_12_11->q_sans_bs, residential_12_11->q_rans);
    commercial_48_3 = std::make_shared<Commercial>(47, "commercial_48_3");
    addSubModel(commercial_48_3);
    connectPorts(road_48_3->exits, commercial_48_3->entry);
    connectPorts(commercial_48_3->toCollector, collector->car_in);
    std::vector<std::string> path_21_4 {"s", "s", "s", "s", "e", "n"};
    residential_21_4 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_21_4), 20, "residential_21_4", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_21_4);
    connectPorts(residential_21_4->q_send, road_21_4->q_recv_bs);
    connectPorts(residential_21_4->exit, road_21_4->entries);
    connectPorts(road_21_4->q_sans_bs, residential_21_4->q_rans);
    commercial_29_6 = std::make_shared<Commercial>(28, "commercial_29_6");
    addSubModel(commercial_29_6);
    connectPorts(road_29_6->exits, commercial_29_6->entry);
    connectPorts(commercial_29_6->toCollector, collector->car_in);
    std::vector<std::string> path_9_2 {"n", "e", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s"};
    residential_9_2 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_9_2), 8, "residential_9_2", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_9_2);
    connectPorts(residential_9_2->q_send, road_9_2->q_recv_bs);
    connectPorts(residential_9_2->exit, road_9_2->entries);
    connectPorts(road_9_2->q_sans_bs, residential_9_2->q_rans);
    commercial_43_4 = std::make_shared<Commercial>(42, "commercial_43_4");
    addSubModel(commercial_43_4);
    connectPorts(road_43_4->exits, commercial_43_4->entry);
    connectPorts(commercial_43_4->toCollector, collector->car_in);
    std::vector<std::string> path_11_4 {"s", "e", "e", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "w"};
    residential_11_4 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_11_4), 10, "residential_11_4", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_11_4);
    connectPorts(residential_11_4->q_send, road_11_4->q_recv_bs);
    connectPorts(residential_11_4->exit, road_11_4->entries);
    connectPorts(road_11_4->q_sans_bs, residential_11_4->q_rans);
    commercial_36_7 = std::make_shared<Commercial>(35, "commercial_36_7");
    addSubModel(commercial_36_7);
    connectPorts(road_36_7->exits, commercial_36_7->entry);
    connectPorts(commercial_36_7->toCollector, collector->car_in);
    std::vector<std::string> path_6_9 {"n", "w", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "e", "e"};
    residential_6_9 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_6_9), 5, "residential_6_9", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_6_9);
    connectPorts(residential_6_9->q_send, road_6_9->q_recv_bs);
    connectPorts(residential_6_9->exit, road_6_9->entries);
    connectPorts(road_6_9->q_sans_bs, residential_6_9->q_rans);
    commercial_30_11 = std::make_shared<Commercial>(29, "commercial_30_11");
    addSubModel(commercial_30_11);
    connectPorts(road_30_11->exits, commercial_30_11->entry);
    connectPorts(commercial_30_11->toCollector, collector->car_in);
    std::vector<std::string> path_4_3 {"n", "e", "e", "e", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "e"};
    residential_4_3 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_4_3), 3, "residential_4_3", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_4_3);
    connectPorts(residential_4_3->q_send, road_4_3->q_recv_bs);
    connectPorts(residential_4_3->exit, road_4_3->entries);
    connectPorts(road_4_3->q_sans_bs, residential_4_3->q_rans);
    commercial_26_9 = std::make_shared<Commercial>(25, "commercial_26_9");
    addSubModel(commercial_26_9);
    connectPorts(road_26_9->exits, commercial_26_9->entry);
    connectPorts(commercial_26_9->toCollector, collector->car_in);
    std::vector<std::string> path_15_6 {"e", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "e", "n", "n"};
    residential_15_6 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_15_6), 14, "residential_15_6", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_15_6);
    connectPorts(residential_15_6->q_send, road_15_6->q_recv_bs);
    connectPorts(residential_15_6->exit, road_15_6->entries);
    connectPorts(road_15_6->q_sans_bs, residential_15_6->q_rans);
    commercial_31_10 = std::make_shared<Commercial>(30, "commercial_31_10");
    addSubModel(commercial_31_10);
    connectPorts(road_31_10->exits, commercial_31_10->entry);
    connectPorts(commercial_31_10->toCollector, collector->car_in);
    std::vector<std::string> path_10_5 {"e", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "w", "n"};
    residential_10_5 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_10_5), 9, "residential_10_5", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_10_5);
    connectPorts(residential_10_5->q_send, road_10_5->q_recv_bs);
    connectPorts(residential_10_5->exit, road_10_5->entries);
    connectPorts(road_10_5->q_sans_bs, residential_10_5->q_rans);
    commercial_47_6 = std::make_shared<Commercial>(46, "commercial_47_6");
    addSubModel(commercial_47_6);
    connectPorts(road_47_6->exits, commercial_47_6->entry);
    connectPorts(commercial_47_6->toCollector, collector->car_in);
    std::vector<std::string> path_9_10 {"w", "w", "w", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s"};
    residential_9_10 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_9_10), 8, "residential_9_10", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_9_10);
    connectPorts(residential_9_10->q_send, road_9_10->q_recv_bs);
    connectPorts(residential_9_10->exit, road_9_10->entries);
    connectPorts(road_9_10->q_sans_bs, residential_9_10->q_rans);
    commercial_49_4 = std::make_shared<Commercial>(48, "commercial_49_4");
    addSubModel(commercial_49_4);
    connectPorts(road_49_4->exits, commercial_49_4->entry);
    connectPorts(commercial_49_4->toCollector, collector->car_in);
    std::vector<std::string> path_9_4 {"s", "s", "s", "s", "s", "s", "s", "s", "s", "w", "n"};
    residential_9_4 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_9_4), 8, "residential_9_4", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_9_4);
    connectPorts(residential_9_4->q_send, road_9_4->q_recv_bs);
    connectPorts(residential_9_4->exit, road_9_4->entries);
    connectPorts(road_9_4->q_sans_bs, residential_9_4->q_rans);
    commercial_27_2 = std::make_shared<Commercial>(26, "commercial_27_2");
    addSubModel(commercial_27_2);
    connectPorts(road_27_2->exits, commercial_27_2->entry);
    connectPorts(commercial_27_2->toCollector, collector->car_in);
    std::vector<std::string> path_8_11 {"w", "w", "w", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "w", "n", "e"};
    residential_8_11 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_8_11), 7, "residential_8_11", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_8_11);
    connectPorts(residential_8_11->q_send, road_8_11->q_recv_bs);
    connectPorts(residential_8_11->exit, road_8_11->entries);
    connectPorts(road_8_11->q_sans_bs, residential_8_11->q_rans);
    commercial_30_3 = std::make_shared<Commercial>(29, "commercial_30_3");
    addSubModel(commercial_30_3);
    connectPorts(road_30_3->exits, commercial_30_3->entry);
    connectPorts(commercial_30_3->toCollector, collector->car_in);
    std::vector<std::string> path_2_3 {"s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "e"};
    residential_2_3 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_2_3), 1, "residential_2_3", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_2_3);
    connectPorts(residential_2_3->q_send, road_2_3->q_recv_bs);
    connectPorts(residential_2_3->exit, road_2_3->entries);
    connectPorts(road_2_3->q_sans_bs, residential_2_3->q_rans);
    commercial_46_5 = std::make_shared<Commercial>(45, "commercial_46_5");
    addSubModel(commercial_46_5);
    connectPorts(road_46_5->exits, commercial_46_5->entry);
    connectPorts(commercial_46_5->toCollector, collector->car_in);
    std::vector<std::string> path_9_6 {"w", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "e"};
    residential_9_6 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_9_6), 8, "residential_9_6", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_9_6);
    connectPorts(residential_9_6->q_send, road_9_6->q_recv_bs);
    connectPorts(residential_9_6->exit, road_9_6->entries);
    connectPorts(road_9_6->q_sans_bs, residential_9_6->q_rans);
    commercial_30_5 = std::make_shared<Commercial>(29, "commercial_30_5");
    addSubModel(commercial_30_5);
    connectPorts(road_30_5->exits, commercial_30_5->entry);
    connectPorts(commercial_30_5->toCollector, collector->car_in);
    std::vector<std::string> path_12_5 {"s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "w", "w"};
    residential_12_5 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_12_5), 11, "residential_12_5", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_12_5);
    connectPorts(residential_12_5->q_send, road_12_5->q_recv_bs);
    connectPorts(residential_12_5->exit, road_12_5->entries);
    connectPorts(road_12_5->q_sans_bs, residential_12_5->q_rans);
    commercial_36_1 = std::make_shared<Commercial>(35, "commercial_36_1");
    addSubModel(commercial_36_1);
    connectPorts(road_36_1->exits, commercial_36_1->entry);
    connectPorts(commercial_36_1->toCollector, collector->car_in);
    std::vector<std::string> path_4_11 {"w", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "w"};
    residential_4_11 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_4_11), 3, "residential_4_11", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_4_11);
    connectPorts(residential_4_11->q_send, road_4_11->q_recv_bs);
    connectPorts(residential_4_11->exit, road_4_11->entries);
    connectPorts(road_4_11->q_sans_bs, residential_4_11->q_rans);
    commercial_28_7 = std::make_shared<Commercial>(27, "commercial_28_7");
    addSubModel(commercial_28_7);
    connectPorts(road_28_7->exits, commercial_28_7->entry);
    connectPorts(commercial_28_7->toCollector, collector->car_in);
    std::vector<std::string> path_13_4 {"e", "e", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "e", "n"};
    residential_13_4 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_13_4), 12, "residential_13_4", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_13_4);
    connectPorts(residential_13_4->q_send, road_13_4->q_recv_bs);
    connectPorts(residential_13_4->exit, road_13_4->entries);
    connectPorts(road_13_4->q_sans_bs, residential_13_4->q_rans);
    commercial_41_10 = std::make_shared<Commercial>(40, "commercial_41_10");
    addSubModel(commercial_41_10);
    connectPorts(road_41_10->exits, commercial_41_10->entry);
    connectPorts(commercial_41_10->toCollector, collector->car_in);
    std::vector<std::string> path_24_7 {"w", "s", "s", "s", "s", "s", "s", "w", "n", "n"};
    residential_24_7 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_24_7), 23, "residential_24_7", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_24_7);
    connectPorts(residential_24_7->q_send, road_24_7->q_recv_bs);
    connectPorts(residential_24_7->exit, road_24_7->entries);
    connectPorts(road_24_7->q_sans_bs, residential_24_7->q_rans);
    commercial_33_2 = std::make_shared<Commercial>(32, "commercial_33_2");
    addSubModel(commercial_33_2);
    connectPorts(road_33_2->exits, commercial_33_2->entry);
    connectPorts(commercial_33_2->toCollector, collector->car_in);
    std::vector<std::string> path_10_1 {"e", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "e", "e"};
    residential_10_1 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_10_1), 9, "residential_10_1", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_10_1);
    connectPorts(residential_10_1->q_send, road_10_1->q_recv_bs);
    connectPorts(residential_10_1->exit, road_10_1->entries);
    connectPorts(road_10_1->q_sans_bs, residential_10_1->q_rans);
    commercial_30_7 = std::make_shared<Commercial>(29, "commercial_30_7");
    addSubModel(commercial_30_7);
    connectPorts(road_30_7->exits, commercial_30_7->entry);
    connectPorts(commercial_30_7->toCollector, collector->car_in);
    std::vector<std::string> path_20_5 {"s", "e", "e", "s", "s", "s", "s", "s"};
    residential_20_5 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_20_5), 19, "residential_20_5", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_20_5);
    connectPorts(residential_20_5->q_send, road_20_5->q_recv_bs);
    connectPorts(residential_20_5->exit, road_20_5->entries);
    connectPorts(road_20_5->q_sans_bs, residential_20_5->q_rans);
    commercial_31_8 = std::make_shared<Commercial>(30, "commercial_31_8");
    addSubModel(commercial_31_8);
    connectPorts(road_31_8->exits, commercial_31_8->entry);
    connectPorts(commercial_31_8->toCollector, collector->car_in);
    std::vector<std::string> path_3_4 {"s", "e", "e", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "w", "w"};
    residential_3_4 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_3_4), 2, "residential_3_4", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_3_4);
    connectPorts(residential_3_4->q_send, road_3_4->q_recv_bs);
    connectPorts(residential_3_4->exit, road_3_4->entries);
    connectPorts(road_3_4->q_sans_bs, residential_3_4->q_rans);
    commercial_44_5 = std::make_shared<Commercial>(43, "commercial_44_5");
    addSubModel(commercial_44_5);
    connectPorts(road_44_5->exits, commercial_44_5->entry);
    connectPorts(commercial_44_5->toCollector, collector->car_in);
    std::vector<std::string> path_8_7 {"w", "s", "e", "e", "s", "s", "s", "s", "s", "s", "s", "s", "s"};
    residential_8_7 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_8_7), 7, "residential_8_7", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_8_7);
    connectPorts(residential_8_7->q_send, road_8_7->q_recv_bs);
    connectPorts(residential_8_7->exit, road_8_7->entries);
    connectPorts(road_8_7->q_sans_bs, residential_8_7->q_rans);
    commercial_27_8 = std::make_shared<Commercial>(26, "commercial_27_8");
    addSubModel(commercial_27_8);
    connectPorts(road_27_8->exits, commercial_27_8->entry);
    connectPorts(commercial_27_8->toCollector, collector->car_in);
    std::vector<std::string> path_23_8 {"w", "w", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "e", "n"};
    residential_23_8 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_23_8), 22, "residential_23_8", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_23_8);
    connectPorts(residential_23_8->q_send, road_23_8->q_recv_bs);
    connectPorts(residential_23_8->exit, road_23_8->entries);
    connectPorts(road_23_8->q_sans_bs, residential_23_8->q_rans);
    commercial_49_6 = std::make_shared<Commercial>(48, "commercial_49_6");
    addSubModel(commercial_49_6);
    connectPorts(road_49_6->exits, commercial_49_6->entry);
    connectPorts(commercial_49_6->toCollector, collector->car_in);
    std::vector<std::string> path_15_4 {"s", "e", "e", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s"};
    residential_15_4 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_15_4), 14, "residential_15_4", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_15_4);
    connectPorts(residential_15_4->q_send, road_15_4->q_recv_bs);
    connectPorts(residential_15_4->exit, road_15_4->entries);
    connectPorts(road_15_4->q_sans_bs, residential_15_4->q_rans);
    commercial_45_8 = std::make_shared<Commercial>(44, "commercial_45_8");
    addSubModel(commercial_45_8);
    connectPorts(road_45_8->exits, commercial_45_8->entry);
    connectPorts(commercial_45_8->toCollector, collector->car_in);
    std::vector<std::string> path_12_9 {"w", "w", "s", "s", "s", "s", "s", "s", "s", "e", "e"};
    residential_12_9 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_12_9), 11, "residential_12_9", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_12_9);
    connectPorts(residential_12_9->q_send, road_12_9->q_recv_bs);
    connectPorts(residential_12_9->exit, road_12_9->entries);
    connectPorts(road_12_9->q_sans_bs, residential_12_9->q_rans);
    commercial_26_7 = std::make_shared<Commercial>(25, "commercial_26_7");
    addSubModel(commercial_26_7);
    connectPorts(road_26_7->exits, commercial_26_7->entry);
    connectPorts(commercial_26_7->toCollector, collector->car_in);
    std::vector<std::string> path_15_8 {"w", "w", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "e"};
    residential_15_8 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_15_8), 14, "residential_15_8", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_15_8);
    connectPorts(residential_15_8->q_send, road_15_8->q_recv_bs);
    connectPorts(residential_15_8->exit, road_15_8->entries);
    connectPorts(road_15_8->q_sans_bs, residential_15_8->q_rans);
    commercial_50_5 = std::make_shared<Commercial>(49, "commercial_50_5");
    addSubModel(commercial_50_5);
    connectPorts(road_50_5->exits, commercial_50_5->entry);
    connectPorts(commercial_50_5->toCollector, collector->car_in);
    std::vector<std::string> path_15_2 {"e", "s", "s", "s", "s", "s", "s", "s", "s", "s", "w", "n", "n"};
    residential_15_2 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_15_2), 14, "residential_15_2", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_15_2);
    connectPorts(residential_15_2->q_send, road_15_2->q_recv_bs);
    connectPorts(residential_15_2->exit, road_15_2->entries);
    connectPorts(road_15_2->q_sans_bs, residential_15_2->q_rans);
    commercial_29_2 = std::make_shared<Commercial>(28, "commercial_29_2");
    addSubModel(commercial_29_2);
    connectPorts(road_29_2->exits, commercial_29_2->entry);
    connectPorts(commercial_29_2->toCollector, collector->car_in);
    std::vector<std::string> path_8_3 {"n", "e", "e", "e", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "w", "w"};
    residential_8_3 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_8_3), 7, "residential_8_3", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_8_3);
    connectPorts(residential_8_3->q_send, road_8_3->q_recv_bs);
    connectPorts(residential_8_3->exit, road_8_3->entries);
    connectPorts(road_8_3->q_sans_bs, residential_8_3->q_rans);
    commercial_28_5 = std::make_shared<Commercial>(27, "commercial_28_5");
    addSubModel(commercial_28_5);
    connectPorts(road_28_5->exits, commercial_28_5->entry);
    connectPorts(commercial_28_5->toCollector, collector->car_in);
    std::vector<std::string> path_25_10 {"w", "w", "w", "s", "e"};
    residential_25_10 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_25_10), 24, "residential_25_10", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_25_10);
    connectPorts(residential_25_10->q_send, road_25_10->q_recv_bs);
    connectPorts(residential_25_10->exit, road_25_10->entries);
    connectPorts(road_25_10->q_sans_bs, residential_25_10->q_rans);
    commercial_26_5 = std::make_shared<Commercial>(25, "commercial_26_5");
    addSubModel(commercial_26_5);
    connectPorts(road_26_5->exits, commercial_26_5->entry);
    connectPorts(commercial_26_5->toCollector, collector->car_in);
    std::vector<std::string> path_19_6 {"e", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s"};
    residential_19_6 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_19_6), 18, "residential_19_6", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_19_6);
    connectPorts(residential_19_6->q_send, road_19_6->q_recv_bs);
    connectPorts(residential_19_6->exit, road_19_6->entries);
    connectPorts(road_19_6->q_sans_bs, residential_19_6->q_rans);
    commercial_49_8 = std::make_shared<Commercial>(48, "commercial_49_8");
    addSubModel(commercial_49_8);
    connectPorts(road_49_8->exits, commercial_49_8->entry);
    connectPorts(commercial_49_8->toCollector, collector->car_in);
    std::vector<std::string> path_6_5 {"e", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "e", "n", "n"};
    residential_6_5 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_6_5), 5, "residential_6_5", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_6_5);
    connectPorts(residential_6_5->q_send, road_6_5->q_recv_bs);
    connectPorts(residential_6_5->exit, road_6_5->entries);
    connectPorts(road_6_5->q_sans_bs, residential_6_5->q_rans);
    commercial_35_10 = std::make_shared<Commercial>(34, "commercial_35_10");
    addSubModel(commercial_35_10);
    connectPorts(road_35_10->exits, commercial_35_10->entry);
    connectPorts(commercial_35_10->toCollector, collector->car_in);
    std::vector<std::string> path_11_10 {"n", "w", "w", "w", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s"};
    residential_11_10 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_11_10), 10, "residential_11_10", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_11_10);
    connectPorts(residential_11_10->q_send, road_11_10->q_recv_bs);
    connectPorts(residential_11_10->exit, road_11_10->entries);
    connectPorts(road_11_10->q_sans_bs, residential_11_10->q_rans);
    commercial_45_4 = std::make_shared<Commercial>(44, "commercial_45_4");
    addSubModel(commercial_45_4);
    connectPorts(road_45_4->exits, commercial_45_4->entry);
    connectPorts(commercial_45_4->toCollector, collector->car_in);
    std::vector<std::string> path_21_2 {"n", "e", "e", "e", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "e", "n", "w"};
    residential_21_2 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_21_2), 20, "residential_21_2", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_21_2);
    connectPorts(residential_21_2->q_send, road_21_2->q_recv_bs);
    connectPorts(residential_21_2->exit, road_21_2->entries);
    connectPorts(road_21_2->q_sans_bs, residential_21_2->q_rans);
    commercial_36_9 = std::make_shared<Commercial>(35, "commercial_36_9");
    addSubModel(commercial_36_9);
    connectPorts(road_36_9->exits, commercial_36_9->entry);
    connectPorts(commercial_36_9->toCollector, collector->car_in);
    std::vector<std::string> path_2_1 {"e", "e", "e", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "e", "n", "w"};
    residential_2_1 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_2_1), 1, "residential_2_1", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_2_1);
    connectPorts(residential_2_1->q_send, road_2_1->q_recv_bs);
    connectPorts(residential_2_1->exit, road_2_1->entries);
    connectPorts(road_2_1->q_sans_bs, residential_2_1->q_rans);
    commercial_28_9 = std::make_shared<Commercial>(27, "commercial_28_9");
    addSubModel(commercial_28_9);
    connectPorts(road_28_9->exits, commercial_28_9->entry);
    connectPorts(commercial_28_9->toCollector, collector->car_in);
    std::vector<std::string> path_3_6 {"e", "s", "w", "w", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "e", "e"};
    residential_3_6 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_3_6), 2, "residential_3_6", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_3_6);
    connectPorts(residential_3_6->q_send, road_3_6->q_recv_bs);
    connectPorts(residential_3_6->exit, road_3_6->entries);
    connectPorts(road_3_6->q_sans_bs, residential_3_6->q_rans);
    commercial_46_7 = std::make_shared<Commercial>(45, "commercial_46_7");
    addSubModel(commercial_46_7);
    connectPorts(road_46_7->exits, commercial_46_7->entry);
    connectPorts(commercial_46_7->toCollector, collector->car_in);
    std::vector<std::string> path_21_8 {"s", "w", "w", "s", "s", "s", "s", "s", "s", "s", "s", "w", "n", "e"};
    residential_21_8 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_21_8), 20, "residential_21_8", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_21_8);
    connectPorts(residential_21_8->q_send, road_21_8->q_recv_bs);
    connectPorts(residential_21_8->exit, road_21_8->entries);
    connectPorts(road_21_8->q_sans_bs, residential_21_8->q_rans);
    commercial_38_3 = std::make_shared<Commercial>(37, "commercial_38_3");
    addSubModel(commercial_38_3);
    connectPorts(road_38_3->exits, commercial_38_3->entry);
    connectPorts(commercial_38_3->toCollector, collector->car_in);
    std::vector<std::string> path_7_4 {"s", "e", "e", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "e", "n"};
    residential_7_4 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_7_4), 6, "residential_7_4", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_7_4);
    connectPorts(residential_7_4->q_send, road_7_4->q_recv_bs);
    connectPorts(residential_7_4->exit, road_7_4->entries);
    connectPorts(road_7_4->q_sans_bs, residential_7_4->q_rans);
    commercial_37_10 = std::make_shared<Commercial>(36, "commercial_37_10");
    addSubModel(commercial_37_10);
    connectPorts(road_37_10->exits, commercial_37_10->entry);
    connectPorts(commercial_37_10->toCollector, collector->car_in);
    std::vector<std::string> path_6_3 {"s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "w", "n", "e"};
    residential_6_3 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_6_3), 5, "residential_6_3", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_6_3);
    connectPorts(residential_6_3->q_send, road_6_3->q_recv_bs);
    connectPorts(residential_6_3->exit, road_6_3->entries);
    connectPorts(road_6_3->q_sans_bs, residential_6_3->q_rans);
    commercial_34_3 = std::make_shared<Commercial>(33, "commercial_34_3");
    addSubModel(commercial_34_3);
    connectPorts(road_34_3->exits, commercial_34_3->entry);
    connectPorts(commercial_34_3->toCollector, collector->car_in);
    std::vector<std::string> path_19_10 {"n", "w", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "e", "n", "w"};
    residential_19_10 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_19_10), 18, "residential_19_10", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_19_10);
    connectPorts(residential_19_10->q_send, road_19_10->q_recv_bs);
    connectPorts(residential_19_10->exit, road_19_10->entries);
    connectPorts(road_19_10->q_sans_bs, residential_19_10->q_rans);
    commercial_40_9 = std::make_shared<Commercial>(39, "commercial_40_9");
    addSubModel(commercial_40_9);
    connectPorts(road_40_9->exits, commercial_40_9->entry);
    connectPorts(commercial_40_9->toCollector, collector->car_in);
    std::vector<std::string> path_18_3 {"e", "e", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "w"};
    residential_18_3 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_18_3), 17, "residential_18_3", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_18_3);
    connectPorts(residential_18_3->q_send, road_18_3->q_recv_bs);
    connectPorts(residential_18_3->exit, road_18_3->entries);
    connectPorts(road_18_3->q_sans_bs, residential_18_3->q_rans);
    commercial_44_7 = std::make_shared<Commercial>(43, "commercial_44_7");
    addSubModel(commercial_44_7);
    connectPorts(road_44_7->exits, commercial_44_7->entry);
    connectPorts(commercial_44_7->toCollector, collector->car_in);
    std::vector<std::string> path_4_9 {"s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "w", "n"};
    residential_4_9 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_4_9), 3, "residential_4_9", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_4_9);
    connectPorts(residential_4_9->q_send, road_4_9->q_recv_bs);
    connectPorts(residential_4_9->exit, road_4_9->entries);
    connectPorts(road_4_9->q_sans_bs, residential_4_9->q_rans);
    commercial_35_6 = std::make_shared<Commercial>(34, "commercial_35_6");
    addSubModel(commercial_35_6);
    connectPorts(road_35_6->exits, commercial_35_6->entry);
    connectPorts(commercial_35_6->toCollector, collector->car_in);
    std::vector<std::string> path_21_6 {"w", "s", "e", "e", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s"};
    residential_21_6 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_21_6), 20, "residential_21_6", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_21_6);
    connectPorts(residential_21_6->q_send, road_21_6->q_recv_bs);
    connectPorts(residential_21_6->exit, road_21_6->entries);
    connectPorts(road_21_6->q_sans_bs, residential_21_6->q_rans);
    commercial_43_8 = std::make_shared<Commercial>(42, "commercial_43_8");
    addSubModel(commercial_43_8);
    connectPorts(road_43_8->exits, commercial_43_8->entry);
    connectPorts(commercial_43_8->toCollector, collector->car_in);
    std::vector<std::string> path_11_2 {"e", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "w"};
    residential_11_2 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_11_2), 10, "residential_11_2", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_11_2);
    connectPorts(residential_11_2->q_send, road_11_2->q_recv_bs);
    connectPorts(residential_11_2->exit, road_11_2->entries);
    connectPorts(road_11_2->q_sans_bs, residential_11_2->q_rans);
    commercial_44_3 = std::make_shared<Commercial>(43, "commercial_44_3");
    addSubModel(commercial_44_3);
    connectPorts(road_44_3->exits, commercial_44_3->entry);
    connectPorts(commercial_44_3->toCollector, collector->car_in);
    std::vector<std::string> path_19_2 {"e", "e", "e", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "e", "e"};
    residential_19_2 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_19_2), 18, "residential_19_2", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_19_2);
    connectPorts(residential_19_2->q_send, road_19_2->q_recv_bs);
    connectPorts(residential_19_2->exit, road_19_2->entries);
    connectPorts(road_19_2->q_sans_bs, residential_19_2->q_rans);
    commercial_38_11 = std::make_shared<Commercial>(37, "commercial_38_11");
    addSubModel(commercial_38_11);
    connectPorts(road_38_11->exits, commercial_38_11->entry);
    connectPorts(commercial_38_11->toCollector, collector->car_in);
    std::vector<std::string> path_23_6 {"e", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "e", "n"};
    residential_23_6 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_23_6), 22, "residential_23_6", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_23_6);
    connectPorts(residential_23_6->q_send, road_23_6->q_recv_bs);
    connectPorts(residential_23_6->exit, road_23_6->entries);
    connectPorts(road_23_6->q_sans_bs, residential_23_6->q_rans);
    commercial_49_10 = std::make_shared<Commercial>(48, "commercial_49_10");
    addSubModel(commercial_49_10);
    connectPorts(road_49_10->exits, commercial_49_10->entry);
    connectPorts(commercial_49_10->toCollector, collector->car_in);
    std::vector<std::string> path_17_10 {"w", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "e"};
    residential_17_10 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_17_10), 16, "residential_17_10", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_17_10);
    connectPorts(residential_17_10->q_send, road_17_10->q_recv_bs);
    connectPorts(residential_17_10->exit, road_17_10->entries);
    connectPorts(road_17_10->q_sans_bs, residential_17_10->q_rans);
    commercial_50_9 = std::make_shared<Commercial>(49, "commercial_50_9");
    addSubModel(commercial_50_9);
    connectPorts(road_50_9->exits, commercial_50_9->entry);
    connectPorts(commercial_50_9->toCollector, collector->car_in);
    std::vector<std::string> path_5_4 {"s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "w", "n", "e"};
    residential_5_4 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_5_4), 4, "residential_5_4", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_5_4);
    connectPorts(residential_5_4->q_send, road_5_4->q_recv_bs);
    connectPorts(residential_5_4->exit, road_5_4->entries);
    connectPorts(road_5_4->q_sans_bs, residential_5_4->q_rans);
    commercial_46_3 = std::make_shared<Commercial>(45, "commercial_46_3");
    addSubModel(commercial_46_3);
    connectPorts(road_46_3->exits, commercial_46_3->entry);
    connectPorts(commercial_46_3->toCollector, collector->car_in);
    std::vector<std::string> path_5_2 {"n", "e", "e", "e", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "w"};
    residential_5_2 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_5_2), 4, "residential_5_2", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_5_2);
    connectPorts(residential_5_2->q_send, road_5_2->q_recv_bs);
    connectPorts(residential_5_2->exit, road_5_2->entries);
    connectPorts(road_5_2->q_sans_bs, residential_5_2->q_rans);
    commercial_40_7 = std::make_shared<Commercial>(39, "commercial_40_7");
    addSubModel(commercial_40_7);
    connectPorts(road_40_7->exits, commercial_40_7->entry);
    connectPorts(commercial_40_7->toCollector, collector->car_in);
    std::vector<std::string> path_23_10 {"n", "w", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s"};
    residential_23_10 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_23_10), 22, "residential_23_10", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_23_10);
    connectPorts(residential_23_10->q_send, road_23_10->q_recv_bs);
    connectPorts(residential_23_10->exit, road_23_10->entries);
    connectPorts(road_23_10->q_sans_bs, residential_23_10->q_rans);
    commercial_51_8 = std::make_shared<Commercial>(49, "commercial_51_8");
    addSubModel(commercial_51_8);
    connectPorts(road_51_8->exits, commercial_51_8->entry);
    connectPorts(commercial_51_8->toCollector, collector->car_in);
    std::vector<std::string> path_13_8 {"s", "w", "w", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s"};
    residential_13_8 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_13_8), 12, "residential_13_8", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_13_8);
    connectPorts(residential_13_8->q_send, road_13_8->q_recv_bs);
    connectPorts(residential_13_8->exit, road_13_8->entries);
    connectPorts(road_13_8->q_sans_bs, residential_13_8->q_rans);
    commercial_39_4 = std::make_shared<Commercial>(38, "commercial_39_4");
    addSubModel(commercial_39_4);
    connectPorts(road_39_4->exits, commercial_39_4->entry);
    connectPorts(commercial_39_4->toCollector, collector->car_in);
    std::vector<std::string> path_17_8 {"s", "s", "s", "s", "s", "s", "s", "s", "s"};
    residential_17_8 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_17_8), 16, "residential_17_8", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_17_8);
    connectPorts(residential_17_8->q_send, road_17_8->q_recv_bs);
    connectPorts(residential_17_8->exit, road_17_8->entries);
    connectPorts(road_17_8->q_sans_bs, residential_17_8->q_rans);
    commercial_35_8 = std::make_shared<Commercial>(34, "commercial_35_8");
    addSubModel(commercial_35_8);
    connectPorts(road_35_8->exits, commercial_35_8->entry);
    connectPorts(commercial_35_8->toCollector, collector->car_in);
    std::vector<std::string> path_4_5 {"s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "w", "w"};
    residential_4_5 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_4_5), 3, "residential_4_5", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_4_5);
    connectPorts(residential_4_5->q_send, road_4_5->q_recv_bs);
    connectPorts(residential_4_5->exit, road_4_5->entries);
    connectPorts(road_4_5->q_sans_bs, residential_4_5->q_rans);
    commercial_40_1 = std::make_shared<Commercial>(39, "commercial_40_1");
    addSubModel(commercial_40_1);
    connectPorts(road_40_1->exits, commercial_40_1->entry);
    connectPorts(commercial_40_1->toCollector, collector->car_in);
    std::vector<std::string> path_17_4 {"s", "s", "s", "s", "s", "s", "s"};
    residential_17_4 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_17_4), 16, "residential_17_4", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_17_4);
    connectPorts(residential_17_4->q_send, road_17_4->q_recv_bs);
    connectPorts(residential_17_4->exit, road_17_4->entries);
    connectPorts(road_17_4->q_sans_bs, residential_17_4->q_rans);
    commercial_31_4 = std::make_shared<Commercial>(30, "commercial_31_4");
    addSubModel(commercial_31_4);
    connectPorts(road_31_4->exits, commercial_31_4->entry);
    connectPorts(commercial_31_4->toCollector, collector->car_in);
    std::vector<std::string> path_20_9 {"s", "s", "s", "s", "s", "s", "s", "s", "s"};
    residential_20_9 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_20_9), 19, "residential_20_9", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_20_9);
    connectPorts(residential_20_9->q_send, road_20_9->q_recv_bs);
    connectPorts(residential_20_9->exit, road_20_9->entries);
    connectPorts(road_20_9->q_sans_bs, residential_20_9->q_rans);
    commercial_37_8 = std::make_shared<Commercial>(36, "commercial_37_8");
    addSubModel(commercial_37_8);
    connectPorts(road_37_8->exits, commercial_37_8->entry);
    connectPorts(commercial_37_8->toCollector, collector->car_in);
    std::vector<std::string> path_7_2 {"e", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "w", "n", "e"};
    residential_7_2 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_7_2), 6, "residential_7_2", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_7_2);
    connectPorts(residential_7_2->q_send, road_7_2->q_recv_bs);
    connectPorts(residential_7_2->exit, road_7_2->entries);
    connectPorts(road_7_2->q_sans_bs, residential_7_2->q_rans);
    commercial_26_3 = std::make_shared<Commercial>(25, "commercial_26_3");
    addSubModel(commercial_26_3);
    connectPorts(road_26_3->exits, commercial_26_3->entry);
    connectPorts(commercial_26_3->toCollector, collector->car_in);
    std::vector<std::string> path_5_10 {"w", "w", "w", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "e", "e"};
    residential_5_10 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_5_10), 4, "residential_5_10", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_5_10);
    connectPorts(residential_5_10->q_send, road_5_10->q_recv_bs);
    connectPorts(residential_5_10->exit, road_5_10->entries);
    connectPorts(road_5_10->q_sans_bs, residential_5_10->q_rans);
    commercial_38_7 = std::make_shared<Commercial>(37, "commercial_38_7");
    addSubModel(commercial_38_7);
    connectPorts(road_38_7->exits, commercial_38_7->entry);
    connectPorts(commercial_38_7->toCollector, collector->car_in);
    std::vector<std::string> path_1_4 {"s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "w"};
    residential_1_4 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_1_4), 0, "residential_1_4", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_1_4);
    connectPorts(residential_1_4->q_send, road_1_4->q_recv_bs);
    connectPorts(residential_1_4->exit, road_1_4->entries);
    connectPorts(road_1_4->q_sans_bs, residential_1_4->q_rans);
    commercial_40_3 = std::make_shared<Commercial>(39, "commercial_40_3");
    addSubModel(commercial_40_3);
    connectPorts(road_40_3->exits, commercial_40_3->entry);
    connectPorts(commercial_40_3->toCollector, collector->car_in);
    std::vector<std::string> path_13_10 {"w", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "e", "e"};
    residential_13_10 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_13_10), 12, "residential_13_10", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_13_10);
    connectPorts(residential_13_10->q_send, road_13_10->q_recv_bs);
    connectPorts(residential_13_10->exit, road_13_10->entries);
    connectPorts(road_13_10->q_sans_bs, residential_13_10->q_rans);
    commercial_46_11 = std::make_shared<Commercial>(45, "commercial_46_11");
    addSubModel(commercial_46_11);
    connectPorts(road_46_11->exits, commercial_46_11->entry);
    connectPorts(commercial_46_11->toCollector, collector->car_in);
    std::vector<std::string> path_13_2 {"n", "e", "e", "e", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "w"};
    residential_13_2 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_13_2), 12, "residential_13_2", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_13_2);
    connectPorts(residential_13_2->q_send, road_13_2->q_recv_bs);
    connectPorts(residential_13_2->exit, road_13_2->entries);
    connectPorts(road_13_2->q_sans_bs, residential_13_2->q_rans);
    commercial_32_7 = std::make_shared<Commercial>(31, "commercial_32_7");
    addSubModel(commercial_32_7);
    connectPorts(road_32_7->exits, commercial_32_7->entry);
    connectPorts(commercial_32_7->toCollector, collector->car_in);
    std::vector<std::string> path_6_7 {"s", "w", "w", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "e", "n"};
    residential_6_7 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_6_7), 5, "residential_6_7", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_6_7);
    connectPorts(residential_6_7->q_send, road_6_7->q_recv_bs);
    connectPorts(residential_6_7->exit, road_6_7->entries);
    connectPorts(road_6_7->q_sans_bs, residential_6_7->q_rans);
    commercial_41_6 = std::make_shared<Commercial>(40, "commercial_41_6");
    addSubModel(commercial_41_6);
    connectPorts(road_41_6->exits, commercial_41_6->entry);
    connectPorts(commercial_41_6->toCollector, collector->car_in);
    std::vector<std::string> path_11_8 {"s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "w", "n"};
    residential_11_8 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_11_8), 10, "residential_11_8", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_11_8);
    connectPorts(residential_11_8->q_send, road_11_8->q_recv_bs);
    connectPorts(residential_11_8->exit, road_11_8->entries);
    connectPorts(road_11_8->q_sans_bs, residential_11_8->q_rans);
    commercial_43_6 = std::make_shared<Commercial>(42, "commercial_43_6");
    addSubModel(commercial_43_6);
    connectPorts(road_43_6->exits, commercial_43_6->entry);
    connectPorts(commercial_43_6->toCollector, collector->car_in);
    std::vector<std::string> path_3_8 {"w", "w", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "w", "n", "n"};
    residential_3_8 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_3_8), 2, "residential_3_8", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_3_8);
    connectPorts(residential_3_8->q_send, road_3_8->q_recv_bs);
    connectPorts(residential_3_8->exit, road_3_8->entries);
    connectPorts(road_3_8->q_sans_bs, residential_3_8->q_rans);
    commercial_37_2 = std::make_shared<Commercial>(36, "commercial_37_2");
    addSubModel(commercial_37_2);
    connectPorts(road_37_2->exits, commercial_37_2->entry);
    connectPorts(commercial_37_2->toCollector, collector->car_in);
    std::vector<std::string> path_21_10 {"w", "s", "s", "s", "s", "s", "s", "w", "w"};
    residential_21_10 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_21_10), 20, "residential_21_10", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_21_10);
    connectPorts(residential_21_10->q_send, road_21_10->q_recv_bs);
    connectPorts(residential_21_10->exit, road_21_10->entries);
    connectPorts(road_21_10->q_sans_bs, residential_21_10->q_rans);
    commercial_32_5 = std::make_shared<Commercial>(31, "commercial_32_5");
    addSubModel(commercial_32_5);
    connectPorts(road_32_5->exits, commercial_32_5->entry);
    connectPorts(commercial_32_5->toCollector, collector->car_in);
    std::vector<std::string> path_16_3 {"n", "e", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "e"};
    residential_16_3 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_16_3), 15, "residential_16_3", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_16_3);
    connectPorts(residential_16_3->q_send, road_16_3->q_recv_bs);
    connectPorts(residential_16_3->exit, road_16_3->entries);
    connectPorts(road_16_3->q_sans_bs, residential_16_3->q_rans);
    commercial_42_5 = std::make_shared<Commercial>(41, "commercial_42_5");
    addSubModel(commercial_42_5);
    connectPorts(road_42_5->exits, commercial_42_5->entry);
    connectPorts(commercial_42_5->toCollector, collector->car_in);
    std::vector<std::string> path_24_11 {"w", "w", "w", "s", "s", "s", "s", "s", "e"};
    residential_24_11 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_24_11), 23, "residential_24_11", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_24_11);
    connectPorts(residential_24_11->q_send, road_24_11->q_recv_bs);
    connectPorts(residential_24_11->exit, road_24_11->entries);
    connectPorts(road_24_11->q_sans_bs, residential_24_11->q_rans);
    commercial_34_5 = std::make_shared<Commercial>(33, "commercial_34_5");
    addSubModel(commercial_34_5);
    connectPorts(road_34_5->exits, commercial_34_5->entry);
    connectPorts(commercial_34_5->toCollector, collector->car_in);
    std::vector<std::string> path_1_8 {"s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s"};
    residential_1_8 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_1_8), 0, "residential_1_8", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_1_8);
    connectPorts(residential_1_8->q_send, road_1_8->q_recv_bs);
    connectPorts(residential_1_8->exit, road_1_8->entries);
    connectPorts(road_1_8->q_sans_bs, residential_1_8->q_rans);
    commercial_41_8 = std::make_shared<Commercial>(40, "commercial_41_8");
    addSubModel(commercial_41_8);
    connectPorts(road_41_8->exits, commercial_41_8->entry);
    connectPorts(commercial_41_8->toCollector, collector->car_in);
    std::vector<std::string> path_23_2 {"e", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "e", "e"};
    residential_23_2 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_23_2), 22, "residential_23_2", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_23_2);
    connectPorts(residential_23_2->q_send, road_23_2->q_recv_bs);
    connectPorts(residential_23_2->exit, road_23_2->entries);
    connectPorts(road_23_2->q_sans_bs, residential_23_2->q_rans);
    commercial_42_7 = std::make_shared<Commercial>(41, "commercial_42_7");
    addSubModel(commercial_42_7);
    connectPorts(road_42_7->exits, commercial_42_7->entry);
    connectPorts(commercial_42_7->toCollector, collector->car_in);
    std::vector<std::string> path_20_7 {"w", "s", "e", "e", "s", "s", "s", "s", "s", "s", "e"};
    residential_20_7 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_20_7), 19, "residential_20_7", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_20_7);
    connectPorts(residential_20_7->q_send, road_20_7->q_recv_bs);
    connectPorts(residential_20_7->exit, road_20_7->entries);
    connectPorts(road_20_7->q_sans_bs, residential_20_7->q_rans);
    commercial_34_9 = std::make_shared<Commercial>(33, "commercial_34_9");
    addSubModel(commercial_34_9);
    connectPorts(road_34_9->exits, commercial_34_9->entry);
    connectPorts(commercial_34_9->toCollector, collector->car_in);
    std::vector<std::string> path_19_4 {"s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s"};
    residential_19_4 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_19_4), 18, "residential_19_4", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_19_4);
    connectPorts(residential_19_4->q_send, road_19_4->q_recv_bs);
    connectPorts(residential_19_4->exit, road_19_4->entries);
    connectPorts(road_19_4->q_sans_bs, residential_19_4->q_rans);
    commercial_47_4 = std::make_shared<Commercial>(46, "commercial_47_4");
    addSubModel(commercial_47_4);
    connectPorts(road_47_4->exits, commercial_47_4->entry);
    connectPorts(commercial_47_4->toCollector, collector->car_in);
    std::vector<std::string> path_16_7 {"w", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "s", "e", "n"};
    residential_16_7 = std::make_shared<Residence>(std::make_shared<std::vector<std::string> >(path_16_7), 15, "residential_16_7", 100, 100, 15, 15, 15, 15);
    addSubModel(residential_16_7);
    connectPorts(residential_16_7->q_send, road_16_7->q_recv_bs);
    connectPorts(residential_16_7->exit, road_16_7->entries);
    connectPorts(road_16_7->q_sans_bs, residential_16_7->q_rans);
    commercial_45_6 = std::make_shared<Commercial>(44, "commercial_45_6");
    addSubModel(commercial_45_6);
    connectPorts(road_45_6->exits, commercial_45_6->entry);
    connectPorts(commercial_45_6->toCollector, collector->car_in);

    LOG_DEBUG("CITY: Added all buildings");
}
}
